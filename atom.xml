<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog.xrr.fun</title>
  
  <subtitle>假装记了个笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https:/blog.xrr.fun/"/>
  <updated>2019-12-01T05:18:26.549Z</updated>
  <id>https:/blog.xrr.fun/</id>
  
  <author>
    <name>xurr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建VPN服务之IPSec(二)</title>
    <link href="https:/blog.xrr.fun/2018/07/26/2018-07-26-IPSec2/"/>
    <id>https:/blog.xrr.fun/2018/07/26/2018-07-26-IPSec2/</id>
    <published>2018-07-25T16:00:00.000Z</published>
    <updated>2019-12-01T05:18:26.549Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用命令行逐步安装IPSec的折腾，后来发现在github上一键安装IPSec服务的安装脚本，有三种安装选项，见项目中安装说明即可。</p><p>项目地址：<code>https://github.com/hwdsl2/setup-ipsec-vpn</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前使用命令行逐步安装IPSec的折腾，后来发现在github上一键安装IPSec服务的安装脚本，有三种安装选项，见项目中安装说明即可。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;code&gt;https://github.com/hwdsl2/setup-ipsec-vpn&lt;/code&gt;&lt;/
      
    
    </summary>
    
      <category term="VPN" scheme="https:/blog.xrr.fun/categories/VPN/"/>
    
    
      <category term="VPN" scheme="https:/blog.xrr.fun/tags/VPN/"/>
    
      <category term="IPSec" scheme="https:/blog.xrr.fun/tags/IPSec/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透之frps与frpc</title>
    <link href="https:/blog.xrr.fun/2018/03/19/2018-03-19-frp/"/>
    <id>https:/blog.xrr.fun/2018/03/19/2018-03-19-frp/</id>
    <published>2018-03-18T16:00:00.000Z</published>
    <updated>2019-12-01T05:18:26.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在VPS上配置frps-ini"><a href="#在VPS上配置frps-ini" class="headerlink" title="在VPS上配置frps.ini"></a>在VPS上配置frps.ini</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7777</span></span><br><span class="line"><span class="comment">#vhost_http_port网站访问端口</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">80</span></span><br><span class="line"><span class="comment">#vhost_https_port = 443</span></span><br><span class="line"><span class="comment">#dashboard_port状态以及代理统计信息展示,网址:7500可查看详情</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">6443</span></span><br><span class="line"><span class="attr">log_file</span> = ./frps.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="comment">#privilege_mode 特权模式,开通后web,ssh等使用都可以直接在客户端设置</span></span><br><span class="line"><span class="attr">privilege_mode</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">#特权连接密码</span></span><br><span class="line"><span class="attr">privilege_token</span> = <span class="number">12345</span>qwert</span><br><span class="line"><span class="comment">#max_pool_count最大链接池,每个代理预先与后端服务器建立起指定数量的最大链接数</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id="在NAS上配置frpc-ini"><a href="#在NAS上配置frpc-ini" class="headerlink" title="在NAS上配置frpc.ini"></a>在NAS上配置frpc.ini</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 换成frps所在的服务器IP</span><br><span class="line"><span class="comment">#要与frps.ini中的bind_port一样</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7777</span></span><br><span class="line"><span class="attr">log_file</span> = ./frpc.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="comment">#特权连接密码,要与frps.ini的一样</span></span><br><span class="line"><span class="attr">privilege_token</span> = <span class="number">12345</span>qwert</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">privilege_mode</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6022</span></span><br><span class="line"><span class="attr">use_gzip</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">pool_count</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">#访问方式 ssh -oPort=6022 test@x.x.x.x</span></span><br><span class="line"><span class="comment">#访问方式 ssh -p 6022 test@x.x.x.x</span></span><br><span class="line"></span><br><span class="line"><span class="section">[nas]</span></span><br><span class="line"><span class="attr">privilege_mode</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">5000</span></span><br><span class="line"><span class="comment">#custom_domains域名</span></span><br><span class="line"><span class="attr">custom_domains</span> = nas.xrr.fun</span><br><span class="line"><span class="attr">pool_count</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">#访问方式 http://nas.xrr.fun</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ws]</span></span><br><span class="line"><span class="attr">privilege_mode</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8888</span></span><br><span class="line"><span class="attr">custom_domains</span> = ws.xrr.fun</span><br><span class="line"><span class="attr">pool_count</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">#访问方式 http://ws.xrr.fun</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在VPS上配置frps-ini&quot;&gt;&lt;a href=&quot;#在VPS上配置frps-ini&quot; class=&quot;headerlink&quot; title=&quot;在VPS上配置frps.ini&quot;&gt;&lt;/a&gt;在VPS上配置frps.ini&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="NAT" scheme="https:/blog.xrr.fun/categories/NAT/"/>
    
    
      <category term="内网穿透" scheme="https:/blog.xrr.fun/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="frp" scheme="https:/blog.xrr.fun/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>搭建VPN服务之IPSec</title>
    <link href="https:/blog.xrr.fun/2018/03/18/2018-03-18-IPSec/"/>
    <id>https:/blog.xrr.fun/2018/03/18/2018-03-18-IPSec/</id>
    <published>2018-03-17T16:00:00.000Z</published>
    <updated>2019-12-01T05:18:26.548Z</updated>
    
    <content type="html"><![CDATA[<p>在vultr的VPS上搭建好PPTP的VPN服务后，迫不及待的准备试用一下时，发现：</p><ul><li>PPTP在安卓手机上可以使用手机自带的VPN客户端整常登录浏览google</li><li>Mac系统(10.13.3)居然抛弃PPTP的自带客户端，只有自带IPSec的客户端了</li><li>Mac上好用的PPTP客户端，Shimo试用版可登录VPN服务整常使用，但试用期过后要收费59刀，破解版安装运行提示文件损坏无法使用</li><li>怕其他第三方的PPTP客户端不靠谱</li></ul><p>基于以上原因想干脆在VPS上再搭建一个IPSec的VPN算了,搜了一下strongswan貌似可用，那么就愉快的决定开始实验咯</p><h3 id="零、主机环境"><a href="#零、主机环境" class="headerlink" title="零、主机环境"></a>零、主机环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vultr VPS + Ubuntu 16.04</span><br></pre></td></tr></table></figure><h3 id="一、安装IPSec服务程序"><a href="#一、安装IPSec服务程序" class="headerlink" title="一、安装IPSec服务程序"></a>一、安装IPSec服务程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install strongswan strongswan-plugin-xauth-generic</span><br></pre></td></tr></table></figure><h3 id="二、配置IPSec服务程序"><a href="#二、配置IPSec服务程序" class="headerlink" title="二、配置IPSec服务程序"></a>二、配置IPSec服务程序</h3><p>配置IPSec共享密钥、用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ipsec.secrets</span><br></pre></td></tr></table></figure><p>在配置文件中增加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: PSK <span class="string">"test"</span></span><br><span class="line">username : XAUTH <span class="string">"password"</span></span><br></pre></td></tr></table></figure><p>PSK字段的值是预共享密钥，将test换成你想要的共享密钥值，username和password换成你想要的用户名和密码，在IPSec的客户端登录时会需要使用这三个信息</p><p>配置IPSec内部路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ipsec.conf</span><br></pre></td></tr></table></figure><p>配置后该配置文件配置项内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">config setup</span><br><span class="line">    cachecrls=yes</span><br><span class="line">    uniqueids=yes</span><br><span class="line"></span><br><span class="line">conn ios</span><br><span class="line">    keyexchange=ikev1</span><br><span class="line">    authby=xauthpsk</span><br><span class="line">    xauth=server</span><br><span class="line">    left=%defaultroute</span><br><span class="line">    leftsubnet=0.0.0.0/0</span><br><span class="line">    leftfirewall=yes</span><br><span class="line">    right=%any</span><br><span class="line">    rightsubnet=0.0.0.0/0</span><br><span class="line">    rightsourceip=192.168.100.1/24</span><br><span class="line">    rightdns=8.8.8.8</span><br><span class="line">    auto=add</span><br></pre></td></tr></table></figure><p>注：由于本文的VPS上已搭建了PPTP（内部网络192.168.0.1/24），为防止NAT转发时可能的冲突，本文的strongswan的内部网络选用了192.168.100.1/24</p><p>重启strongswan服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipsec restart</span><br></pre></td></tr></table></figure><h3 id="三、配置IP转发"><a href="#三、配置IP转发" class="headerlink" title="三、配置IP转发"></a>三、配置IP转发</h3><p>原理同PPTP中的内核IP转发规则的配置相同<br>打开内核IP转发功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>配置转发规则（假设已将安装了iptables，没有的话参考PPTP的安装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>这行命令应该是指将 <code>192.168.100.xxx(192.168.100.1/24)</code>的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准</p><h3 id="四、开机启动生效NAT转发规则和启动IPSec"><a href="#四、开机启动生效NAT转发规则和启动IPSec" class="headerlink" title="四、开机启动生效NAT转发规则和启动IPSec"></a>四、开机启动生效NAT转发规则和启动IPSec</h3><p>设置开机启动<br>打开/etc/rc.local文件，在exit 0语句前加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE</span><br><span class="line">sudo service ipsec restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在vultr的VPS上搭建好PPTP的VPN服务后，迫不及待的准备试用一下时，发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PPTP在安卓手机上可以使用手机自带的VPN客户端整常登录浏览google&lt;/li&gt;
&lt;li&gt;Mac系统(10.13.3)居然抛弃PPTP的自带客户端，只有自带I
      
    
    </summary>
    
      <category term="VPN" scheme="https:/blog.xrr.fun/categories/VPN/"/>
    
    
      <category term="VPN" scheme="https:/blog.xrr.fun/tags/VPN/"/>
    
      <category term="IPSec" scheme="https:/blog.xrr.fun/tags/IPSec/"/>
    
  </entry>
  
  <entry>
    <title>搭建VPN服务之PPTP</title>
    <link href="https:/blog.xrr.fun/2018/03/17/2018-03-17-PPTP/"/>
    <id>https:/blog.xrr.fun/2018/03/17/2018-03-17-PPTP/</id>
    <published>2018-03-16T16:00:00.000Z</published>
    <updated>2019-12-01T05:18:26.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017-03-17-天气晴"><a href="#2017-03-17-天气晴" class="headerlink" title="2017-03-17 天气晴"></a>2017-03-17 天气晴</h3><p>今天在vultr上租了一个VPS，玩玩挺有意思，租VPS的一个重要用途就是搭建一个VPN服务，后续还将搭建一个frps做家中NAS的内网穿透。今天先整理下VPS上搭建VPN的步骤。</p><h3 id="零、主机环境"><a href="#零、主机环境" class="headerlink" title="零、主机环境"></a>零、主机环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vultr VPS + Ubuntu 16.04</span><br></pre></td></tr></table></figure><h3 id="一、安装VPN服务程序pptpd"><a href="#一、安装VPN服务程序pptpd" class="headerlink" title="一、安装VPN服务程序pptpd"></a>一、安装VPN服务程序pptpd</h3><p>更新软件仓库列表，下载安装VPN服务程序pptpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure><h3 id="二、配置pptpd程序"><a href="#二、配置pptpd程序" class="headerlink" title="二、配置pptpd程序"></a>二、配置pptpd程序</h3><p>打开配置文件，配置VPN内部网络，将pptpd.conf中如下两行配置打开注释并保存修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/pptpd.conf</span><br><span class="line">localip 192.168.0.1</span><br><span class="line">remoteip 192.168.0.234-238,192.168.0.245</span><br></pre></td></tr></table></figure><p>配置VPN登录的用户名密码列表，配置文件配置格式如下，username和password分别换成自定义的用户名密码，*表示允许该用户名密码在任何ip上登录VPN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ppp/chap-secrets</span><br><span class="line">username  pptpd  <span class="string">"password"</span>  *</span><br></pre></td></tr></table></figure><p>配置DNS,取消注释<code>ms-dns</code>，修改DNS，例如，8.8.8.8和8.8.4.4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If pppd is acting as a server for Microsoft Windows clients, this</span></span><br><span class="line"><span class="comment"># option allows pppd to supply one or two DNS (Domain Name Server)</span></span><br><span class="line"><span class="comment"># addresses to the clients.  The first instance of this option</span></span><br><span class="line"><span class="comment"># specifies the primary DNS address; the second instance (if given)</span></span><br><span class="line"><span class="comment"># specifies the secondary DNS address.</span></span><br><span class="line"><span class="comment"># Attention! This information may not be taken into account by a Windows</span></span><br><span class="line"><span class="comment"># client. See KB311218 in Microsoft's knowledge base for more information.</span></span><br><span class="line">ms-dns 8.8.8.8</span><br><span class="line">ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure><h3 id="三、开启内核IP转发"><a href="#三、开启内核IP转发" class="headerlink" title="三、开启内核IP转发"></a>三、开启内核IP转发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>取消注释<code>net.ipv4.ip_forward=1</code>，修改配置保存，执行如下语句是配置修改生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure><p>注：如下命令也可以开启内核的IP转发功能，但是据说重启后将恢复关闭内核IP转发，具体原理未细究</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><h3 id="四、配置IP转发规则"><a href="#四、配置IP转发规则" class="headerlink" title="四、配置IP转发规则"></a>四、配置IP转发规则</h3><p>安装iptables，配置NAT转发规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install iptables</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>第二行命令应该是指将 <code>192.168.0.xxx(192.168.0.0/24)</code>的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准</p><p>重启服务，应用配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service pptpd restart</span><br></pre></td></tr></table></figure><h3 id="五、开机启动生效NAT转发规则和启动pptpd"><a href="#五、开机启动生效NAT转发规则和启动pptpd" class="headerlink" title="五、开机启动生效NAT转发规则和启动pptpd"></a>五、开机启动生效NAT转发规则和启动pptpd</h3><p>设置开机启动<br>打开/etc/rc.local文件，在exit 0语句前加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE</span><br><span class="line">sudo service pptpd start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2017-03-17-天气晴&quot;&gt;&lt;a href=&quot;#2017-03-17-天气晴&quot; class=&quot;headerlink&quot; title=&quot;2017-03-17 天气晴&quot;&gt;&lt;/a&gt;2017-03-17 天气晴&lt;/h3&gt;&lt;p&gt;今天在vultr上租了一个VPS，玩玩挺有意
      
    
    </summary>
    
      <category term="VPN" scheme="https:/blog.xrr.fun/categories/VPN/"/>
    
    
      <category term="VPN" scheme="https:/blog.xrr.fun/tags/VPN/"/>
    
      <category term="PPTP" scheme="https:/blog.xrr.fun/tags/PPTP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https:/blog.xrr.fun/2018/01/01/2018-01-01-hello-world/"/>
    <id>https:/blog.xrr.fun/2018/01/01/2018-01-01-hello-world/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2019-12-01T05:18:26.547Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="https:/blog.xrr.fun/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="https:/blog.xrr.fun/tags/hexo/"/>
    
      <category term="blog" scheme="https:/blog.xrr.fun/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>使用VSCode调试Electron项目</title>
    <link href="https:/blog.xrr.fun/2017/12/02/2017-12-02-electron-vscodedebugcfg/"/>
    <id>https:/blog.xrr.fun/2017/12/02/2017-12-02-electron-vscodedebugcfg/</id>
    <published>2017-12-01T16:00:00.000Z</published>
    <updated>2019-12-01T05:18:26.547Z</updated>
    
    <content type="html"><![CDATA[<p>使用新版本的vscode调试各种语言的项目（包扩electron项目）的配置貌似便捷了很多，有点小惊喜。以electron的quick-start项目为例，小记一下，O(∩_∩)O哈哈~</p><h2 id="vscode版本"><a href="#vscode版本" class="headerlink" title="vscode版本"></a>vscode版本</h2><p><img src="http://pic.xrr.fun/blog/20171202/vscodeversion.png" alt="vscodeversion.png"></p><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 克隆示例项目的仓库</span><br><span class="line">git clone https://github.com/electron/electron-quick-start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 进入这个仓库</span><br><span class="line">cd electron-quick-start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 运行</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="http://pic.xrr.fun/blog/20171202/project.png" alt="project.png"></p><h2 id="vscode调试配置"><a href="#vscode调试配置" class="headerlink" title="vscode调试配置"></a>vscode调试配置</h2><p>刚开始项目没有调试配置，需要先选择调试器环境，例如C++代码就可以选C++(GDB/LLDB)，这里electron运行的环境是nodejs，则选Node.js。</p><p><img src="http://pic.xrr.fun/blog/20171202/cfg1.png" alt="cfg1.png"></p><p>选择好调试环境后，在工程目录下会自动生成.vscode/launch.json文件。接着就是点“添加配置”按钮，使用提示下拉框方便的选择调试工程的类型，自动填充相应配置。</p><p><img src="http://pic.xrr.fun/blog/20171202/cfg2.png" alt="cfg2.png"><br><img src="http://pic.xrr.fun/blog/20171202/cfgfinish.png" alt="cfgfinish.png"></p><p>注：其中默认的legacy协议在实际运行调试时vscode报如下错误</p><p><img src="http://pic.xrr.fun/blog/20171202/err.png" alt="err.png"></p><p>根据提示将协议修改为inspector，就调试正常了。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>vscode调试的快捷键与号称宇宙第一IDE的visual studio一致</p><p><img src="http://pic.xrr.fun/blog/20171202/debug.png" alt="debug.png"></p>]]></content>
    
    <summary type="html">
    
      Electron project debug
    
    </summary>
    
      <category term="Electron" scheme="https:/blog.xrr.fun/categories/Electron/"/>
    
    
      <category term="Electron" scheme="https:/blog.xrr.fun/tags/Electron/"/>
    
      <category term="VSCode" scheme="https:/blog.xrr.fun/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Lua &amp; C++</title>
    <link href="https:/blog.xrr.fun/2016/05/21/2016-05-21-Lua/"/>
    <id>https:/blog.xrr.fun/2016/05/21/2016-05-21-Lua/</id>
    <published>2016-05-20T16:00:00.000Z</published>
    <updated>2019-12-01T05:18:26.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Lua加入工程"><a href="#一、Lua加入工程" class="headerlink" title="一、Lua加入工程"></a>一、Lua加入工程</h2><ul><li>1)官方下载源码，解压；</li><li>2)使用VS或XCode或其他IDE新建一个“hello worde”的C++工程；</li><li>3)将lua源码加入工程目录中，我的测试目录结构如下，</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── lua</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── README</span><br><span class="line">│   ├── doc</span><br><span class="line">│   └── src</span><br><span class="line">├── main.cpp</span><br><span class="line">└── main.lua</span><br></pre></td></tr></table></figure><p>./lua即为lua源码包解压出来的东西,lua的源码文件在lua/src目录下，将lua/src下的文件除Makefile、lua.c<font color="lightgray">(有一个main函数，这是lua的解释器)</font>、luac.c<font color="lightgray">(lua编译器，编译后的lua脚本可被更高效率的使用)</font>外的其他源码文件都加入到helloworld的工程中，当然，可以在工程中增加一个”luasrc”的文件筛选器，将要加入的lua源码文件都放在该文件筛选器下，便于工程结构的分类管理。<br>此时在main.cpp中，还未加入lua的引用，先编译一次，应该可以编译通过main.cpp及lua的源码文件。</p><ul><li>4)将lua引入C++</li></ul><p>示例main.cpp，再编译一次，应该可以编译成功，示例程序MyLua可用来执行指定的lua脚本的文件。<br><img src="http://pic.xrr.fun/blog/20160521/Snip20160521_2.png" alt="mian.cpp code"></p><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h3 id="全局-虚拟机对多文件全局"><a href="#全局-虚拟机对多文件全局" class="headerlink" title="全局(虚拟机对多文件全局)"></a>全局(虚拟机对多文件全局)</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">12345</span></span><br></pre></td></tr></table></figure><p>就理解为是lua_State的全局变量x，对所有文件都通用。</p><h3 id="本地-虚拟机对单文件局部-（local关键字修饰）"><a href="#本地-虚拟机对单文件局部-（local关键字修饰）" class="headerlink" title="本地(虚拟机对单文件局部)（local关键字修饰）"></a>本地(虚拟机对单文件局部)（local关键字修饰）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> y = <span class="number">54321</span></span><br></pre></td></tr></table></figure><p>就理解为是lua_State在某个文件里的变量y，仅在那个文件中可用。</p><h2 id="三、变量与类型"><a href="#三、变量与类型" class="headerlink" title="三、变量与类型"></a>三、变量与类型</h2><p>Lua是动态类型语言，变量不要类型定义,只需要为变量赋值,给变量赋值了什么类型，变量就是什么类型。</p><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--变量类型</span></span><br><span class="line"><span class="keyword">local</span> boolean bv = <span class="number">0.0</span></span><br><span class="line">bv = x &gt; <span class="number">250</span></span><br><span class="line"><span class="keyword">if</span> bv <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"bv is "</span>, bv, <span class="string">" true"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"bv is "</span>, bv, <span class="string">" false"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())  </span><br><span class="line">bv = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">500</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> bv &gt; <span class="number">250</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"bv is "</span>, bv, <span class="string">" &gt; 250"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"bv is "</span>, bv, <span class="string">" &lt;= 250"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">bv = <span class="string">"bv -&gt; string"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bv is "</span>, bv)</span><br><span class="line"><span class="comment">--bv = bv + 1--非法的操作，无法将不能转化为数值的字符串用于算术计算</span></span><br><span class="line"><span class="comment">--print("bv is ", bv)</span></span><br><span class="line"></span><br><span class="line">bv = <span class="string">"0xEF"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bv is "</span>, bv)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bv))<span class="comment">--string</span></span><br><span class="line"></span><br><span class="line">bv = bv + <span class="number">1</span><span class="comment">--在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bv is "</span>, bv)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bv))<span class="comment">--number</span></span><br><span class="line"></span><br><span class="line">bv = <span class="string">"0xEF"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bv is "</span>, bv)</span><br><span class="line">bv = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%s%s"</span>, bv, <span class="string">"kkkl"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bv is "</span>, bv)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bv))<span class="comment">--string</span></span><br><span class="line"></span><br><span class="line">bv = <span class="string">"0xEF"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bv is "</span>, bv)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bv))<span class="comment">--string</span></span><br><span class="line"></span><br><span class="line">bv = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%d%s"</span>, bv, <span class="string">"kkkl"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bv is "</span>, bv)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bv))<span class="comment">--string</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bv is false false</span><br><span class="line">bv is 231 &lt;= 250</span><br><span class="line">bv is bv -&gt; string</span><br><span class="line">bv is 0xEF</span><br><span class="line">string</span><br><span class="line">bv is 240.0</span><br><span class="line">number</span><br><span class="line">bv is 0xEF</span><br><span class="line">bv is 0xEFkkkl</span><br><span class="line">string</span><br><span class="line">bv is 0xEF</span><br><span class="line">string</span><br><span class="line">bv is 239kkkl</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h2 id="四、控制语句"><a href="#四、控制语句" class="headerlink" title="四、控制语句"></a>四、控制语句</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())  </span><br><span class="line">x = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">500</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"x is"</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">100</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x ∈ [0, 100)"</span>)</span><br><span class="line"><span class="keyword">elseif</span> x &lt; <span class="number">200</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x ∈ [100, 200)"</span>)</span><br><span class="line"><span class="keyword">elseif</span> x == <span class="number">250</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"中彩票了，250"</span>)</span><br><span class="line"><span class="keyword">elseif</span> x &lt; <span class="number">300</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x ∈ [200, 250)U(250, 300)"</span>)</span><br><span class="line"><span class="keyword">elseif</span> x &lt; <span class="number">400</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x ∈ [300, 400)"</span>)</span><br><span class="line"><span class="keyword">elseif</span> x &lt; <span class="number">500</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x ∈ [400, 500)"</span>)</span><br><span class="line"><span class="keyword">elseif</span> x == <span class="number">500</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x == 500"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x is "</span>, x)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"for: i is"</span>, i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1.1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"while: i is "</span>, i)</span><br><span class="line">    i = i + <span class="number">0.1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2.0</span></span><br><span class="line"><span class="keyword">repeat</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"repeat: i is "</span>, i)</span><br><span class="line">    i = i + <span class="number">0.1</span></span><br><span class="line"><span class="keyword">until</span> i &gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="五、表、元表、元方法"><a href="#五、表、元表、元方法" class="headerlink" title="五、表、元表、元方法"></a>五、表、元表、元方法</h2><p>万能的表，表之于LUA的地位应该就相当于类之于C++了吧，之前在理解元表与元方法上还有许多模糊的地方。看视频教材，也没有说的很清楚，遂决定抛弃视频教材，还是看看官方的手册比较靠谱点。</p><p>表、元表、元方法的关系简单理解应该就是，元表中定义了元方法，或者说元方法就是元表的元素，表使用setmetatable关联元表，表就可以调用元表中的元方法了，而元表的本质也还是表，所以任意表都可以做元表，包括表做自己的元表，可见元表应该是一个相对的概念。</p><p>剩下需要重点学习一下的就是元方法了。</p><h3 id="操作符”重载”的元方法"><a href="#操作符”重载”的元方法" class="headerlink" title="操作符”重载”的元方法"></a>操作符”重载”的元方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__add</span><span class="comment">-- function (a, b)--对应 + 操作符, a + b</span></span><br><span class="line"><span class="built_in">__sub</span><span class="comment">-- function (a, b)--对应 - 操作符, a - b</span></span><br><span class="line"><span class="built_in">__mul</span><span class="comment">-- function (a, b)--对应 * 操作符, a * b</span></span><br><span class="line"><span class="built_in">__div</span><span class="comment">-- function (a, b)--对应 / 操作符, a / b</span></span><br><span class="line"><span class="built_in">__unm</span><span class="comment">-- function (a)--对应 -(相反数)操作符, -a</span></span><br><span class="line"><span class="built_in">__mod</span><span class="comment">-- function (a, b)--对应 % 取模操作符, a % b</span></span><br><span class="line"><span class="built_in">__pow</span><span class="comment">-- function (a, b)--对应 ^ 乘幂操作符, a ^ b</span></span><br><span class="line"><span class="built_in">__call</span><span class="comment">-- function (tbl, ...)--对应 () 操作符, tbl(...)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__eq</span><span class="comment">-- function (a, b)--对应 == 操作符, t1 == t2</span></span><br><span class="line"><span class="built_in">__lt</span><span class="comment">-- function (a, b)--对应 &lt; 操作符, t1 &lt; t2</span></span><br><span class="line"><span class="built_in">__le</span><span class="comment">-- function (a, b)--对应 &lt;= 操作符 t1 &lt;= t2</span></span><br></pre></td></tr></table></figure><h3 id="库定义的元方法"><a href="#库定义的元方法" class="headerlink" title="库定义的元方法"></a>库定义的元方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__tostring</span><span class="comment">-- function (tbl) --例如print(tbl) 时，若tbl的元表中定义了__tostring元方法，则自动调用该元方法取自定义的tostring结果(与java中tostring目的相同)</span></span><br><span class="line"><span class="built_in">__metatable</span><span class="comment">-- 给__metatable赋值后，再对主表setmetatable其他元表时会报错，保护主表的元表不被改变，getmetatable会返回__metatable字段值，隐藏元表</span></span><br></pre></td></tr></table></figure><h3 id="table访问-赋值的元方法"><a href="#table访问-赋值的元方法" class="headerlink" title="table访问/赋值的元方法"></a>table访问/赋值的元方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__index</span><span class="comment">-- table变量或function (tbl, key)-- tbl[key]不存在时，将调用__index获取tbl[key]的返回值(mt.__index = mt,结果即为tbl[key]不存在时就取mt[key]做tbl[key]的值)</span></span><br><span class="line"><span class="built_in">__newindex</span><span class="comment">-- table变量或function (tbl, key, val)-- 赋值val给tbl[key]时，若tbl[key]不存在，则会调用__newindex(tbl, key, val)处理替代默认的创建tbl[key]并赋值val的处理</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">Set = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> mt = &#123;&#125;</span><br><span class="line">mt.name = <span class="string">"defaultName"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.new</span><span class="params">(l)</span></span></span><br><span class="line"><span class="keyword">local</span> set = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(set, mt)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(l) <span class="keyword">do</span></span><br><span class="line">set[v] = <span class="literal">true</span><span class="comment">--将集合的元素作为key保存，避免查重检验</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> set</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--求并集</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.union</span><span class="params">(a, b)</span></span></span><br><span class="line"><span class="keyword">local</span> res = Set.new&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">res[k] = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(b) <span class="keyword">do</span></span><br><span class="line">res[k] = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--求交集</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.intersection</span><span class="params">(a, b)</span></span></span><br><span class="line"><span class="keyword">local</span> res = Set.new&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">res[k] = b[k]<span class="comment">--只有a[k]、b[k]都不是nil时，res[k]才不是nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.tostring</span><span class="params">(set)</span></span></span><br><span class="line"><span class="keyword">local</span> l = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(set) <span class="keyword">do</span></span><br><span class="line">l[#l + <span class="number">1</span>] = k</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"&#123;"</span> .. <span class="built_in">table</span>.<span class="built_in">concat</span>(l, <span class="string">", "</span>) .. <span class="string">"&#125;"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set.print</span><span class="params">(s)</span></span></span><br><span class="line"><span class="built_in">print</span>(Set.<span class="built_in">tostring</span>(s))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">s1 = Set.new&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>&#125;</span><br><span class="line">s2 = Set.new&#123;<span class="number">30</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(mt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"s1的元表"</span>, <span class="built_in">getmetatable</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"s2的元表"</span>, <span class="built_in">getmetatable</span>(s2))</span><br><span class="line">Set.<span class="built_in">print</span>(s1)</span><br><span class="line">Set.<span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">--算术类元方法</span></span><br><span class="line">mt.<span class="built_in">__add</span> = Set.union</span><br><span class="line">Set.<span class="built_in">print</span>(s1 + s2)</span><br><span class="line"></span><br><span class="line">mt.<span class="built_in">__mul</span> = Set.intersection</span><br><span class="line">Set.<span class="built_in">print</span>((s1+s2)*s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">--关系类元方法</span></span><br><span class="line"><span class="comment">-- &lt;=</span></span><br><span class="line">mt.<span class="built_in">__le</span> = <span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span></span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> b[k] <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span><span class="comment">--如果a中有，b中没有就返回false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span><span class="comment">--a中有的，b中都有，则认为a &lt;= b</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- &lt;</span></span><br><span class="line">mt.<span class="built_in">__lt</span> = <span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span></span></span><br><span class="line"><span class="keyword">return</span> a &lt;= b <span class="keyword">and</span> <span class="keyword">not</span>(b &lt;= a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ==</span></span><br><span class="line">mt.<span class="built_in">__eq</span> = <span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span></span></span><br><span class="line"><span class="keyword">return</span> a &lt;= b <span class="keyword">and</span> b &lt;= a</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 &lt; s2, s2 &gt; s1)</span><br><span class="line"><span class="built_in">print</span>(s1 &lt;= s2, s2 &gt;= s1)</span><br><span class="line"><span class="built_in">print</span>(s1 == s2)</span><br><span class="line"><span class="built_in">print</span>(s1*s2 &lt;= s1+s2)</span><br><span class="line"><span class="built_in">print</span>(s1*s2 &lt; s1+s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">--库定义的元方法</span></span><br><span class="line">mt.<span class="built_in">__tostring</span> = Set.<span class="built_in">tostring</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, s1+s2, s1*s2)</span><br><span class="line"></span><br><span class="line">mt.<span class="built_in">__metatable</span> = <span class="string">"not your business"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(s1)) <span class="comment">--设置了__metatable后，getmetatable会返回该字段值，隐藏元表</span></span><br><span class="line"><span class="comment">--setmetatable(s1)--设置了__metatable后，setmetatable会报错，保护元表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--table访问的元方法</span></span><br><span class="line">mt.<span class="built_in">__index</span> = mt</span><br><span class="line"><span class="comment">--mt.__index = function (table, key)</span></span><br><span class="line"><span class="comment">--return mt[key]</span></span><br><span class="line"><span class="comment">--end</span></span><br><span class="line"></span><br><span class="line">s1.name = <span class="string">"s1 table"</span></span><br><span class="line">s2.name = <span class="string">"s2 table"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1.name, s2.name)</span><br><span class="line"><span class="built_in">print</span>(s2.name, s1.name)</span><br></pre></td></tr></table></figure><h2 id="六、类"><a href="#六、类" class="headerlink" title="六、类"></a>六、类</h2><p>实际lua中应该没有类的概念，而是使用原型的概念来组织对象间的共享行为。原型也是一种常规对象，当其他对象遇到未知操作时就在这个对象的原型对象中寻找这个未知操作的定义。这样元表的作用就和原型的作用很类似，所以就可以使用元表来实现lua的面向对象编程，原型也就成了元表在lua面向对象编程时的代名词。</p><h3 id="继承和多重继承"><a href="#继承和多重继承" class="headerlink" title="继承和多重继承"></a>继承和多重继承</h3><p>使用<code>setmetatable(Super, Base)</code>和<code>Base.__index = Base</code>来模拟继承的特性。</p><p>使用<code>setmetatable(Super, {__index = function (t, k) return search(k, {Base1, Base2}); end})</code>来模拟多重继承的特性。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--lua面向對象編程的demo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--原型定義</span></span><br><span class="line">Account = &#123;balance = <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:new</span><span class="params">(o)</span></span></span><br><span class="line">o = o <span class="keyword">or</span> &#123;&#125;; <span class="comment">--如果用戶沒有提供table就創建一個</span></span><br><span class="line"><span class="built_in">setmetatable</span>(o, self);</span><br><span class="line">self.<span class="built_in">__index</span> = self;</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:deposit</span><span class="params">(v)</span></span><span class="comment">--存</span></span><br><span class="line">self.balance = self.balance + v;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"deposit"</span>, self.balance);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:withdraw</span><span class="params">(v)</span></span> <span class="comment">--取</span></span><br><span class="line"><span class="keyword">if</span> v &gt; self.balance <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"insufficient funds"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--如果self中原先不存在balance，就会先用Account里的balance-v，然后将结果保存到新建的self.balance元素里</span></span><br><span class="line">self.balance = self.balance - v; </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"withdraw"</span>, self.balance);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--继承</span></span><br><span class="line">SpecialAccount = Account:new();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialAccount:getLimit</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">return</span> self.limit <span class="keyword">or</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialAccount:withdraw</span><span class="params">(v)</span></span></span><br><span class="line"><span class="keyword">if</span> self.balance - v &lt; -self:getLimit() <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"insufficient funds"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">self.balance = self.balance - v;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"withdraw"</span>, self.balance);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a3 = Account:new&#123;balance = <span class="number">0</span>&#125;;</span><br><span class="line">a4 = Account:new();</span><br><span class="line">s1 = SpecialAccount:new&#123;limit = <span class="number">1000.00</span>&#125;;</span><br><span class="line">s2 = SpecialAccount:new();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Account, a1, a2, a3, a4, <span class="built_in">getmetatable</span>(a4), <span class="built_in">getmetatable</span>(s1));</span><br><span class="line"><span class="built_in">print</span>(Account, a1, a2, a3, a4, <span class="built_in">getmetatable</span>(a4), <span class="built_in">getmetatable</span>(s1));</span><br><span class="line"></span><br><span class="line">a3:withdraw(<span class="number">100</span>);</span><br><span class="line">a4:withdraw(<span class="number">100</span>);</span><br><span class="line">s1:withdraw(<span class="number">100</span>);</span><br><span class="line">s2:withdraw(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--多重继承</span></span><br><span class="line">Named = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Named:getName</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">return</span> self.name;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Named:setName</span><span class="params">(n)</span></span></span><br><span class="line">self.name = n;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">(k, plist)</span></span></span><br><span class="line"><span class="keyword">for</span> i, z <span class="keyword">in</span> <span class="built_in">pairs</span>(plist) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">local</span> v = plist[i][k]</span><br><span class="line"><span class="keyword">if</span> v <span class="keyword">then</span> <span class="keyword">return</span> v <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClass</span><span class="params">(a, b)</span></span><span class="comment">--多重继承</span></span><br><span class="line"><span class="keyword">local</span> c = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> parents = &#123;a, b&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setmetatable</span>(c, &#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span> <span class="params">(t, k)</span></span></span><br><span class="line"><span class="keyword">return</span> search(k, parents);</span><br><span class="line"><span class="keyword">end</span>&#125;)</span><br><span class="line"></span><br><span class="line">c.<span class="built_in">__index</span> = c;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c:new</span><span class="params">(o)</span></span></span><br><span class="line">o = o <span class="keyword">or</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(o, self);</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">NamedAccount = createClass(Account, Named);</span><br><span class="line">SpecialNamedAccount = createClass(SpecialAccount, Named);</span><br><span class="line"></span><br><span class="line">acnt1 = NamedAccount:new&#123;name = <span class="string">"Paul"</span>&#125;;</span><br><span class="line">acnt2 = SpecialNamedAccount:new&#123;name = <span class="string">"Ann"</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(acnt1:getName(), acnt1.balance);</span><br><span class="line">acnt2:deposit(<span class="number">200</span>);</span><br><span class="line"><span class="built_in">print</span>(acnt2:getName(), acnt2.balance, acnt2:getLimit());</span><br></pre></td></tr></table></figure><h3 id="私密性"><a href="#私密性" class="headerlink" title="私密性"></a>私密性</h3><p>虽然可以模拟，但对lua的设计目的而言，私密性似乎不非常重要，暂时一瞥掠过。</p><h2 id="七、与C-C-交互"><a href="#七、与C-C-交互" class="headerlink" title="七、与C/C++交互"></a>七、与C/C++交互</h2><p>C程序可以使用lua库来执行lua代码，lua代码也可以调用在lua环境中注册了的用C语言实现的函数。<br>lua的C API包含读写lua全局变量、调用lua函数、运行一段lua代码、注册C函数供lua调用等。<br>lua.h(lua.hpp)声明了Lua提供的基础函数，包括创建Lua环境、调用Lua函数、读写Lua环境中的全局变量以及注册供lua调用的函数等，函数都以lua_开头；<br>luaxlib.h声明了辅助库(auxiliary library，auxlib)提供的函数，都以luaL_开头。辅助库并没有直接访问Lua的内部，而是都以官方基础API来完成所有工作。<br>Lua库中没有定义任何全局变量，而是将所有的状态信息都保存在动态结构lua_State中，所有lua C API的调用都要传入这个动态结构的指针。如果简单的将lua_State看作栈的话，这个栈有可以看作有两套引索序号，一套是从栈底到栈顶依次是1到N递增(绝对引索)，另一套是从栈顶到栈底的引索序号-1到-N的递减(相对引索)。所以可以直接使用引索值-1和1分别访问栈顶和栈底元素。</p><h3 id="环境创建"><a href="#环境创建" class="headerlink" title="环境创建"></a>环境创建</h3><p><code>lua_State</code>是C程序与lua交互编程中最常用的数据结构，要C程序读取Lua中的变量，也是先调用lua的CAPI,将lua中的数据压入lua_State栈中,然后C程序再通过lua的CAPI读取lua_State栈中的元素,如此间接读取到lua的变量值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LUALIB_API lua_State *(luaL_newstate) (<span class="keyword">void</span>);</span><br><span class="line"><span class="function">LUALIB_API <span class="title">void</span> <span class="params">(luaL_openlib)</span> <span class="params">(lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *libname, <span class="keyword">const</span> luaL_Reg *l, <span class="keyword">int</span> nup)</span></span>;</span><br><span class="line"><span class="function">LUALIB_API <span class="title">void</span> <span class="params">(luaL_openlibs)</span> <span class="params">(lua_State *L)</span></span>;<span class="comment">// open all previous libraries</span></span><br></pre></td></tr></table></figure><h3 id="压元素入栈-增"><a href="#压元素入栈-增" class="headerlink" title="压元素入栈(增)"></a>压元素入栈(增)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* push functions (C -&gt; stack) */</span></span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>        <span class="params">(lua_pushnil)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>        <span class="params">(lua_pushnumber)</span> <span class="params">(lua_State *L, lua_Number n)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>        <span class="params">(lua_pushinteger)</span> <span class="params">(lua_State *L, lua_Integer n)</span></span>;</span><br><span class="line">LUA_API <span class="keyword">const</span> <span class="keyword">char</span> *(lua_pushlstring) (lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">size_t</span> len);<span class="comment">// s字符串中间可任意包含'\0'或不以'\0'结尾</span></span><br><span class="line">LUA_API <span class="keyword">const</span> <span class="keyword">char</span> *(lua_pushstring) (lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *s);<span class="comment">// s字符串中间不可包含'\0'且必须以'\'结尾</span></span><br><span class="line">LUA_API <span class="keyword">const</span> <span class="keyword">char</span> *(lua_pushvfstring) (lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list argp);</span><br><span class="line">LUA_API <span class="keyword">const</span> <span class="keyword">char</span> *(lua_pushfstring) (lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...);</span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>  <span class="params">(lua_pushcclosure)</span> <span class="params">(lua_State *L, lua_CFunction fn, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>  <span class="params">(lua_pushboolean)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>  <span class="params">(lua_pushlightuserdata)</span> <span class="params">(lua_State *L, <span class="keyword">void</span> *p)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>   <span class="params">(lua_pushthread)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_pushcfunction(L,f)lua_pushcclosure(L, (f), 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_pushliteral(L, s)lua_pushstring(L, <span class="meta-string">""</span> s)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_pushglobaltable(L)  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS)<span class="comment">// ?</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查栈大小，调用参数很多的函数时可以检查一下栈空间是否还足够</span></span><br><span class="line"><span class="function">LUA_API <span class="title">int</span> <span class="params">(lua_checkstack)</span><span class="params">(lua_State *L, <span class="keyword">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="访问栈元素-查"><a href="#访问栈元素-查" class="headerlink" title="访问栈元素(查)"></a>访问栈元素(查)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* access functions (stack -&gt; C) */</span></span><br><span class="line"><span class="comment">// 判断L中序号为idx的元素能否转为函数所指的类型，及判断栈中的元素的类型</span></span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>             <span class="params">(lua_isnumber)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>             <span class="params">(lua_isstring)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>             <span class="params">(lua_iscfunction)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>             <span class="params">(lua_isinteger)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>             <span class="params">(lua_isuserdata)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>             <span class="params">(lua_type)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line">LUA_API <span class="keyword">const</span> <span class="keyword">char</span>     *(lua_typename) (lua_State *L, <span class="keyword">int</span> tp);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_isfunction(L,n)(lua_type(L, (n)) == LUA_TFUNCTION)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_istable(L,n)(lua_type(L, (n)) == LUA_TTABLE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_islightuserdata(L,n)(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_isnil(L,n)(lua_type(L, (n)) == LUA_TNIL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_isboolean(L,n)(lua_type(L, (n)) == LUA_TBOOLEAN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_isthread(L,n)(lua_type(L, (n)) == LUA_TTHREAD)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_isnone(L,n)(lua_type(L, (n)) == LUA_TNONE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_isnoneornil(L, n)(lua_type(L, (n)) &lt;= 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回L中序号为idx的元素返回为函数指定类型的结果</span></span><br><span class="line"><span class="function">LUA_API <span class="title">lua_Number</span>      <span class="params">(lua_tonumberx)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx, <span class="keyword">int</span> *isnum)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">lua_Integer</span>     <span class="params">(lua_tointegerx)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx, <span class="keyword">int</span> *isnum)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span>             <span class="params">(lua_toboolean)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line">LUA_API <span class="keyword">const</span> <span class="keyword">char</span>     *(lua_tolstring) (lua_State *L, <span class="keyword">int</span> idx, <span class="keyword">size_t</span> *len);</span><br><span class="line"><span class="function">LUA_API <span class="title">size_t</span>          <span class="params">(lua_rawlen)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">lua_CFunction</span>   <span class="params">(lua_tocfunction)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line">LUA_API <span class="keyword">void</span>       *(lua_touserdata) (lua_State *L, <span class="keyword">int</span> idx);</span><br><span class="line">LUA_API lua_State      *(lua_tothread) (lua_State *L, <span class="keyword">int</span> idx);</span><br><span class="line">LUA_API <span class="keyword">const</span> <span class="keyword">void</span>     *(lua_topointer) (lua_State *L, <span class="keyword">int</span> idx);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_tostring(L,i)lua_tolstring(L, (i), NULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_tonumber(L,i)lua_tonumberx(L,(i),NULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_tointeger(L,i)lua_tointegerx(L,(i),NULL)</span></span><br></pre></td></tr></table></figure><h3 id="其他栈元素操作"><a href="#其他栈元素操作" class="headerlink" title="其他栈元素操作"></a>其他栈元素操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LUA_API <span class="title">int</span>   <span class="params">(lua_gettop)</span> <span class="params">(lua_State *L)</span></span>;<span class="comment">// 获取栈顶元素的绝对引索值，即获取栈中元素的个数</span></span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>  <span class="params">(lua_settop)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;<span class="comment">// 设置的位置比栈顶的位置大,则增长的元素值为nil,若比栈顶的位置小,则多余的元素被丢弃.lua_settop(L, 0)会清空栈L。</span></span><br><span class="line"><span class="function">LUA_API <span class="title">void</span>  <span class="params">(lua_pushvalue)</span> <span class="params">(lua_State *L, <span class="keyword">int</span> idx)</span></span>;<span class="comment">// 将idx上的栈元素的副本压入到栈顶</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_pop(L,n)lua_settop(L, -(n)-1)<span class="comment">// 栈弹出(清除)n个元素</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_insert(L,idx)lua_rotate(L, (idx), 1)<span class="comment">// idx上的元素到栈顶的元素的一个循环位移</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_remove(L,idx)(lua_rotate(L, (idx), -1), lua_pop(L, 1)) <span class="comment">// 将栈顶到idx的元素一个循环位移，然后将栈顶元素弹出，相当于删除了原先idx的元素</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_replace(L,idx)(lua_copy(L, -1, (idx)), lua_pop(L, 1))<span class="comment">// 拷贝栈顶的元素到指定idx的元素上，然后将栈顶元素弹出</span></span></span><br></pre></td></tr></table></figure><h3 id="执行lua程序"><a href="#执行lua程序" class="headerlink" title="执行lua程序"></a>执行lua程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译用户输入的每行内容，并将编译后的程序块压入栈中，返回0表示没有错误。</span></span><br><span class="line"><span class="function">LUALIB_API <span class="title">int</span> <span class="params">(luaL_loadbufferx)</span> <span class="params">(lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *buff, <span class="keyword">size_t</span> sz, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *mode)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luaL_loadbuffer(L,s,sz,n)luaL_loadbufferx(L,s,sz,n,NULL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 'load' and 'call' functions (load and run Lua code) */</span></span><br><span class="line"><span class="comment">// 将程序块从栈中弹出，并在保护模式下运行弹出的程序块，返回0表示没有错误，若发生错误，则向栈中也入一条错误信息，用lua_tostring可以获取这条信息，获取之后使用lua_pop将这条错误信息从栈中删除。</span></span><br><span class="line"><span class="function">LUA_API <span class="title">void</span> <span class="params">(lua_callk)</span><span class="params">(lua_State *L, <span class="keyword">int</span> nargs, <span class="keyword">int</span> nresults, lua_KContext ctx, lua_KFunction k)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span> <span class="params">(lua_pcallk)</span><span class="params">(lua_State *L, <span class="keyword">int</span> nargs, <span class="keyword">int</span> nresults, <span class="keyword">int</span> errfunc, lua_KContext ctx, lua_KFunction k)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_call(L,n,r)lua_callk(L, (n), (r), 0, NULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_pcall(L,n,r,f)lua_pcallk(L, (n), (r), (f), 0, NULL)</span></span><br><span class="line"></span><br><span class="line"><span class="function">LUA_API <span class="title">int</span> <span class="params">(lua_load)</span> <span class="params">(lua_State *L, lua_Reader reader, <span class="keyword">void</span> *dt, <span class="keyword">const</span> <span class="keyword">char</span> *chunkname, <span class="keyword">const</span> <span class="keyword">char</span> *mode)</span></span>;</span><br><span class="line"><span class="function">LUA_API <span class="title">int</span> <span class="params">(lua_dump)</span> <span class="params">(lua_State *L, lua_Writer writer, <span class="keyword">void</span> *data, <span class="keyword">int</span> strip)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luaL_dofile(L, fn)(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luaL_dostring(L, s)(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))</span></span><br></pre></td></tr></table></figure><h3 id="lua扩展应用程序"><a href="#lua扩展应用程序" class="headerlink" title="lua扩展应用程序"></a>lua扩展应用程序</h3><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><p>lua中定义一些全局变量，应用程序调用api将lua中的全局变量值压到L栈中，再通过api从L栈中将该值读取出来，即到读取配置参数的目的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">luaStackDump</span><span class="params">(lua_State *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lua_gettop(L); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> iType = lua_type(L, i);</span><br><span class="line"><span class="keyword">switch</span> (iType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> LUA_TSTRING:</span><br><span class="line"><span class="keyword">case</span> LUA_TBOOLEAN:</span><br><span class="line"><span class="keyword">case</span> LUA_TNUMBER:</span><br><span class="line"><span class="keyword">case</span> LUA_TNIL:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; lua_typename(L, iType) &lt;&lt; <span class="string">")"</span> &lt;&lt; lua_tostring(L, i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; lua_typename(L, iType) &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">va_list argp;</span><br><span class="line">va_start(argp, fmt);</span><br><span class="line"><span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, fmt, argp);</span><br><span class="line">va_end(argp);</span><br><span class="line"></span><br><span class="line">luaStackDump(L);</span><br><span class="line">lua_close(L);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"app exit."</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">luaGetGlobalInt</span><span class="params">(lua_State *L, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strVarName, <span class="keyword">int</span> &amp;iRet)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lua_getglobal(L, strVarName.c_str());<span class="comment">// 先读取全局变量值到栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lua_isnumber(L, <span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"'%s' should be a number\n"</span>, strVarName.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iRet = (<span class="keyword">int</span>)lua_tointeger(L, <span class="number">-1</span>);<span class="comment">// 然后再从栈中读取元素的值，间接读取lua全局变量的值</span></span><br><span class="line">lua_pop(L, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strVarName &lt;&lt; <span class="string">" is "</span> &lt;&lt; iRet &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">luaGetTableFiledValue</span><span class="params">(lua_State *L, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strTblName, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strFldName, <span class="built_in">string</span> &amp;strValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lua_getglobal(L, strTblName.c_str());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lua_istable(L, <span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"%s is not a table\n"</span>, strTblName.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lua_pushstring(L, strFldName.c_str());</span><br><span class="line">lua_gettable(L, <span class="number">-2</span>);</span><br><span class="line">strValue = lua_tostring(L, <span class="number">-1</span>);</span><br><span class="line">lua_pop(L, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strTblName &lt;&lt; <span class="string">"["</span> &lt;&lt; strFldName &lt;&lt; <span class="string">"] is "</span> &lt;&lt; strValue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">luaGetTableFiledValue</span><span class="params">(lua_State *L, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strTblName, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vctstrFldsName, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vctstrValues)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lua_getglobal(L, strTblName.c_str());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lua_istable(L, <span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"%s is not a table\n"</span>, strTblName.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vctstrFldsName.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">lua_pushstring(L, vctstrFldsName[i].c_str());</span><br><span class="line">lua_gettable(L, <span class="number">-2</span>);</span><br><span class="line">vctstrValues.push_back(lua_tostring(L, <span class="number">-1</span>));</span><br><span class="line">lua_pop(L, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lua_pop(L, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-C-程序调用lua脚本"><a href="#C-C-程序调用lua脚本" class="headerlink" title="C/C++程序调用lua脚本"></a>C/C++程序调用lua脚本</h4><p>lua中定义好函数后，C代码中使用api获取lua的函数对象压入到L栈中，然后再向L栈中按顺序压入函数参数，然后调用lua_pcall指定函数调用的参数个数和返回值个数,lua_pcall调用后，将会将之前压入的L栈的函数对象与参数弹出，然后将函数执行的返回值或函数执行失败的错误信息压入L栈中。C代码通过API从栈中将返回值或错误信息读取出来，然后需要C代码调用调用lua_pop里显示清理栈，恢复L栈至函数调用前状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">luaCallLuaFunc</span><span class="params">(lua_State *L, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strFuncName, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vctstrParams, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vctstrRets)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lua_getglobal(L, strFuncName.c_str());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vctstrParams.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">lua_pushstring(L, vctstrParams[i].c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lua_pcall(L, vctstrParams.size(), vctstrRets.size(), <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"error running function getSize: %s\n"</span>, lua_tostring(L, <span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = vctstrRets.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">vctstrRets[i] = lua_tostring(L, <span class="number">-1</span>);</span><br><span class="line">lua_pop(L, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"call "</span> &lt;&lt; strFuncName &lt;&lt; <span class="string">"("</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vctstrParams.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; vctstrParams[<span class="number">0</span>] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vctstrParams.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">", \""</span> &lt;&lt; vctstrParams[i] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">") returns ("</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vctstrRets.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; vctstrRets[<span class="number">0</span>] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vctstrRets.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">", \""</span> &lt;&lt; vctstrRets[i] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">luaCallLuaFunc2</span><span class="params">(lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *cfunc, <span class="keyword">const</span> <span class="keyword">char</span> *cfrm, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">va_list vl;</span><br><span class="line"><span class="keyword">int</span> narg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> nres = <span class="number">0</span>;</span><br><span class="line">va_start(vl, cfrm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压入函数</span></span><br><span class="line">lua_getglobal(L, cfunc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压入参数</span></span><br><span class="line"><span class="keyword">for</span> (narg = <span class="number">0</span>; *cfrm != <span class="string">'\0'</span>; narg++)</span><br><span class="line">&#123;</span><br><span class="line">luaL_checkstack(L, <span class="number">1</span>, <span class="string">"too many arguments"</span>);</span><br><span class="line"><span class="keyword">switch</span> (*cfrm++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">&#123;</span><br><span class="line">lua_pushnumber(L, va_arg(vl, <span class="keyword">const</span> <span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">&#123;</span><br><span class="line">lua_pushinteger(L, va_arg(vl, <span class="keyword">const</span> <span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">&#123;</span><br><span class="line">lua_pushstring(L, va_arg(vl, <span class="keyword">const</span> <span class="keyword">char</span> *));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> endargs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"invalid option (%c)"</span>, *(cfrm - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">endargs:</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">int</span> irescnt = nres = <span class="built_in">strlen</span>(cfrm);<span class="comment">// 期望的结果数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lua_pcall(L, narg, nres, <span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"error calling %s:%s"</span>, cfunc, lua_tostring(L, <span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取返回值</span></span><br><span class="line">nres = -nres;<span class="comment">// 第一个返回结果的栈位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (*cfrm)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*cfrm++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!lua_isnumber(L, nres))</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"wrong result type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*va_arg(vl, <span class="keyword">double</span> *) = lua_tonumber(L, nres);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!lua_isinteger(L, nres))</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"wrong result type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*va_arg(vl, <span class="keyword">int</span> *) = (<span class="keyword">int</span>)lua_tointeger(L, nres);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!lua_isstring(L, nres))</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"wrong result type"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*va_arg(vl, <span class="keyword">const</span> <span class="keyword">char</span> **) = lua_tostring(L, nres);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line">error(L, <span class="string">"invalid option (%c)"</span>, *(cfrm<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nres++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lua_pop(L, irescnt);</span><br><span class="line">va_end(vl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lua脚本调用C-C"><a href="#lua脚本调用C-C" class="headerlink" title="lua脚本调用C/C++"></a>lua脚本调用C/C++</h3><h4 id="lua脚本调用C-C-函数"><a href="#lua脚本调用C-C-函数" class="headerlink" title="lua脚本调用C/C++函数"></a>lua脚本调用C/C++函数</h4><p>所有注册到lua中的函数都具有相同的类型，或者可以说只有一种特定类型的函数才能注册到lua中，<br>该函数类型lua.h中定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*lua_CFunction)</span> <span class="params">(lua_State *L)</span></span>;<span class="comment">// Type for C functions registered with Lua</span></span><br></pre></td></tr></table></figure><p>通过使用<code>lua_pushcfunction</code>和<code>lua_setglobal</code>两个方法就可以将一个函数注册到lua中，然后就可以在lua中通过使用lua_setglobal设置的globalname来调用到这个C函数了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registCFuncToLua</span><span class="params">(lua_State *L, lua_CFunction pfunc, <span class="keyword">const</span> <span class="built_in">string</span> &amp;strGlobalName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lua_pushcfunction(L, pfunc);</span><br><span class="line">lua_setglobal(L, strGlobalName.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">l_sin</span><span class="params">(lua_State *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> dbl = luaL_checknumber(L, <span class="number">1</span>);</span><br><span class="line">lua_pushnumber(L, <span class="built_in">sin</span>(dbl));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">registCFuncToLua(L, l_sin, <span class="string">"c_sin"</span>);</span><br><span class="line"><span class="comment">// lua代码中就可以使用c_sin来调用到l_sin函数了</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用C-C-定义LUA模块"><a href="#使用C-C-定义LUA模块" class="headerlink" title="使用C/C++定义LUA模块"></a>使用C/C++定义LUA模块</h4><p>以下LUA调用C/C++的方法应该可以理解成<code>require &quot;libname&quot;</code>语句的实现原理吧，简单理解就是在将C/C++代码封装成动态库时，若需要生成的动态库可以被lua require后使用，就需要在该动态库中定义一个接口(一个数组+一个函数)；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* lauxlib.h中luaL_Reg和luaL_register的定义</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct luaL_Reg &#123;</span></span><br><span class="line"><span class="comment">const char *name;</span></span><br><span class="line"><span class="comment">lua_CFunction func;</span></span><br><span class="line"><span class="comment">&#125; luaL_Reg;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#define luaL_register(L,n,l)(luaL_openlib(L,(n),(l),0))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块中函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">l_f1</span><span class="params">(lua_State *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">l_f2</span><span class="params">(lua_State *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定被lua脚本require时需要被导出的函数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> luaL_Reg mylib[] = &#123;</span><br><span class="line">&#123;<span class="string">"f1"</span>, l_f1&#125;,</span><br><span class="line">&#123;<span class="string">"f2"</span>, l_f2&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;<span class="comment">// 固定结尾</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">luaopen_mylib</span><span class="params">(lua_State *L)</span><span class="comment">// lua中`require "mylib"`时该函数会被注册与调用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">luaL_register(L, <span class="string">"mylib"</span>, mylib);<span class="comment">// 根据"mylib"名称创建(或复用)一个table,并用数组mylib中的元素填充这个table,并将这个table压入到L栈中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 使lua脚本知道栈中已压入table</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lua文件中require "mylib"后，就可以通过f1、f2调用到l_f1、l_f2了，可见这也是一种动态库函数不需要被声明导出就可以被外部调用的方法，而且参数个数与类型可变，非常灵活，应该可以实现类似javascript的"函数重载"。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Lua加入工程&quot;&gt;&lt;a href=&quot;#一、Lua加入工程&quot; class=&quot;headerlink&quot; title=&quot;一、Lua加入工程&quot;&gt;&lt;/a&gt;一、Lua加入工程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1)官方下载源码，解压；&lt;/li&gt;
&lt;li&gt;2)使用VS或XCode或其
      
    
    </summary>
    
      <category term="Lua" scheme="https:/blog.xrr.fun/categories/Lua/"/>
    
    
      <category term="Lua" scheme="https:/blog.xrr.fun/tags/Lua/"/>
    
      <category term="C++" scheme="https:/blog.xrr.fun/tags/C/"/>
    
  </entry>
  
</feed>
