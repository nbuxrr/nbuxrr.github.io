{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/apple-touch-icon.png","path":"img/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/atom.xml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575131785223},{"_id":"source/CNAME","hash":"795877453b6c0bfb1387d40a310d0e3e7c712913","modified":1575131785201},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1575131785222},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1575131785222},{"_id":"themes/maupassant/README.md","hash":"3d4d9545a7aba6415e5b4b17dbd853724e6c98bc","modified":1575131785222},{"_id":"themes/maupassant/_config.yml","hash":"81105fd6872f76cab19abb54b34e7eaf4a1ba643","modified":1575131785223},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1575131785229},{"_id":"source/_posts/2016-05-21-Lua.md","hash":"abe82914a7e15b58ec612258c5d7aa2c5ff8de3e","modified":1575131785202},{"_id":"source/_posts/2017-12-02-electron-vscodedebugcfg.md","hash":"a4ec7418ab8b23185578d6dc6d6fc1ef1f56f104","modified":1575131785202},{"_id":"source/_posts/2018-01-01-hello-world.md","hash":"522563c13c656bb7d07d08df7a16141d22c2a5a1","modified":1575131785203},{"_id":"source/_posts/2018-03-17-PPTP.md","hash":"e6c29c24a3dd4a699c0ee53efdd422d44c7fbaf3","modified":1575131785203},{"_id":"source/_posts/2018-03-18-IPSec.md","hash":"7fd657a29f50ff6582583699b2649ef63ebc3f04","modified":1575131785203},{"_id":"source/_posts/2018-03-19-frp.md","hash":"5c55ff4b88db42a3ff894df29cb973a4d9fa4b41","modified":1575131785204},{"_id":"source/_posts/2018-07-26-IPSec2.md","hash":"07056a77d20959915711ad12e018919ba550994f","modified":1575131785204},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1575131785223},{"_id":"themes/maupassant/languages/en.yml","hash":"9dc51349f64e882433957c00dc757366229e0269","modified":1575131785223},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1575131785223},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1575131785223},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1575131785223},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1575131785223},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ffce5df2448a80dbad71da115c84b81f42a42778","modified":1575131785224},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1575131785224},{"_id":"themes/maupassant/layout/archive.pug","hash":"665582bb4092fcd81bfaf4d08fc1689abee1e6c4","modified":1575131785227},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1575131785228},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1575131785228},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1575131785228},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1575131785228},{"_id":"themes/maupassant/layout/post.pug","hash":"d0325a145fadc81083e71264c651306b11e4962d","modified":1575131785229},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1575131785229},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1575131785229},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"b1156c2d3541fb186a11aea4b17aea3de96a0747","modified":1575131785224},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"0f49096ac1df45009b65cb7335f130e2363d3916","modified":1575131785224},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1575131785224},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"ed2638cea80861e0f7cf0422e98dbca0cf544c3d","modified":1575131785225},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1575131785225},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"9925dc2f58d600d3890111d694c76315f6b8b95b","modified":1575131785225},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"1202fc6685c368de8a8f080827fbbc285d86c274","modified":1575131785225},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1575131785225},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1575131785225},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1575131785225},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1575131785226},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1575131785226},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1575131785226},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1575131785226},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1575131785227},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1575131785227},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1575131785227},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1575131785230},{"_id":"themes/maupassant/source/css/donate.css","hash":"d0079ba8202d925a93ab1cb44f2087b81f476755","modified":1575131785230},{"_id":"themes/maupassant/source/css/style.scss","hash":"547bed40ce40b44bf527b02924df5be26472ac73","modified":1575131785230},{"_id":"themes/maupassant/source/donate/index.html","hash":"88cc1b52c1d8ce455d7e819c356a50554e6d90bc","modified":1575131785231},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1575131785231},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1575131785232},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1575131785232},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1575131785232},{"_id":"themes/maupassant/source/img/apple-touch-icon.png","hash":"269d65c719606629c107908c44eba1d1c2c48721","modified":1575131785233},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1575131785233},{"_id":"themes/maupassant/source/img/favicon.ico","hash":"e12ebd5bafd9484fe11366f8c424a78fe90f7f30","modified":1575131785233},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1575131785233},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1575131785234},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1575131785233},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1575131785234},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1575131785235},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1575131785235},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1575131785235},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1575131785237},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1575131785237},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1575131785237},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1575131785237},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1575131785236},{"_id":"public/atom.xml","hash":"fc450b5a6e7637a9b5a6ef7cff130a97e3aad323","modified":1575171884773},{"_id":"public/2019/12/01/2017-12-02-electron-vscodedebugcfg/index.html","hash":"217d51b55a2a41e990ecd1dadba7ff350a8da79d","modified":1575171884782},{"_id":"public/2018/07/26/2018-07-26-IPSec2/index.html","hash":"b943dcee57fd645b9a4322fea539b9c4d420a25a","modified":1575171884783},{"_id":"public/2018/03/19/2018-03-19-frp/index.html","hash":"dad80dbe3c3c064e21cf4cfabe59a9b84fa7d4f5","modified":1575171884783},{"_id":"public/2018/03/18/2018-03-18-IPSec/index.html","hash":"c519209e1deadc1157486d7effc203fe44a4ad32","modified":1575171884783},{"_id":"public/2018/03/17/2018-03-17-PPTP/index.html","hash":"f7378ed09f923888a455294ef6b601c50df3c3fd","modified":1575171884783},{"_id":"public/2018/01/01/2018-01-01-hello-world/index.html","hash":"1f0e243fd27c7899e756a819b6bdc519617c952d","modified":1575171884783},{"_id":"public/archives/index.html","hash":"818381e319e4103dfc273fd34e0ea47a22255924","modified":1575171884783},{"_id":"public/archives/2018/index.html","hash":"576047600435e29eae459d1e454b1f8bc6994d3b","modified":1575171884783},{"_id":"public/archives/2018/01/index.html","hash":"adaa1cbdfa1d7f1e33a88acd297c809ec512f3a3","modified":1575171884783},{"_id":"public/archives/2018/03/index.html","hash":"6058eb1b0b1602c1ad2ed30273d90361f64dce00","modified":1575171884783},{"_id":"public/archives/2018/07/index.html","hash":"901622b0608b5f63830efc0b8d2601500390d71b","modified":1575171884783},{"_id":"public/archives/2019/index.html","hash":"98515e8f45b9f70ade991f39f6d8880fac954830","modified":1575171884783},{"_id":"public/archives/2019/12/index.html","hash":"98515e8f45b9f70ade991f39f6d8880fac954830","modified":1575171884783},{"_id":"public/categories/技术/index.html","hash":"5e1b9cd219452ae04bf0c186746e9781bbfa1092","modified":1575171884783},{"_id":"public/index.html","hash":"a78defafbe03517cb3b2e9c2d9308eec15a8a445","modified":1575171884784},{"_id":"public/tags/hexo/index.html","hash":"4ff1bfa58b7ba7d1f68931bb1192159b69a67d71","modified":1575171884784},{"_id":"public/tags/electron/index.html","hash":"f0273bab856bc42533041c7d381d6d606592a37a","modified":1575171884784},{"_id":"public/tags/vscode/index.html","hash":"3329e9ec7ff4fd36dbbef6daf4f9c1b2009a1291","modified":1575171884784},{"_id":"public/tags/vpn/index.html","hash":"13ca4ff5790279e13111eca11a5f0968346a21cc","modified":1575171884784},{"_id":"public/tags/内网穿透/index.html","hash":"daaa944371dbf2cbeb4f214f22a3f6d58f3f72f5","modified":1575171884784},{"_id":"public/tags/lua/index.html","hash":"e690e854e72bffe1d6c78ded382bd3aa366b0b79","modified":1575171884784},{"_id":"public/tags/c/index.html","hash":"8b048be1773ef8b98a7bc88a62a707915b5e116d","modified":1575171884784},{"_id":"public/2019/12/01/2016-05-21-Lua/index.html","hash":"eecd2da38449740f0aa4a4e90d07cce1191c6229","modified":1575171884784},{"_id":"public/CNAME","hash":"795877453b6c0bfb1387d40a310d0e3e7c712913","modified":1575171884787},{"_id":"public/css/style.scss","hash":"547bed40ce40b44bf527b02924df5be26472ac73","modified":1575171884787},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1575171884787},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1575171884787},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1575171884787},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1575171884787},{"_id":"public/img/apple-touch-icon.png","hash":"269d65c719606629c107908c44eba1d1c2c48721","modified":1575171884787},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1575171884787},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1575171884787},{"_id":"public/img/favicon.ico","hash":"e12ebd5bafd9484fe11366f8c424a78fe90f7f30","modified":1575171884787},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1575171884787},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1575171884787},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1575171884788},{"_id":"public/css/donate.css","hash":"d0079ba8202d925a93ab1cb44f2087b81f476755","modified":1575171884794},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1575171884794},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1575171884794},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1575171884795},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1575171884795},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1575171884795},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1575171884795},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1575171884795},{"_id":"public/donate/index.html","hash":"aa442d1a7b7c175107dba4f47b07bc8a11cf70c0","modified":1575171884795},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1575171884800},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1575171884813},{"_id":"public/css/style.css","hash":"bec4cd8e3a4c354f5841226683a2acfac0c000f3","modified":1575172047016}],"Category":[{"name":"技术","_id":"ck3mgo4ia0002zmy2p1vlbog9"},{"name":"Lua","_id":"ck3mhcx3s00008qy2yhqe7vom"},{"name":"Hexo","_id":"ck3mhft4900068qy243bk7bq4"},{"name":"VPN","_id":"ck3mhgiyc00088qy23xcdm6ew"},{"name":"Electron","_id":"ck3mhhis3000d8qy2tb8gmyw5"},{"name":"NAT","_id":"ck3mipc8l000s8qy2tphqy062"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2017-12-31T16:00:00.000Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/2018-01-01-hello-world.md","raw":"---\ntitle: Hello World\ncategories: Hexo\ntags: [hexo, blog]\ndate: 2018-01-01\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"2018-01-01-hello-world","published":1,"updated":"2019-12-01T04:19:35.216Z","_id":"ck3mgo4i20000zmy2stsryv8c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"使用VSCode调试Electron项目","keywords":"Electron","description":"Electron project debug","date":"2017-12-01T16:00:00.000Z","_content":"\n使用新版本的vscode调试各种语言的项目（包扩electron项目）的配置貌似便捷了很多，\b有点小惊喜。以electron的quick-start项目为例，小记一下，O(∩_∩)O哈哈~\n\n## vscode版本\n\n![vscodeversion.png](http://pic.xrr.fun/blog/20171202/vscodeversion.png)\n\n## 项目代码\n\n```shell\n# 克隆示例项目的仓库\ngit clone https://github.com/electron/electron-quick-start\n\n# 进入这个仓库\ncd electron-quick-start\n\n# 安装依赖\nnpm install\n\n# 运行\nnpm start\n```\n\n\b![project.png](http://pic.xrr.fun/blog/20171202/project.png)\n\n## vscode调试配置\n\n刚开始项目没有\b调试配置，需要先选择调试器环境，例如C++代码就可以选C++(GDB/LLDB)，这里\belectron运行的环境是nodejs，则选Node.js。\n\n![cfg1.png](http://pic.xrr.fun/blog/20171202/cfg1.png)\n\n选择好调试环境后，在工程目录下会自动生成.vscode/launch.json文件。接着就是点“添加配置”按钮，使用提示下拉框\b方便的选择调试工程的类型，自动填充相应配置。\n\n![cfg2.png](http://pic.xrr.fun/blog/20171202/cfg2.png)\n\b![cfgfinish.png](http://pic.xrr.fun/blog/20171202/cfgfinish.png)\n\n注：其中默认的legacy协议在实际运行调试时vscode报如下错误\n\n![err.png](http://pic.xrr.fun/blog/20171202/err.png)\n\n根据提示将协议修改为inspector，就调试正常了。\n\n## 调试\n\nvscode调试的快捷键\b与\b号称宇宙第一IDE的visual studio一致\n\n![debug.png](http://pic.xrr.fun/blog/20171202/debug.png)\n","source":"_posts/2017-12-02-electron-vscodedebugcfg.md","raw":"---\ntitle: 使用VSCode调试Electron项目\ncategories: Electron\ntags: [Electron, VSCode]\nkeywords: Electron\ndescription: Electron project debug\ndate: 2017-12-02\n---\n\n使用新版本的vscode调试各种语言的项目（包扩electron项目）的配置貌似便捷了很多，\b有点小惊喜。以electron的quick-start项目为例，小记一下，O(∩_∩)O哈哈~\n\n## vscode版本\n\n![vscodeversion.png](http://pic.xrr.fun/blog/20171202/vscodeversion.png)\n\n## 项目代码\n\n```shell\n# 克隆示例项目的仓库\ngit clone https://github.com/electron/electron-quick-start\n\n# 进入这个仓库\ncd electron-quick-start\n\n# 安装依赖\nnpm install\n\n# 运行\nnpm start\n```\n\n\b![project.png](http://pic.xrr.fun/blog/20171202/project.png)\n\n## vscode调试配置\n\n刚开始项目没有\b调试配置，需要先选择调试器环境，例如C++代码就可以选C++(GDB/LLDB)，这里\belectron运行的环境是nodejs，则选Node.js。\n\n![cfg1.png](http://pic.xrr.fun/blog/20171202/cfg1.png)\n\n选择好调试环境后，在工程目录下会自动生成.vscode/launch.json文件。接着就是点“添加配置”按钮，使用提示下拉框\b方便的选择调试工程的类型，自动填充相应配置。\n\n![cfg2.png](http://pic.xrr.fun/blog/20171202/cfg2.png)\n\b![cfgfinish.png](http://pic.xrr.fun/blog/20171202/cfgfinish.png)\n\n注：其中默认的legacy协议在实际运行调试时vscode报如下错误\n\n![err.png](http://pic.xrr.fun/blog/20171202/err.png)\n\n根据提示将协议修改为inspector，就调试正常了。\n\n## 调试\n\nvscode调试的快捷键\b与\b号称宇宙第一IDE的visual studio一致\n\n![debug.png](http://pic.xrr.fun/blog/20171202/debug.png)\n","slug":"2017-12-02-electron-vscodedebugcfg","published":1,"updated":"2019-12-01T04:18:59.561Z","_id":"ck3mgo4i70001zmy2am8j7bqk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用新版本的vscode调试各种语言的项目（包扩electron项目）的配置貌似便捷了很多，\b有点小惊喜。以electron的quick-start项目为例，小记一下，O(∩_∩)O哈哈~</p>\n<h2 id=\"vscode版本\"><a href=\"#vscode版本\" class=\"headerlink\" title=\"vscode版本\"></a>vscode版本</h2><p><img src=\"http://pic.xrr.fun/blog/20171202/vscodeversion.png\" alt=\"vscodeversion.png\"></p>\n<h2 id=\"项目代码\"><a href=\"#项目代码\" class=\"headerlink\" title=\"项目代码\"></a>项目代码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 克隆示例项目的仓库</span></span><br><span class=\"line\">git clone https://github.com/electron/electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入这个仓库</span></span><br><span class=\"line\">cd electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行</span></span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>\b<img src=\"http://pic.xrr.fun/blog/20171202/project.png\" alt=\"project.png\"></p>\n<h2 id=\"vscode调试配置\"><a href=\"#vscode调试配置\" class=\"headerlink\" title=\"vscode调试配置\"></a>vscode调试配置</h2><p>刚开始项目没有\b调试配置，需要先选择调试器环境，例如C++代码就可以选C++(GDB/LLDB)，这里\belectron运行的环境是nodejs，则选Node.js。</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/cfg1.png\" alt=\"cfg1.png\"></p>\n<p>选择好调试环境后，在工程目录下会自动生成.vscode/launch.json文件。接着就是点“添加配置”按钮，使用提示下拉框\b方便的选择调试工程的类型，自动填充相应配置。</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/cfg2.png\" alt=\"cfg2.png\"><br>\b<img src=\"http://pic.xrr.fun/blog/20171202/cfgfinish.png\" alt=\"cfgfinish.png\"></p>\n<p>注：其中默认的legacy协议在实际运行调试时vscode报如下错误</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/err.png\" alt=\"err.png\"></p>\n<p>根据提示将协议修改为inspector，就调试正常了。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>vscode调试的快捷键\b与\b号称宇宙第一IDE的visual studio一致</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/debug.png\" alt=\"debug.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用新版本的vscode调试各种语言的项目（包扩electron项目）的配置貌似便捷了很多，\b有点小惊喜。以electron的quick-start项目为例，小记一下，O(∩_∩)O哈哈~</p>\n<h2 id=\"vscode版本\"><a href=\"#vscode版本\" class=\"headerlink\" title=\"vscode版本\"></a>vscode版本</h2><p><img src=\"http://pic.xrr.fun/blog/20171202/vscodeversion.png\" alt=\"vscodeversion.png\"></p>\n<h2 id=\"项目代码\"><a href=\"#项目代码\" class=\"headerlink\" title=\"项目代码\"></a>项目代码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 克隆示例项目的仓库</span></span><br><span class=\"line\">git clone https://github.com/electron/electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入这个仓库</span></span><br><span class=\"line\">cd electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行</span></span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>\b<img src=\"http://pic.xrr.fun/blog/20171202/project.png\" alt=\"project.png\"></p>\n<h2 id=\"vscode调试配置\"><a href=\"#vscode调试配置\" class=\"headerlink\" title=\"vscode调试配置\"></a>vscode调试配置</h2><p>刚开始项目没有\b调试配置，需要先选择调试器环境，例如C++代码就可以选C++(GDB/LLDB)，这里\belectron运行的环境是nodejs，则选Node.js。</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/cfg1.png\" alt=\"cfg1.png\"></p>\n<p>选择好调试环境后，在工程目录下会自动生成.vscode/launch.json文件。接着就是点“添加配置”按钮，使用提示下拉框\b方便的选择调试工程的类型，自动填充相应配置。</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/cfg2.png\" alt=\"cfg2.png\"><br>\b<img src=\"http://pic.xrr.fun/blog/20171202/cfgfinish.png\" alt=\"cfgfinish.png\"></p>\n<p>注：其中默认的legacy协议在实际运行调试时vscode报如下错误</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/err.png\" alt=\"err.png\"></p>\n<p>根据提示将协议修改为inspector，就调试正常了。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>vscode调试的快捷键\b与\b号称宇宙第一IDE的visual studio一致</p>\n<p><img src=\"http://pic.xrr.fun/blog/20171202/debug.png\" alt=\"debug.png\"></p>\n"},{"title":"搭建VPN服务之IPSec","date":"2018-03-17T16:00:00.000Z","_content":"\n在vultr的VPS上搭建好PPTP的VPN服务后，迫不及待的准备试用一下时，发现：\n\n- PPTP在安卓手机上可以使用手机自带的VPN客户端整常登录浏览google\n- Mac系统(10.13.3)居然抛弃PPTP的自带客户端，只有自带IPSec的客户端了\n- Mac上好用的PPTP客户端，Shimo试用版可登录VPN服务整常使用，但试用期过后要收费59刀，破解版安装运行提示文件损坏无法使用\n- 怕其他第三方的PPTP客户端不靠谱\n\n基于以上原因想干脆在VPS上再搭建一个IPSec的VPN算了,搜了一下strongswan貌似可用，那么就愉快的决定开始实验咯\n\n### 零、主机环境\n\n```bash\nvultr VPS + Ubuntu 16.04\n```\n\n### 一、安装IPSec服务程序\n\n```bash\napt-get update\napt-get install strongswan strongswan-plugin-xauth-generic\n```\n\n### 二、配置IPSec服务程序\n\n配置IPSec共享密钥、用户名和密码\n\n```bash\nvi /etc/ipsec.secrets\n```\n\n在配置文件中增加\n\n```bash\n: PSK \"test\"\nusername : XAUTH \"password\"\n```\n\nPSK字段的值是预共享密钥，将test换成你想要的共享密钥值，username和password换成你想要的用户名和密码，在IPSec的客户端登录时会需要使用这三个信息\n\n配置IPSec内部路由\n\n```bash\nvi /etc/ipsec.conf\n```\n\n配置后该配置文件配置项内容如下\n\n```bash\nconfig setup\n    cachecrls=yes\n    uniqueids=yes\n\nconn ios\n    keyexchange=ikev1\n    authby=xauthpsk\n    xauth=server\n    left=%defaultroute\n    leftsubnet=0.0.0.0/0\n    leftfirewall=yes\n    right=%any\n    rightsubnet=0.0.0.0/0\n    rightsourceip=192.168.100.1/24\n    rightdns=8.8.8.8\n    auto=add\n```\n\n注：由于本文的VPS上已搭建了PPTP（内部网络192.168.0.1/24），为防止NAT转发时可能的冲突，本文的strongswan的内部网络选用了192.168.100.1/24\n\n重启strongswan服务\n\n```bash\nipsec restart\n```\n\n### 三、配置IP转发\n\n原理同PPTP中的内核IP转发规则的配置相同\n打开内核IP转发功能\n\n```bash\nsysctl net.ipv4.ip_forward=1\n```\n\n配置转发规则（假设已将安装了iptables，没有的话参考PPTP的安装）\n\n```bash\niptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE\n```\n\n这行命令应该是指将 `192.168.100.xxx(192.168.100.1/24)`的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准\n\n### 四、开机启动生效NAT转发规则和启动IPSec\n\n设置开机启动\n打开/etc/rc.local文件，在exit 0语句前加入：\n\n```bash\nsudo iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE\nsudo service ipsec restart\n```\n","source":"_posts/2018-03-18-IPSec.md","raw":"---\ntitle: 搭建VPN服务之IPSec\ncategories: VPN\ntags: [VPN, IPSec]\ndate: 2018-03-18\n---\n\n在vultr的VPS上搭建好PPTP的VPN服务后，迫不及待的准备试用一下时，发现：\n\n- PPTP在安卓手机上可以使用手机自带的VPN客户端整常登录浏览google\n- Mac系统(10.13.3)居然抛弃PPTP的自带客户端，只有自带IPSec的客户端了\n- Mac上好用的PPTP客户端，Shimo试用版可登录VPN服务整常使用，但试用期过后要收费59刀，破解版安装运行提示文件损坏无法使用\n- 怕其他第三方的PPTP客户端不靠谱\n\n基于以上原因想干脆在VPS上再搭建一个IPSec的VPN算了,搜了一下strongswan貌似可用，那么就愉快的决定开始实验咯\n\n### 零、主机环境\n\n```bash\nvultr VPS + Ubuntu 16.04\n```\n\n### 一、安装IPSec服务程序\n\n```bash\napt-get update\napt-get install strongswan strongswan-plugin-xauth-generic\n```\n\n### 二、配置IPSec服务程序\n\n配置IPSec共享密钥、用户名和密码\n\n```bash\nvi /etc/ipsec.secrets\n```\n\n在配置文件中增加\n\n```bash\n: PSK \"test\"\nusername : XAUTH \"password\"\n```\n\nPSK字段的值是预共享密钥，将test换成你想要的共享密钥值，username和password换成你想要的用户名和密码，在IPSec的客户端登录时会需要使用这三个信息\n\n配置IPSec内部路由\n\n```bash\nvi /etc/ipsec.conf\n```\n\n配置后该配置文件配置项内容如下\n\n```bash\nconfig setup\n    cachecrls=yes\n    uniqueids=yes\n\nconn ios\n    keyexchange=ikev1\n    authby=xauthpsk\n    xauth=server\n    left=%defaultroute\n    leftsubnet=0.0.0.0/0\n    leftfirewall=yes\n    right=%any\n    rightsubnet=0.0.0.0/0\n    rightsourceip=192.168.100.1/24\n    rightdns=8.8.8.8\n    auto=add\n```\n\n注：由于本文的VPS上已搭建了PPTP（内部网络192.168.0.1/24），为防止NAT转发时可能的冲突，本文的strongswan的内部网络选用了192.168.100.1/24\n\n重启strongswan服务\n\n```bash\nipsec restart\n```\n\n### 三、配置IP转发\n\n原理同PPTP中的内核IP转发规则的配置相同\n打开内核IP转发功能\n\n```bash\nsysctl net.ipv4.ip_forward=1\n```\n\n配置转发规则（假设已将安装了iptables，没有的话参考PPTP的安装）\n\n```bash\niptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE\n```\n\n这行命令应该是指将 `192.168.100.xxx(192.168.100.1/24)`的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准\n\n### 四、开机启动生效NAT转发规则和启动IPSec\n\n设置开机启动\n打开/etc/rc.local文件，在exit 0语句前加入：\n\n```bash\nsudo iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE\nsudo service ipsec restart\n```\n","slug":"2018-03-18-IPSec","published":1,"updated":"2019-12-01T04:36:05.732Z","_id":"ck3mgo4ic0004zmy242p70xwb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在vultr的VPS上搭建好PPTP的VPN服务后，迫不及待的准备试用一下时，发现：</p>\n<ul>\n<li>PPTP在安卓手机上可以使用手机自带的VPN客户端整常登录浏览google</li>\n<li>Mac系统(10.13.3)居然抛弃PPTP的自带客户端，只有自带IPSec的客户端了</li>\n<li>Mac上好用的PPTP客户端，Shimo试用版可登录VPN服务整常使用，但试用期过后要收费59刀，破解版安装运行提示文件损坏无法使用</li>\n<li>怕其他第三方的PPTP客户端不靠谱</li>\n</ul>\n<p>基于以上原因想干脆在VPS上再搭建一个IPSec的VPN算了,搜了一下strongswan貌似可用，那么就愉快的决定开始实验咯</p>\n<h3 id=\"零、主机环境\"><a href=\"#零、主机环境\" class=\"headerlink\" title=\"零、主机环境\"></a>零、主机环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vultr VPS + Ubuntu 16.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"一、安装IPSec服务程序\"><a href=\"#一、安装IPSec服务程序\" class=\"headerlink\" title=\"一、安装IPSec服务程序\"></a>一、安装IPSec服务程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install strongswan strongswan-plugin-xauth-generic</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、配置IPSec服务程序\"><a href=\"#二、配置IPSec服务程序\" class=\"headerlink\" title=\"二、配置IPSec服务程序\"></a>二、配置IPSec服务程序</h3><p>配置IPSec共享密钥、用户名和密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ipsec.secrets</span><br></pre></td></tr></table></figure>\n<p>在配置文件中增加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: PSK <span class=\"string\">\"test\"</span></span><br><span class=\"line\">username : XAUTH <span class=\"string\">\"password\"</span></span><br></pre></td></tr></table></figure>\n<p>PSK字段的值是预共享密钥，将test换成你想要的共享密钥值，username和password换成你想要的用户名和密码，在IPSec的客户端登录时会需要使用这三个信息</p>\n<p>配置IPSec内部路由</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ipsec.conf</span><br></pre></td></tr></table></figure>\n<p>配置后该配置文件配置项内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config setup</span><br><span class=\"line\">    cachecrls=yes</span><br><span class=\"line\">    uniqueids=yes</span><br><span class=\"line\"></span><br><span class=\"line\">conn ios</span><br><span class=\"line\">    keyexchange=ikev1</span><br><span class=\"line\">    authby=xauthpsk</span><br><span class=\"line\">    xauth=server</span><br><span class=\"line\">    left=%defaultroute</span><br><span class=\"line\">    leftsubnet=0.0.0.0/0</span><br><span class=\"line\">    leftfirewall=yes</span><br><span class=\"line\">    right=%any</span><br><span class=\"line\">    rightsubnet=0.0.0.0/0</span><br><span class=\"line\">    rightsourceip=192.168.100.1/24</span><br><span class=\"line\">    rightdns=8.8.8.8</span><br><span class=\"line\">    auto=add</span><br></pre></td></tr></table></figure>\n<p>注：由于本文的VPS上已搭建了PPTP（内部网络192.168.0.1/24），为防止NAT转发时可能的冲突，本文的strongswan的内部网络选用了192.168.100.1/24</p>\n<p>重启strongswan服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipsec restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、配置IP转发\"><a href=\"#三、配置IP转发\" class=\"headerlink\" title=\"三、配置IP转发\"></a>三、配置IP转发</h3><p>原理同PPTP中的内核IP转发规则的配置相同<br>打开内核IP转发功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>\n<p>配置转发规则（假设已将安装了iptables，没有的话参考PPTP的安装）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<p>这行命令应该是指将 <code>192.168.100.xxx(192.168.100.1/24)</code>的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准</p>\n<h3 id=\"四、开机启动生效NAT转发规则和启动IPSec\"><a href=\"#四、开机启动生效NAT转发规则和启动IPSec\" class=\"headerlink\" title=\"四、开机启动生效NAT转发规则和启动IPSec\"></a>四、开机启动生效NAT转发规则和启动IPSec</h3><p>设置开机启动<br>打开/etc/rc.local文件，在exit 0语句前加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE</span><br><span class=\"line\">sudo service ipsec restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在vultr的VPS上搭建好PPTP的VPN服务后，迫不及待的准备试用一下时，发现：</p>\n<ul>\n<li>PPTP在安卓手机上可以使用手机自带的VPN客户端整常登录浏览google</li>\n<li>Mac系统(10.13.3)居然抛弃PPTP的自带客户端，只有自带IPSec的客户端了</li>\n<li>Mac上好用的PPTP客户端，Shimo试用版可登录VPN服务整常使用，但试用期过后要收费59刀，破解版安装运行提示文件损坏无法使用</li>\n<li>怕其他第三方的PPTP客户端不靠谱</li>\n</ul>\n<p>基于以上原因想干脆在VPS上再搭建一个IPSec的VPN算了,搜了一下strongswan貌似可用，那么就愉快的决定开始实验咯</p>\n<h3 id=\"零、主机环境\"><a href=\"#零、主机环境\" class=\"headerlink\" title=\"零、主机环境\"></a>零、主机环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vultr VPS + Ubuntu 16.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"一、安装IPSec服务程序\"><a href=\"#一、安装IPSec服务程序\" class=\"headerlink\" title=\"一、安装IPSec服务程序\"></a>一、安装IPSec服务程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install strongswan strongswan-plugin-xauth-generic</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、配置IPSec服务程序\"><a href=\"#二、配置IPSec服务程序\" class=\"headerlink\" title=\"二、配置IPSec服务程序\"></a>二、配置IPSec服务程序</h3><p>配置IPSec共享密钥、用户名和密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ipsec.secrets</span><br></pre></td></tr></table></figure>\n<p>在配置文件中增加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: PSK <span class=\"string\">\"test\"</span></span><br><span class=\"line\">username : XAUTH <span class=\"string\">\"password\"</span></span><br></pre></td></tr></table></figure>\n<p>PSK字段的值是预共享密钥，将test换成你想要的共享密钥值，username和password换成你想要的用户名和密码，在IPSec的客户端登录时会需要使用这三个信息</p>\n<p>配置IPSec内部路由</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ipsec.conf</span><br></pre></td></tr></table></figure>\n<p>配置后该配置文件配置项内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config setup</span><br><span class=\"line\">    cachecrls=yes</span><br><span class=\"line\">    uniqueids=yes</span><br><span class=\"line\"></span><br><span class=\"line\">conn ios</span><br><span class=\"line\">    keyexchange=ikev1</span><br><span class=\"line\">    authby=xauthpsk</span><br><span class=\"line\">    xauth=server</span><br><span class=\"line\">    left=%defaultroute</span><br><span class=\"line\">    leftsubnet=0.0.0.0/0</span><br><span class=\"line\">    leftfirewall=yes</span><br><span class=\"line\">    right=%any</span><br><span class=\"line\">    rightsubnet=0.0.0.0/0</span><br><span class=\"line\">    rightsourceip=192.168.100.1/24</span><br><span class=\"line\">    rightdns=8.8.8.8</span><br><span class=\"line\">    auto=add</span><br></pre></td></tr></table></figure>\n<p>注：由于本文的VPS上已搭建了PPTP（内部网络192.168.0.1/24），为防止NAT转发时可能的冲突，本文的strongswan的内部网络选用了192.168.100.1/24</p>\n<p>重启strongswan服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipsec restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、配置IP转发\"><a href=\"#三、配置IP转发\" class=\"headerlink\" title=\"三、配置IP转发\"></a>三、配置IP转发</h3><p>原理同PPTP中的内核IP转发规则的配置相同<br>打开内核IP转发功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>\n<p>配置转发规则（假设已将安装了iptables，没有的话参考PPTP的安装）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<p>这行命令应该是指将 <code>192.168.100.xxx(192.168.100.1/24)</code>的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准</p>\n<h3 id=\"四、开机启动生效NAT转发规则和启动IPSec\"><a href=\"#四、开机启动生效NAT转发规则和启动IPSec\" class=\"headerlink\" title=\"四、开机启动生效NAT转发规则和启动IPSec\"></a>四、开机启动生效NAT转发规则和启动IPSec</h3><p>设置开机启动<br>打开/etc/rc.local文件，在exit 0语句前加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 192.168.100.1/24 -o ens3 -j MASQUERADE</span><br><span class=\"line\">sudo service ipsec restart</span><br></pre></td></tr></table></figure>\n"},{"title":"搭建VPN服务之PPTP","date":"2018-03-16T16:00:00.000Z","_content":"\n### 2017-03-17 天气晴\n\n今天在vultr上租了一个VPS，玩玩挺有意思，租VPS的一个重要用途就是搭建一个VPN服务，后续还将搭建一个frps做家中NAS的内网穿透。今天先整理下VPS上搭建VPN的步骤。\n\n### 零、主机环境\n\n```bash\nvultr VPS + Ubuntu 16.04\n```\n\n### 一、安装VPN服务程序pptpd\n\n更新软件仓库列表，下载安装VPN服务程序pptpd\n\n```bash\napt-get update\nsudo apt-get install pptpd\n```\n\n### 二、配置pptpd程序\n\n打开配置文件，配置VPN内部网络，将pptpd.conf中如下两行配置打开注释并保存修改\n\n```bash\nsudo vi /etc/pptpd.conf\nlocalip 192.168.0.1\nremoteip 192.168.0.234-238,192.168.0.245\n```\n\n配置VPN登录的用户名密码列表，配置文件配置格式如下，username和password分别换成自定义的用户名密码，*表示允许该用户名密码在任何ip上登录VPN\n\n```bash\nsudo vi /etc/ppp/chap-secrets\nusername  pptpd  \"password\"  *\n```\n\n配置DNS,取消注释`ms-dns`，修改DNS，例如，8.8.8.8和8.8.4.4\n\n```bash\nsudo vi /etc/ppp/pptpd-options\n```\n\n```bash\n# If pppd is acting as a server for Microsoft Windows clients, this\n# option allows pppd to supply one or two DNS (Domain Name Server)\n# addresses to the clients.  The first instance of this option\n# specifies the primary DNS address; the second instance (if given)\n# specifies the secondary DNS address.\n# Attention! This information may not be taken into account by a Windows\n# client. See KB311218 in Microsoft's knowledge base for more information.\nms-dns 8.8.8.8\nms-dns 8.8.4.4\n```\n\n### 三、开启内核IP转发\n\n```bash\nsudo vi /etc/sysctl.conf\n```\n\n取消注释`net.ipv4.ip_forward=1`，修改配置保存，执行如下语句是配置修改生效\n\n```bash\nsudo sysctl -p\n```\n\n注：如下命令也可以开启内核的IP转发功能，但是据说重启后将恢复关闭内核IP转发，具体原理未细究\n\n```bash\necho 1 > /proc/sys/net/ipv4/ip_forward\n```\n\n### 四、配置IP转发规则\n\n安装iptables，配置NAT转发规则\n\n```bash\nsudo apt-get install iptables\nsudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE\n```\n\n第二行命令应该是指将 `192.168.0.xxx(192.168.0.0/24)`的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准\n\n重启服务，应用配置\n\n```bash\nsudo service pptpd restart\n```\n\n### 五、开机启动生效NAT转发规则和启动pptpd\n\n设置开机启动\n打开/etc/rc.local文件，在exit 0语句前加入：\n\n```bash\nsudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE\nsudo service pptpd start\n```\n","source":"_posts/2018-03-17-PPTP.md","raw":"---\ntitle: 搭建VPN服务之PPTP\ncategories: VPN\ntags: [VPN, PPTP]\ndate: 2018-03-17\n---\n\n### 2017-03-17 天气晴\n\n今天在vultr上租了一个VPS，玩玩挺有意思，租VPS的一个重要用途就是搭建一个VPN服务，后续还将搭建一个frps做家中NAS的内网穿透。今天先整理下VPS上搭建VPN的步骤。\n\n### 零、主机环境\n\n```bash\nvultr VPS + Ubuntu 16.04\n```\n\n### 一、安装VPN服务程序pptpd\n\n更新软件仓库列表，下载安装VPN服务程序pptpd\n\n```bash\napt-get update\nsudo apt-get install pptpd\n```\n\n### 二、配置pptpd程序\n\n打开配置文件，配置VPN内部网络，将pptpd.conf中如下两行配置打开注释并保存修改\n\n```bash\nsudo vi /etc/pptpd.conf\nlocalip 192.168.0.1\nremoteip 192.168.0.234-238,192.168.0.245\n```\n\n配置VPN登录的用户名密码列表，配置文件配置格式如下，username和password分别换成自定义的用户名密码，*表示允许该用户名密码在任何ip上登录VPN\n\n```bash\nsudo vi /etc/ppp/chap-secrets\nusername  pptpd  \"password\"  *\n```\n\n配置DNS,取消注释`ms-dns`，修改DNS，例如，8.8.8.8和8.8.4.4\n\n```bash\nsudo vi /etc/ppp/pptpd-options\n```\n\n```bash\n# If pppd is acting as a server for Microsoft Windows clients, this\n# option allows pppd to supply one or two DNS (Domain Name Server)\n# addresses to the clients.  The first instance of this option\n# specifies the primary DNS address; the second instance (if given)\n# specifies the secondary DNS address.\n# Attention! This information may not be taken into account by a Windows\n# client. See KB311218 in Microsoft's knowledge base for more information.\nms-dns 8.8.8.8\nms-dns 8.8.4.4\n```\n\n### 三、开启内核IP转发\n\n```bash\nsudo vi /etc/sysctl.conf\n```\n\n取消注释`net.ipv4.ip_forward=1`，修改配置保存，执行如下语句是配置修改生效\n\n```bash\nsudo sysctl -p\n```\n\n注：如下命令也可以开启内核的IP转发功能，但是据说重启后将恢复关闭内核IP转发，具体原理未细究\n\n```bash\necho 1 > /proc/sys/net/ipv4/ip_forward\n```\n\n### 四、配置IP转发规则\n\n安装iptables，配置NAT转发规则\n\n```bash\nsudo apt-get install iptables\nsudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE\n```\n\n第二行命令应该是指将 `192.168.0.xxx(192.168.0.0/24)`的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准\n\n重启服务，应用配置\n\n```bash\nsudo service pptpd restart\n```\n\n### 五、开机启动生效NAT转发规则和启动pptpd\n\n设置开机启动\n打开/etc/rc.local文件，在exit 0语句前加入：\n\n```bash\nsudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE\nsudo service pptpd start\n```\n","slug":"2018-03-17-PPTP","published":1,"updated":"2019-12-01T04:34:14.535Z","_id":"ck3mgo4ie0005zmy27maccliq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"2017-03-17-天气晴\"><a href=\"#2017-03-17-天气晴\" class=\"headerlink\" title=\"2017-03-17 天气晴\"></a>2017-03-17 天气晴</h3><p>今天在vultr上租了一个VPS，玩玩挺有意思，租VPS的一个重要用途就是搭建一个VPN服务，后续还将搭建一个frps做家中NAS的内网穿透。今天先整理下VPS上搭建VPN的步骤。</p>\n<h3 id=\"零、主机环境\"><a href=\"#零、主机环境\" class=\"headerlink\" title=\"零、主机环境\"></a>零、主机环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vultr VPS + Ubuntu 16.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"一、安装VPN服务程序pptpd\"><a href=\"#一、安装VPN服务程序pptpd\" class=\"headerlink\" title=\"一、安装VPN服务程序pptpd\"></a>一、安装VPN服务程序pptpd</h3><p>更新软件仓库列表，下载安装VPN服务程序pptpd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、配置pptpd程序\"><a href=\"#二、配置pptpd程序\" class=\"headerlink\" title=\"二、配置pptpd程序\"></a>二、配置pptpd程序</h3><p>打开配置文件，配置VPN内部网络，将pptpd.conf中如下两行配置打开注释并保存修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/pptpd.conf</span><br><span class=\"line\">localip 192.168.0.1</span><br><span class=\"line\">remoteip 192.168.0.234-238,192.168.0.245</span><br></pre></td></tr></table></figure>\n<p>配置VPN登录的用户名密码列表，配置文件配置格式如下，username和password分别换成自定义的用户名密码，*表示允许该用户名密码在任何ip上登录VPN</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/ppp/chap-secrets</span><br><span class=\"line\">username  pptpd  <span class=\"string\">\"password\"</span>  *</span><br></pre></td></tr></table></figure>\n<p>配置DNS,取消注释<code>ms-dns</code>，修改DNS，例如，8.8.8.8和8.8.4.4</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If pppd is acting as a server for Microsoft Windows clients, this</span></span><br><span class=\"line\"><span class=\"comment\"># option allows pppd to supply one or two DNS (Domain Name Server)</span></span><br><span class=\"line\"><span class=\"comment\"># addresses to the clients.  The first instance of this option</span></span><br><span class=\"line\"><span class=\"comment\"># specifies the primary DNS address; the second instance (if given)</span></span><br><span class=\"line\"><span class=\"comment\"># specifies the secondary DNS address.</span></span><br><span class=\"line\"><span class=\"comment\"># Attention! This information may not be taken into account by a Windows</span></span><br><span class=\"line\"><span class=\"comment\"># client. See KB311218 in Microsoft's knowledge base for more information.</span></span><br><span class=\"line\">ms-dns 8.8.8.8</span><br><span class=\"line\">ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、开启内核IP转发\"><a href=\"#三、开启内核IP转发\" class=\"headerlink\" title=\"三、开启内核IP转发\"></a>三、开启内核IP转发</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n<p>取消注释<code>net.ipv4.ip_forward=1</code>，修改配置保存，执行如下语句是配置修改生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -p</span><br></pre></td></tr></table></figure>\n<p>注：如下命令也可以开启内核的IP转发功能，但是据说重启后将恢复关闭内核IP转发，具体原理未细究</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、配置IP转发规则\"><a href=\"#四、配置IP转发规则\" class=\"headerlink\" title=\"四、配置IP转发规则\"></a>四、配置IP转发规则</h3><p>安装iptables，配置NAT转发规则</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install iptables</span><br><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<p>第二行命令应该是指将 <code>192.168.0.xxx(192.168.0.0/24)</code>的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准</p>\n<p>重启服务，应用配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service pptpd restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、开机启动生效NAT转发规则和启动pptpd\"><a href=\"#五、开机启动生效NAT转发规则和启动pptpd\" class=\"headerlink\" title=\"五、开机启动生效NAT转发规则和启动pptpd\"></a>五、开机启动生效NAT转发规则和启动pptpd</h3><p>设置开机启动<br>打开/etc/rc.local文件，在exit 0语句前加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE</span><br><span class=\"line\">sudo service pptpd start</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"2017-03-17-天气晴\"><a href=\"#2017-03-17-天气晴\" class=\"headerlink\" title=\"2017-03-17 天气晴\"></a>2017-03-17 天气晴</h3><p>今天在vultr上租了一个VPS，玩玩挺有意思，租VPS的一个重要用途就是搭建一个VPN服务，后续还将搭建一个frps做家中NAS的内网穿透。今天先整理下VPS上搭建VPN的步骤。</p>\n<h3 id=\"零、主机环境\"><a href=\"#零、主机环境\" class=\"headerlink\" title=\"零、主机环境\"></a>零、主机环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vultr VPS + Ubuntu 16.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"一、安装VPN服务程序pptpd\"><a href=\"#一、安装VPN服务程序pptpd\" class=\"headerlink\" title=\"一、安装VPN服务程序pptpd\"></a>一、安装VPN服务程序pptpd</h3><p>更新软件仓库列表，下载安装VPN服务程序pptpd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、配置pptpd程序\"><a href=\"#二、配置pptpd程序\" class=\"headerlink\" title=\"二、配置pptpd程序\"></a>二、配置pptpd程序</h3><p>打开配置文件，配置VPN内部网络，将pptpd.conf中如下两行配置打开注释并保存修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/pptpd.conf</span><br><span class=\"line\">localip 192.168.0.1</span><br><span class=\"line\">remoteip 192.168.0.234-238,192.168.0.245</span><br></pre></td></tr></table></figure>\n<p>配置VPN登录的用户名密码列表，配置文件配置格式如下，username和password分别换成自定义的用户名密码，*表示允许该用户名密码在任何ip上登录VPN</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/ppp/chap-secrets</span><br><span class=\"line\">username  pptpd  <span class=\"string\">\"password\"</span>  *</span><br></pre></td></tr></table></figure>\n<p>配置DNS,取消注释<code>ms-dns</code>，修改DNS，例如，8.8.8.8和8.8.4.4</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If pppd is acting as a server for Microsoft Windows clients, this</span></span><br><span class=\"line\"><span class=\"comment\"># option allows pppd to supply one or two DNS (Domain Name Server)</span></span><br><span class=\"line\"><span class=\"comment\"># addresses to the clients.  The first instance of this option</span></span><br><span class=\"line\"><span class=\"comment\"># specifies the primary DNS address; the second instance (if given)</span></span><br><span class=\"line\"><span class=\"comment\"># specifies the secondary DNS address.</span></span><br><span class=\"line\"><span class=\"comment\"># Attention! This information may not be taken into account by a Windows</span></span><br><span class=\"line\"><span class=\"comment\"># client. See KB311218 in Microsoft's knowledge base for more information.</span></span><br><span class=\"line\">ms-dns 8.8.8.8</span><br><span class=\"line\">ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、开启内核IP转发\"><a href=\"#三、开启内核IP转发\" class=\"headerlink\" title=\"三、开启内核IP转发\"></a>三、开启内核IP转发</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n<p>取消注释<code>net.ipv4.ip_forward=1</code>，修改配置保存，执行如下语句是配置修改生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -p</span><br></pre></td></tr></table></figure>\n<p>注：如下命令也可以开启内核的IP转发功能，但是据说重启后将恢复关闭内核IP转发，具体原理未细究</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、配置IP转发规则\"><a href=\"#四、配置IP转发规则\" class=\"headerlink\" title=\"四、配置IP转发规则\"></a>四、配置IP转发规则</h3><p>安装iptables，配置NAT转发规则</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install iptables</span><br><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<p>第二行命令应该是指将 <code>192.168.0.xxx(192.168.0.0/24)</code>的子网的所有ip包都做该的nat的转发规则转发到ens3的网卡上，ens3是本文中服务器上连接外网的网卡设备名，本文使用的VPS服务器的外网网卡为ens3，其他环境中该名字以ifconfig中外网网卡的名称为准</p>\n<p>重启服务，应用配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service pptpd restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、开机启动生效NAT转发规则和启动pptpd\"><a href=\"#五、开机启动生效NAT转发规则和启动pptpd\" class=\"headerlink\" title=\"五、开机启动生效NAT转发规则和启动pptpd\"></a>五、开机启动生效NAT转发规则和启动pptpd</h3><p>设置开机启动<br>打开/etc/rc.local文件，在exit 0语句前加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADE</span><br><span class=\"line\">sudo service pptpd start</span><br></pre></td></tr></table></figure>\n"},{"title":"内网穿透之frps与frpc","date":"2018-03-18T16:00:00.000Z","_content":"\n### 在VPS上配置frps.ini\n\n```ini\n[common]\nbind_port = 7777\n#vhost_http_port网站访问端口\nvhost_http_port = 80\n#vhost_https_port = 443\n#dashboard_port状态以及代理统计信息展示,网址:7500可查看详情\ndashboard_port = 6443\nlog_file = ./frps.log\nlog_level = info\nlog_max_days = 3\n#privilege_mode 特权模式,开通后web,ssh等使用都可以直接在客户端设置\nprivilege_mode = true\n#特权连接密码\nprivilege_token = 12345qwert\n#max_pool_count最大链接池,每个代理预先与后端服务器建立起指定数量的最大链接数\nmax_pool_count = 50\n```\n\n### 在NAS上配置frpc.ini\n\n```ini\n[common]\nserver_addr = 换成frps所在的服务器IP\n#要与frps.ini中的bind_port一样\nserver_port = 7777\nlog_file = ./frpc.log\nlog_level = info\nlog_max_days = 3\n#特权连接密码,要与frps.ini的一样\nprivilege_token = 12345qwert\n\n[ssh]\nprivilege_mode = true\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6022\nuse_gzip = true\nuse_encryption = true\npool_count = 2\n#访问方式 ssh -oPort=6022 test@x.x.x.x\n#访问方式 ssh -p 6022 test@x.x.x.x\n\n[nas]\nprivilege_mode = true\ntype = http\nlocal_ip = 127.0.0.1\nlocal_port = 5000\n#custom_domains域名\ncustom_domains = nas.xrr.fun\npool_count = 10\n#访问方式 http://nas.xrr.fun\n\n[ws]\nprivilege_mode = true\ntype = http\nlocal_ip = 127.0.0.1\nlocal_port = 8888\ncustom_domains = ws.xrr.fun\npool_count = 10\n#访问方式 http://ws.xrr.fun\n```\n","source":"_posts/2018-03-19-frp.md","raw":"---\ntitle: 内网穿透之frps与frpc\ncategories: NAT\ntags: [内网穿透, frp]\ndate: 2018-03-19\n---\n\n### 在VPS上配置frps.ini\n\n```ini\n[common]\nbind_port = 7777\n#vhost_http_port网站访问端口\nvhost_http_port = 80\n#vhost_https_port = 443\n#dashboard_port状态以及代理统计信息展示,网址:7500可查看详情\ndashboard_port = 6443\nlog_file = ./frps.log\nlog_level = info\nlog_max_days = 3\n#privilege_mode 特权模式,开通后web,ssh等使用都可以直接在客户端设置\nprivilege_mode = true\n#特权连接密码\nprivilege_token = 12345qwert\n#max_pool_count最大链接池,每个代理预先与后端服务器建立起指定数量的最大链接数\nmax_pool_count = 50\n```\n\n### 在NAS上配置frpc.ini\n\n```ini\n[common]\nserver_addr = 换成frps所在的服务器IP\n#要与frps.ini中的bind_port一样\nserver_port = 7777\nlog_file = ./frpc.log\nlog_level = info\nlog_max_days = 3\n#特权连接密码,要与frps.ini的一样\nprivilege_token = 12345qwert\n\n[ssh]\nprivilege_mode = true\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6022\nuse_gzip = true\nuse_encryption = true\npool_count = 2\n#访问方式 ssh -oPort=6022 test@x.x.x.x\n#访问方式 ssh -p 6022 test@x.x.x.x\n\n[nas]\nprivilege_mode = true\ntype = http\nlocal_ip = 127.0.0.1\nlocal_port = 5000\n#custom_domains域名\ncustom_domains = nas.xrr.fun\npool_count = 10\n#访问方式 http://nas.xrr.fun\n\n[ws]\nprivilege_mode = true\ntype = http\nlocal_ip = 127.0.0.1\nlocal_port = 8888\ncustom_domains = ws.xrr.fun\npool_count = 10\n#访问方式 http://ws.xrr.fun\n```\n","slug":"2018-03-19-frp","published":1,"updated":"2019-12-01T04:41:40.035Z","_id":"ck3mgo4if0006zmy2kzog0oqn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"在VPS上配置frps-ini\"><a href=\"#在VPS上配置frps-ini\" class=\"headerlink\" title=\"在VPS上配置frps.ini\"></a>在VPS上配置frps.ini</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">bind_port</span> = <span class=\"number\">7777</span></span><br><span class=\"line\"><span class=\"comment\">#vhost_http_port网站访问端口</span></span><br><span class=\"line\"><span class=\"attr\">vhost_http_port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\">#vhost_https_port = 443</span></span><br><span class=\"line\"><span class=\"comment\">#dashboard_port状态以及代理统计信息展示,网址:7500可查看详情</span></span><br><span class=\"line\"><span class=\"attr\">dashboard_port</span> = <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = ./frps.log</span><br><span class=\"line\"><span class=\"attr\">log_level</span> = info</span><br><span class=\"line\"><span class=\"attr\">log_max_days</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#privilege_mode 特权模式,开通后web,ssh等使用都可以直接在客户端设置</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#特权连接密码</span></span><br><span class=\"line\"><span class=\"attr\">privilege_token</span> = <span class=\"number\">12345</span>qwert</span><br><span class=\"line\"><span class=\"comment\">#max_pool_count最大链接池,每个代理预先与后端服务器建立起指定数量的最大链接数</span></span><br><span class=\"line\"><span class=\"attr\">max_pool_count</span> = <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在NAS上配置frpc-ini\"><a href=\"#在NAS上配置frpc-ini\" class=\"headerlink\" title=\"在NAS上配置frpc.ini\"></a>在NAS上配置frpc.ini</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = 换成frps所在的服务器IP</span><br><span class=\"line\"><span class=\"comment\">#要与frps.ini中的bind_port一样</span></span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7777</span></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = ./frpc.log</span><br><span class=\"line\"><span class=\"attr\">log_level</span> = info</span><br><span class=\"line\"><span class=\"attr\">log_max_days</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#特权连接密码,要与frps.ini的一样</span></span><br><span class=\"line\"><span class=\"attr\">privilege_token</span> = <span class=\"number\">12345</span>qwert</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ssh]</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">6022</span></span><br><span class=\"line\"><span class=\"attr\">use_gzip</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">use_encryption</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 ssh -oPort=6022 test@x.x.x.x</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 ssh -p 6022 test@x.x.x.x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[nas]</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\">#custom_domains域名</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = nas.xrr.fun</span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 http://nas.xrr.fun</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ws]</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">8888</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = ws.xrr.fun</span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 http://ws.xrr.fun</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"在VPS上配置frps-ini\"><a href=\"#在VPS上配置frps-ini\" class=\"headerlink\" title=\"在VPS上配置frps.ini\"></a>在VPS上配置frps.ini</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">bind_port</span> = <span class=\"number\">7777</span></span><br><span class=\"line\"><span class=\"comment\">#vhost_http_port网站访问端口</span></span><br><span class=\"line\"><span class=\"attr\">vhost_http_port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\">#vhost_https_port = 443</span></span><br><span class=\"line\"><span class=\"comment\">#dashboard_port状态以及代理统计信息展示,网址:7500可查看详情</span></span><br><span class=\"line\"><span class=\"attr\">dashboard_port</span> = <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = ./frps.log</span><br><span class=\"line\"><span class=\"attr\">log_level</span> = info</span><br><span class=\"line\"><span class=\"attr\">log_max_days</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#privilege_mode 特权模式,开通后web,ssh等使用都可以直接在客户端设置</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#特权连接密码</span></span><br><span class=\"line\"><span class=\"attr\">privilege_token</span> = <span class=\"number\">12345</span>qwert</span><br><span class=\"line\"><span class=\"comment\">#max_pool_count最大链接池,每个代理预先与后端服务器建立起指定数量的最大链接数</span></span><br><span class=\"line\"><span class=\"attr\">max_pool_count</span> = <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在NAS上配置frpc-ini\"><a href=\"#在NAS上配置frpc-ini\" class=\"headerlink\" title=\"在NAS上配置frpc.ini\"></a>在NAS上配置frpc.ini</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = 换成frps所在的服务器IP</span><br><span class=\"line\"><span class=\"comment\">#要与frps.ini中的bind_port一样</span></span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7777</span></span><br><span class=\"line\"><span class=\"attr\">log_file</span> = ./frpc.log</span><br><span class=\"line\"><span class=\"attr\">log_level</span> = info</span><br><span class=\"line\"><span class=\"attr\">log_max_days</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#特权连接密码,要与frps.ini的一样</span></span><br><span class=\"line\"><span class=\"attr\">privilege_token</span> = <span class=\"number\">12345</span>qwert</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ssh]</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">6022</span></span><br><span class=\"line\"><span class=\"attr\">use_gzip</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">use_encryption</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 ssh -oPort=6022 test@x.x.x.x</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 ssh -p 6022 test@x.x.x.x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[nas]</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\">#custom_domains域名</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = nas.xrr.fun</span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 http://nas.xrr.fun</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ws]</span></span><br><span class=\"line\"><span class=\"attr\">privilege_mode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">8888</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = ws.xrr.fun</span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">#访问方式 http://ws.xrr.fun</span></span><br></pre></td></tr></table></figure>\n"},{"title":"搭建VPN服务之IPSec(二)","date":"2018-07-25T16:00:00.000Z","_content":"\n之前使用命令行逐步安装IPSec的折腾，后来发现在github上一键安装IPSec服务的安装脚本，有三种安装选项，见项目中安装说明即可。\n\n项目地址：`https://github.com/hwdsl2/setup-ipsec-vpn`\n","source":"_posts/2018-07-26-IPSec2.md","raw":"---\ntitle: 搭建VPN服务之IPSec(二)\ncategories: 技术\ntags: vpn\ndate: 2018-07-26\n---\n\n之前使用命令行逐步安装IPSec的折腾，后来发现在github上一键安装IPSec服务的安装脚本，有三种安装选项，见项目中安装说明即可。\n\n项目地址：`https://github.com/hwdsl2/setup-ipsec-vpn`\n","slug":"2018-07-26-IPSec2","published":1,"updated":"2019-12-01T04:43:40.889Z","_id":"ck3mgo4ih000azmy2iwwaiow8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前使用命令行逐步安装IPSec的折腾，后来发现在github上一键安装IPSec服务的安装脚本，有三种安装选项，见项目中安装说明即可。</p>\n<p>项目地址：<code>https://github.com/hwdsl2/setup-ipsec-vpn</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前使用命令行逐步安装IPSec的折腾，后来发现在github上一键安装IPSec服务的安装脚本，有三种安装选项，见项目中安装说明即可。</p>\n<p>项目地址：<code>https://github.com/hwdsl2/setup-ipsec-vpn</code></p>\n"},{"title":"Lua & C++","keywords":"Lua","description":null,"date":"2016-05-20T16:00:00.000Z","_content":"\n## 一、Lua加入工程\n\n- 1)官方下载源码，解压；\n- 2)使用VS或XCode或其他IDE新建一个“hello worde”的C++工程；\n- 3)将lua源码加入工程目录中，我的测试目录结构如下，\n\n```bash\n├── lua\n│   ├── Makefile\n│   ├── README\n│   ├── doc\n│   └── src\n├── main.cpp\n└── main.lua\n```\n\n./lua即为lua源码包解压出来的东西,lua的源码文件在lua/src目录下，将lua/src下的文件除Makefile、lua.c<font color=\"lightgray\">(有一个main函数，这是lua的解释器)</font>、luac.c<font color=\"lightgray\">(lua编译器，编译后的lua脚本可被更高效率的使用)</font>外的其他源码文件都加入到helloworld的工程中，当然，可以在工程中增加一个\"luasrc\"的文件筛选器，将要加入的lua源码文件都放在该文件筛选器下，便于工程结构的分类管理。\n此时在main.cpp中，还未加入lua的引用，先编译一次，应该可以编译通过main.cpp及lua的源码文件。\n\n- 4)将lua引入C++\n\n示例main.cpp，再编译一次，应该可以编译成功，示例程序MyLua可用来执行指定的lua脚本的文件。\n![mian.cpp code](http://pic.xrr.fun/blog/20160521/Snip20160521_2.png)\n\n## 二、变量\n\n### 全局(虚拟机对多文件全局)\n\n``` lua\nx = 12345\n```\n\n就理解为是lua_State的全局变量x，对所有文件都通用。\n\n### 本地(虚拟机对单文件局部)（local关键字修饰）\n\n``` lua\nlocal y = 54321\n```\n\n就理解为是lua_State在某个文件里的变量y，仅在那个文件中可用。\n\n## 三、变量与类型\n\nLua是动态类型语言，变量不要类型定义,只需要为变量赋值,给变量赋值了什么类型，变量就是什么类型。\n\n例如：\n\n``` lua\n--变量类型\nlocal boolean bv = 0.0\nbv = x > 250\nif bv then\n    print(\"bv is \", bv, \" true\")\nelse\n    print(\"bv is \", bv, \" false\")\nend\n\nmath.randomseed(os.time())  \nbv = math.random(500)\n \nif bv > 250 then\n    print(\"bv is \", bv, \" > 250\")\nelse\n    print(\"bv is \", bv, \" <= 250\")\nend\n\nbv = \"bv -> string\"\nprint(\"bv is \", bv)\n--bv = bv + 1\t\t\t\t--非法的操作，无法将不能转化为数值的字符串用于算术计算\n--print(\"bv is \", bv)\n\nbv = \"0xEF\"\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n\nbv = bv + 1\t\t\t\t\t--在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--number\n\nbv = \"0xEF\"\nprint(\"bv is \", bv)\nbv = string.format(\"%s%s\", bv, \"kkkl\")\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n\nbv = \"0xEF\"\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n\nbv = string.format(\"%d%s\", bv, \"kkkl\")\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n```\n\n结果：\n\n```txt\nbv is \tfalse\t false\nbv is \t231\t <= 250\nbv is \tbv -> string\nbv is \t0xEF\nstring\nbv is \t240.0\nnumber\nbv is \t0xEF\nbv is \t0xEFkkkl\nstring\nbv is \t0xEF\nstring\nbv is \t239kkkl\nstring\n```\n\n## 四、控制语句\n\n### if判断\n\n``` lua\nmath.randomseed(os.time())  \nx = math.random(500)\nprint(\"x is\", x)\n\nif x < 100 then\n    print(\"x ∈ [0, 100)\")\nelseif x < 200 then\n    print(\"x ∈ [100, 200)\")\nelseif x == 250 then\n    print(\"中彩票了，250\")\nelseif x < 300 then\n    print(\"x ∈ [200, 250)U(250, 300)\")\nelseif x < 400 then\n    print(\"x ∈ [300, 400)\")\nelseif x < 500 then\n    print(\"x ∈ [400, 500)\")\nelseif x == 500 then\n    print(\"x == 500\")\nelse\n    print(\"x is \", x)\nend\n```\n\n### for循环 \n\n``` lua\nfor i = 0, 1, 0.1 do\n    print(\"for: i is\", i)\nend\n```\n\n### while循环\n\n``` lua\ni = 1.1\nwhile i < 2 do\n    print(\"while: i is \", i)\n    i = i + 0.1\nend\n```\n\n### repeat循环\n\n``` lua\ni = 2.0\nrepeat \n    print(\"repeat: i is \", i)\n    i = i + 0.1\nuntil i > 3\n```\n\n## 五、表、元表、元方法\n\n万能的表，表之于LUA的地位应该就相当于类之于C++了吧，之前在理解元表与元方法上还有许多模糊的地方。看视频教材，也没有说的很清楚，遂决定抛弃视频教材，还是看看官方的手册比较靠谱点。\n\n表、元表、元方法的关系简单理解应该就是，元表中定义了元方法，或者说元方法就是元表的元素，表使用setmetatable关联元表，表就可以调用元表中的元方法了，而元表的本质也还是表，所以任意表都可以做元表，包括表做自己的元表，可见元表应该是一个相对的概念。\n\n剩下需要重点学习一下的就是元方法了。\n\n### 操作符\"重载\"的元方法\n\n``` lua\n__add\t-- function (a, b)\t\t--对应 + 操作符, a + b\n__sub\t-- function (a, b)\t\t--对应 - 操作符, a - b\n__mul\t-- function (a, b)\t\t--对应 * 操作符, a * b\n__div\t-- function (a, b)\t\t--对应 / 操作符, a / b\n__unm\t-- function (a)\t\t\t--对应 -(相反数)操作符, -a\n__mod\t-- function (a, b)\t\t--对应 % 取模操作符, a % b\n__pow\t-- function (a, b)\t\t--对应 ^ 乘幂操作符, a ^ b\n__call\t-- function (tbl, ...)\t--对应 () 操作符, tbl(...)\n\n__eq\t-- function (a, b)\t--对应 == 操作符, t1 == t2\n__lt\t-- function (a, b)\t--对应 < 操作符, t1 < t2\n__le\t-- function (a, b)\t--对应 <= 操作符 t1 <= t2\n```\n\n### 库定义的元方法\n\n``` lua\n__tostring\t\t-- function (tbl) --例如print(tbl) 时，若tbl的元表中定义了__tostring元方法，则自动调用该元方法取自定义的tostring结果(与java中tostring目的相同)\n__metatable\t\t-- 给__metatable赋值后，再对主表setmetatable其他元表时会报错，保护主表的元表不被改变，getmetatable会返回__metatable字段值，隐藏元表\n```\n\n### table访问/赋值的元方法\n\n``` lua\n__index\t\t-- table变量或function (tbl, key)\t\t-- tbl[key]不存在时，将调用__index获取tbl[key]的返回值(mt.__index = mt,结果即为tbl[key]不存在时就取mt[key]做tbl[key]的值)\n__newindex\t-- table变量或function (tbl, key, val)\t-- 赋值val给tbl[key]时，若tbl[key]不存在，则会调用__newindex(tbl, key, val)处理替代默认的创建tbl[key]并赋值val的处理\n```\n\n``` lua\nSet = {}\n\nlocal mt = {}\nmt.name = \"defaultName\"\n\nfunction Set.new(l)\n\tlocal set = {}\n\tsetmetatable(set, mt)\n\tfor k, v in ipairs(l) do\n\t\tset[v] = true\t\t\t--将集合的元素作为key保存，避免查重检验\n\tend\n\n\treturn set\nend\n\n--求并集\nfunction Set.union(a, b)\n\tlocal res = Set.new{}\n\n\tfor k in pairs(a) do\n\t\tres[k] = true\n\tend\n\n\tfor k in pairs(b) do\n\t\tres[k] = true\n\tend\n\n\treturn res\nend\n\n--求交集\nfunction Set.intersection(a, b)\n\tlocal res = Set.new{}\n\tfor k in pairs(a) do\n\t\tres[k] = b[k]\t\t--只有a[k]、b[k]都不是nil时，res[k]才不是nil\n\tend\n\n\treturn res\nend\n\nfunction Set.tostring(set)\n\tlocal l = {}\n\n\tfor k in pairs(set) do\n\t\tl[#l + 1] = k\n\tend\n\n\treturn \"{\" .. table.concat(l, \", \") .. \"}\"\nend\n\nfunction Set.print(s)\n\tprint(Set.tostring(s))\nend\n\ns1 = Set.new{10, 20, 30, 50}\ns2 = Set.new{30, 1}\nprint(mt)\nprint(\"s1的元表\", getmetatable(s1))\nprint(\"s2的元表\", getmetatable(s2))\nSet.print(s1)\nSet.print(s2)\n\n--算术类元方法\nmt.__add = Set.union\nSet.print(s1 + s2)\n\nmt.__mul = Set.intersection\nSet.print((s1+s2)*s1)\n\n--关系类元方法\n-- <=\nmt.__le = function (a, b)\n\tfor k in pairs(a) do\n\t\tif not b[k] then\n\t\t\treturn false\t--如果a中有，b中没有就返回false\n\t\tend\n\tend\n\n\treturn true\t--a中有的，b中都有，则认为a <= b\nend\n\n-- <\nmt.__lt = function (a, b)\n\treturn a <= b and not(b <= a)\nend\n\n-- ==\nmt.__eq = function (a, b)\n\treturn a <= b and b <= a\nend\n\nprint(s1 < s2, s2 > s1)\nprint(s1 <= s2, s2 >= s1)\nprint(s1 == s2)\nprint(s1*s2 <= s1+s2)\nprint(s1*s2 < s1+s2)\n\n--库定义的元方法\nmt.__tostring = Set.tostring\nprint(s1, s2, s1+s2, s1*s2)\n\nmt.__metatable = \"not your business\"\nprint(getmetatable(s1)) --设置了__metatable后，getmetatable会返回该字段值，隐藏元表\n--setmetatable(s1)\t\t--设置了__metatable后，setmetatable会报错，保护元表\n\n--table访问的元方法\nmt.__index = mt\n--mt.__index = function (table, key)\n--\treturn mt[key]\n--end\n\ns1.name = \"s1 table\"\ns2.name = \"s2 table\"\n\nprint(s1.name, s2.name)\nprint(s2.name, s1.name)\n```\n\n## 六、类\n\n实际lua中应该没有类的概念，而是使用原型的概念来组织对象间的共享行为。原型也是一种常规对象，当其他对象遇到未知操作时就在这个对象的原型对象中寻找这个未知操作的定义。这样元表的作用就和原型的作用很类似，所以就可以使用元表来实现lua的面向对象编程，原型也就成了元表在lua面向对象编程时的代名词。\n\n### 继承和多重继承\n\n使用`setmetatable(Super, Base)`和`Base.__index = Base`来模拟继承的特性。\n\n使用`setmetatable(Super, {__index = function (t, k) return search(k, {Base1, Base2}); end})`来模拟多重继承的特性。\n\n``` lua\n--lua面向對象編程的demo\n\n--原型定義\nAccount = {balance = 0};\n\nfunction Account:new(o)\n\to = o or {}; --如果用戶沒有提供table就創建一個\n\tsetmetatable(o, self);\n\tself.__index = self;\n\treturn o;\nend\n\nfunction Account:deposit(v)\t--存\n\tself.balance = self.balance + v;\n\tprint(\"deposit\", self.balance);\nend\n\nfunction Account:withdraw(v) --取\n\tif v > self.balance then\n\t\tprint(\"insufficient funds\");\n\tend\n\n\t--如果self中原先不存在balance，就会先用Account里的balance-v，然后将结果保存到新建的self.balance元素里\n\tself.balance = self.balance - v; \n\tprint(\"withdraw\", self.balance);\nend\n\n--继承\nSpecialAccount = Account:new();\n\nfunction SpecialAccount:getLimit()\n\treturn self.limit or 0;\nend\n\nfunction SpecialAccount:withdraw(v)\n\tif self.balance - v < -self:getLimit() then\n\t\tprint(\"insufficient funds\");\n\tend\n\n\tself.balance = self.balance - v;\n\tprint(\"withdraw\", self.balance);\nend\n\na3 = Account:new{balance = 0};\na4 = Account:new();\ns1 = SpecialAccount:new{limit = 1000.00};\ns2 = SpecialAccount:new();\n\nprint(Account, a1, a2, a3, a4, getmetatable(a4), getmetatable(s1));\nprint(Account, a1, a2, a3, a4, getmetatable(a4), getmetatable(s1));\n\na3:withdraw(100);\na4:withdraw(100);\ns1:withdraw(100);\ns2:withdraw(100);\n\n--多重继承\nNamed = {}\n\nfunction Named:getName()\n\treturn self.name;\nend\n\nfunction Named:setName(n)\n\tself.name = n;\nend\n\n\nlocal function search(k, plist)\n\tfor i, z in pairs(plist) do\n\t\tlocal v = plist[i][k]\n\t\tif v then return v end\n\tend\nend\n\nfunction createClass(a, b)\t--多重继承\n\tlocal c = {}\n\tlocal parents = {a, b}\n\n\tsetmetatable(c, {__index = function (t, k)\n\t\treturn search(k, parents);\n\tend})\n\n\tc.__index = c;\n\tfunction c:new(o)\n\t\to = o or {};\n\t\tsetmetatable(o, self);\n\t\treturn o;\n\tend\n\n\treturn c;\nend\n\nNamedAccount = createClass(Account, Named);\nSpecialNamedAccount = createClass(SpecialAccount, Named);\n\nacnt1 = NamedAccount:new{name = \"Paul\"};\nacnt2 = SpecialNamedAccount:new{name = \"Ann\"};\nprint(acnt1:getName(), acnt1.balance);\nacnt2:deposit(200);\nprint(acnt2:getName(), acnt2.balance, acnt2:getLimit());\n```\n\n### 私密性\n\n虽然可以模拟，但对lua的设计目的而言，私密性似乎不非常重要，暂时一瞥掠过。\n\n## 七、与C/C++交互\n\nC程序可以使用lua库来执行lua代码，lua代码也可以调用在lua环境中注册了的用C语言实现的函数。\nlua的C API包含读写lua全局变量、调用lua函数、运行一段lua代码、注册C函数供lua调用等。\nlua.h(lua.hpp)声明了Lua提供的基础函数，包括创建Lua环境、调用Lua函数、读写Lua环境中的全局变量以及注册供lua调用的函数等，函数都以lua_开头；\nluaxlib.h声明了辅助库(auxiliary library，auxlib)提供的函数，都以luaL_开头。辅助库并没有直接访问Lua的内部，而是都以官方基础API来完成所有工作。\nLua库中没有定义任何全局变量，而是将所有的状态信息都保存在动态结构lua_State中，所有lua C API的调用都要传入这个动态结构的指针。如果简单的将lua_State看作栈的话，这个栈有可以看作有两套引索序号，一套是从栈底到栈顶依次是1到N递增(绝对引索)，另一套是从栈顶到栈底的引索序号-1到-N的递减(相对引索)。所以可以直接使用引索值-1和1分别访问栈顶和栈底元素。\n\n### 环境创建\n\n`lua_State`是C程序与lua交互编程中最常用的数据结构，要C程序读取Lua中的变量，也是先调用lua的CAPI,将lua中的数据压入lua_State栈中,然后C程序再通过lua的CAPI读取lua_State栈中的元素,如此间接读取到lua的变量值。\n\n``` cpp\nLUALIB_API lua_State *(luaL_newstate) (void);\nLUALIB_API void (luaL_openlib) (lua_State *L, const char *libname, const luaL_Reg *l, int nup);\nLUALIB_API void (luaL_openlibs) (lua_State *L);\t// open all previous libraries \n```\n\n### 压元素入栈(增)\n\n``` cpp\n/* push functions (C -> stack) */\nLUA_API void        (lua_pushnil) (lua_State *L);\nLUA_API void        (lua_pushnumber) (lua_State *L, lua_Number n);\nLUA_API void        (lua_pushinteger) (lua_State *L, lua_Integer n);\nLUA_API const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);\t// s字符串中间可任意包含'\\0'或不以'\\0'结尾\nLUA_API const char *(lua_pushstring) (lua_State *L, const char *s);\t\t\t\t\t// s字符串中间不可包含'\\0'且必须以'\\'结尾\nLUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt, va_list argp);\nLUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);\nLUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);\nLUA_API void  (lua_pushboolean) (lua_State *L, int b);\nLUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);\nLUA_API int   (lua_pushthread) (lua_State *L);\n\n#define lua_pushcfunction(L,f)\tlua_pushcclosure(L, (f), 0)\n#define lua_pushliteral(L, s)\tlua_pushstring(L, \"\" s)\n#define lua_pushglobaltable(L)  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS)\t\t// ?\n\n// 检查栈大小，调用参数很多的函数时可以检查一下栈空间是否还足够\nLUA_API int (lua_checkstack)(lua_State *L, int n);\n\n```\n\n### 访问栈元素(查)\n\n``` cpp\n/* access functions (stack -> C) */\n// 判断L中序号为idx的元素能否转为函数所指的类型，及判断栈中的元素的类型\nLUA_API int             (lua_isnumber) (lua_State *L, int idx);\nLUA_API int             (lua_isstring) (lua_State *L, int idx);\nLUA_API int             (lua_iscfunction) (lua_State *L, int idx);\nLUA_API int             (lua_isinteger) (lua_State *L, int idx);\nLUA_API int             (lua_isuserdata) (lua_State *L, int idx);\nLUA_API int             (lua_type) (lua_State *L, int idx);\nLUA_API const char     *(lua_typename) (lua_State *L, int tp);\n\n#define lua_isfunction(L,n)\t(lua_type(L, (n)) == LUA_TFUNCTION)\n#define lua_istable(L,n)\t(lua_type(L, (n)) == LUA_TTABLE)\n#define lua_islightuserdata(L,n)\t(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)\n#define lua_isnil(L,n)\t\t(lua_type(L, (n)) == LUA_TNIL)\n#define lua_isboolean(L,n)\t(lua_type(L, (n)) == LUA_TBOOLEAN)\n#define lua_isthread(L,n)\t(lua_type(L, (n)) == LUA_TTHREAD)\n#define lua_isnone(L,n)\t\t(lua_type(L, (n)) == LUA_TNONE)\n#define lua_isnoneornil(L, n)\t(lua_type(L, (n)) <= 0)\n\n// 返回L中序号为idx的元素返回为函数指定类型的结果\nLUA_API lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);\nLUA_API lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);\nLUA_API int             (lua_toboolean) (lua_State *L, int idx);\nLUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);\nLUA_API size_t          (lua_rawlen) (lua_State *L, int idx);\nLUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);\nLUA_API void\t       *(lua_touserdata) (lua_State *L, int idx);\nLUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);\nLUA_API const void     *(lua_topointer) (lua_State *L, int idx);\n\n#define lua_tostring(L,i)\tlua_tolstring(L, (i), NULL)\n#define lua_tonumber(L,i)\tlua_tonumberx(L,(i),NULL)\n#define lua_tointeger(L,i)\tlua_tointegerx(L,(i),NULL)\n```\n\n### 其他栈元素操作\n\n``` cpp\nLUA_API int   (lua_gettop) (lua_State *L);\t\t\t// 获取栈顶元素的绝对引索值，即获取栈中元素的个数\nLUA_API void  (lua_settop) (lua_State *L, int idx);\t// 设置的位置比栈顶的位置大,则增长的元素值为nil,若比栈顶的位置小,则多余的元素被丢弃.lua_settop(L, 0)会清空栈L。\nLUA_API void  (lua_pushvalue) (lua_State *L, int idx);\t// 将idx上的栈元素的副本压入到栈顶\n#define lua_pop(L,n)\t\tlua_settop(L, -(n)-1)\t\t// 栈弹出(清除)n个元素\n#define lua_insert(L,idx)\tlua_rotate(L, (idx), 1)\t\t// idx上的元素到栈顶的元素的一个循环位移\n#define lua_remove(L,idx)\t(lua_rotate(L, (idx), -1), lua_pop(L, 1)) \t// 将栈顶到idx的元素一个循环位移，然后将栈顶元素弹出，相当于删除了原先idx的元素\n#define lua_replace(L,idx)\t(lua_copy(L, -1, (idx)), lua_pop(L, 1))\t\t// 拷贝栈顶的元素到指定idx的元素上，然后将栈顶元素弹出\n```\n\n### 执行lua程序\n\n``` cpp\n// 编译用户输入的每行内容，并将编译后的程序块压入栈中，返回0表示没有错误。\nLUALIB_API int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz, const char *name, const char *mode);\n#define luaL_loadbuffer(L,s,sz,n)\tluaL_loadbufferx(L,s,sz,n,NULL)\n\n/* 'load' and 'call' functions (load and run Lua code) */\n// 将程序块从栈中弹出，并在保护模式下运行弹出的程序块，返回0表示没有错误，若发生错误，则向栈中也入一条错误信息，用lua_tostring可以获取这条信息，获取之后使用lua_pop将这条错误信息从栈中删除。\nLUA_API void (lua_callk)(lua_State *L, int nargs, int nresults, lua_KContext ctx, lua_KFunction k);\nLUA_API int (lua_pcallk)(lua_State *L, int nargs, int nresults, int errfunc, lua_KContext ctx, lua_KFunction k);\n#define lua_call(L,n,r)\t\tlua_callk(L, (n), (r), 0, NULL)\n#define lua_pcall(L,n,r,f)\tlua_pcallk(L, (n), (r), (f), 0, NULL)\n\nLUA_API int (lua_load) (lua_State *L, lua_Reader reader, void *dt, const char *chunkname, const char *mode);\nLUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);\n\n#define luaL_dofile(L, fn)\t\t(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))\n#define luaL_dostring(L, s)\t\t(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))\n```\n\n### lua扩展应用程序\n\n#### 参数配置\n\nlua中定义一些全局变量，应用程序调用api将lua中的全局变量值压到L栈中，再通过api从L栈中将该值读取出来，即到读取配置参数的目的。\n\n``` cpp\nvoid luaStackDump(lua_State *L)\n{\n\tfor (int i = lua_gettop(L); i > 0; i--)\n\t{\n\t\tint iType = lua_type(L, i);\n\t\tswitch (iType)\n\t\t{\n\t\tcase LUA_TSTRING:\n\t\tcase LUA_TBOOLEAN:\n\t\tcase LUA_TNUMBER:\n\t\tcase LUA_TNIL:\n\t\t\t{\n\t\t\t\tcout << \"(\" << lua_typename(L, iType) << \")\" << lua_tostring(L, i) << endl;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t{\n\t\t\t\tcout << \"(\" << lua_typename(L, iType) << \")\" << endl;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nvoid error(lua_State *L, const char *fmt, ...)\n{\n\tva_list argp;\n\tva_start(argp, fmt);\n\tvfprintf(stderr, fmt, argp);\n\tva_end(argp);\n\n\tluaStackDump(L);\n\tlua_close(L);\n\t\n\tprintf(\"app exit.\");\n\texit(1);\n}\n\nvoid luaGetGlobalInt(lua_State *L, const string &strVarName, int &iRet)\n{\n\tlua_getglobal(L, strVarName.c_str());\t\t// 先读取全局变量值到栈\n\n\tif (!lua_isnumber(L, -1))\n\t{\n\t\terror(L, \"'%s' should be a number\\n\", strVarName.c_str());\n\t}\n\n\tiRet = (int)lua_tointeger(L, -1);\t\t\t// 然后再从栈中读取元素的值，间接读取lua全局变量的值\n\tlua_pop(L, 1);\n\tcout << strVarName << \" is \" << iRet << endl;\n}\n\nvoid luaGetTableFiledValue(lua_State *L, const string &strTblName, const string &strFldName, string &strValue)\n{\n\tlua_getglobal(L, strTblName.c_str());\n\t\n\tif (!lua_istable(L, -1))\n\t{\n\t\terror(L, \"%s is not a table\\n\", strTblName.c_str());\n\t}\n\n\tlua_pushstring(L, strFldName.c_str());\n\tlua_gettable(L, -2);\n\tstrValue = lua_tostring(L, -1);\n\tlua_pop(L, 2);\n\tcout << strTblName << \"[\" << strFldName << \"] is \" << strValue << endl;\n}\n\nvoid luaGetTableFiledValue(lua_State *L, const string &strTblName, const vector<string> &vctstrFldsName, vector<string> &vctstrValues)\n{\n\tlua_getglobal(L, strTblName.c_str());\n\n\tif (!lua_istable(L, -1))\n\t{\n\t\terror(L, \"%s is not a table\\n\", strTblName.c_str());\n\t}\n\n\tfor (unsigned int i = 0; i < vctstrFldsName.size(); i++)\n\t{\n\t\tlua_pushstring(L, vctstrFldsName[i].c_str());\n\t\tlua_gettable(L, -2);\n\t\tvctstrValues.push_back(lua_tostring(L, -1));\n\t\tlua_pop(L, 1);\n\t}\n\n\tlua_pop(L, 1);\n}\n```\n\n#### C/C++程序调用lua脚本\n\nlua中定义好函数后，C代码中使用api获取lua的函数对象压入到L栈中，然后再向L栈中按顺序压入函数参数，然后调用lua_pcall指定函数调用的参数个数和返回值个数,lua_pcall调用后，将会将之前压入的L栈的函数对象与参数弹出，然后将函数执行的返回值或函数执行失败的错误信息压入L栈中。C代码通过API从栈中将返回值或错误信息读取出来，然后需要C代码调用调用lua_pop里显示清理栈，恢复L栈至函数调用前状态。\n\n``` cpp\nvoid luaCallLuaFunc(lua_State *L, const string &strFuncName, const vector<string> &vctstrParams, vector<string> &vctstrRets)\n{\n\tlua_getglobal(L, strFuncName.c_str());\n\n\tfor (unsigned int i = 0; i < vctstrParams.size(); i++)\n\t{\n\t\tlua_pushstring(L, vctstrParams[i].c_str());\n\t}\n\n\tif (lua_pcall(L, vctstrParams.size(), vctstrRets.size(), NULL) != 0)\n\t{\n\t\terror(L, \"error running function getSize: %s\\n\", lua_tostring(L, -1));\n\t}\n\n\tfor (int i = vctstrRets.size() - 1; i >= 0; i--)\n\t{\n\t\tvctstrRets[i] = lua_tostring(L, -1);\n\t\tlua_pop(L, 1);\n\t}\n\n\tcout << \"call \" << strFuncName << \"(\";\n\t\n\tif (vctstrParams.size() > 0)\n\t{\n\t\tcout << \"\\\"\" << vctstrParams[0] << \"\\\"\";\n\n\t\tfor (unsigned int i = 1; i < vctstrParams.size(); i++)\n\t\t{\n\t\t\tcout << \", \\\"\" << vctstrParams[i] << \"\\\"\";\n\t\t}\n\t}\n\t\t\n\tcout << \") returns (\";\n\n\tif (vctstrRets.size() > 0)\n\t{\n\t\tcout << \"\\\"\" << vctstrRets[0] << \"\\\"\";\n\n\t\tfor (unsigned int i = 1; i < vctstrRets.size(); i++)\n\t\t{\n\t\t\tcout << \", \\\"\" << vctstrRets[i] << \"\\\"\";\n\t\t}\n\t}\n\t\n\tcout << \")\" << endl;\n}\n\nvoid luaCallLuaFunc2(lua_State *L, const char *cfunc, const char *cfrm, ...)\n{\n\tva_list vl;\n\tint narg = 0;\n\tint nres = 0;\n\tva_start(vl, cfrm);\n\n\t// 压入函数\n\tlua_getglobal(L, cfunc);\n\n\t// 压入参数\n\tfor (narg = 0; *cfrm != '\\0'; narg++)\n\t{\n\t\tluaL_checkstack(L, 1, \"too many arguments\");\n\t\tswitch (*cfrm++)\n\t\t{\n\t\tcase 'f':\n\t\t\t{\n\t\t\t\tlua_pushnumber(L, va_arg(vl, const double));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\t{\n\t\t\t\tlua_pushinteger(L, va_arg(vl, const int));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's':\n\t\t\t{\n\t\t\t\tlua_pushstring(L, va_arg(vl, const char *));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '>':\n\t\t\t{\n\t\t\t\tgoto endargs;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t{\n\t\t\t\terror(L, \"invalid option (%c)\", *(cfrm - 1));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\nendargs:\n\t// 调用函数\n\tint irescnt = nres = strlen(cfrm);\t// 期望的结果数量\n\t\n\tif (lua_pcall(L, narg, nres, 0) != 0)\n\t{\n\t\terror(L, \"error calling %s:%s\", cfunc, lua_tostring(L, -1));\n\t}\n\n\t// 获取返回值\n\tnres = -nres;\t// 第一个返回结果的栈位置\n\t\n\twhile (*cfrm)\n\t{\n\t\tswitch (*cfrm++)\n\t\t{\n\t\tcase 'f':\n\t\t\t{\n\t\t\t\tif (!lua_isnumber(L, nres))\n\t\t\t\t{\n\t\t\t\t\terror(L, \"wrong result type\");\n\t\t\t\t}\n\n\t\t\t\t*va_arg(vl, double *) = lua_tonumber(L, nres);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\t{\n\t\t\t\tif (!lua_isinteger(L, nres))\n\t\t\t\t{\n\t\t\t\t\terror(L, \"wrong result type\");\n\t\t\t\t}\n\n\t\t\t\t*va_arg(vl, int *) = (int)lua_tointeger(L, nres);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's':\n\t\t\t{\n\t\t\t\tif (!lua_isstring(L, nres))\n\t\t\t\t{\n\t\t\t\t\terror(L, \"wrong result type\");\n\t\t\t\t}\n\n\t\t\t\t*va_arg(vl, const char **) = lua_tostring(L, nres);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t{\n\t\t\t\terror(L, \"invalid option (%c)\", *(cfrm-1));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tnres++;\n\t}\n\n\tlua_pop(L, irescnt);\n\tva_end(vl);\n}\n```\n\n### lua脚本调用C/C++\n\n#### lua脚本调用C/C++函数\n\n所有注册到lua中的函数都具有相同的类型，或者可以说只有一种特定类型的函数才能注册到lua中，\n该函数类型lua.h中定义如下\n\n``` cpp\ntypedef int (*lua_CFunction) (lua_State *L);\t// Type for C functions registered with Lua\n```\n\n通过使用`lua_pushcfunction`和`lua_setglobal`两个方法就可以将一个函数注册到lua中，然后就可以在lua中通过使用lua_setglobal设置的globalname来调用到这个C函数了\n\n``` cpp\nvoid registCFuncToLua(lua_State *L, lua_CFunction pfunc, const string &strGlobalName)\n{\n\tlua_pushcfunction(L, pfunc);\n\tlua_setglobal(L, strGlobalName.c_str());\n}\n\n// 示例代码\nstatic int l_sin(lua_State *L)\n{\n\tdouble dbl = luaL_checknumber(L, 1);\n\tlua_pushnumber(L, sin(dbl));\n\treturn 1;\n}\n\nint main()\n{\n\t...\n\tregistCFuncToLua(L, l_sin, \"c_sin\");\n\t// lua代码中就可以使用c_sin来调用到l_sin函数了\n\t...\n}\n\n```\n\n#### 使用C/C++定义LUA模块\n\n以下LUA调用C/C++的方法应该可以理解成`require \"libname\"`语句的实现原理吧，简单理解就是在将C/C++代码封装成动态库时，若需要生成的动态库可以被lua require后使用，就需要在该动态库中定义一个接口(一个数组+一个函数)；\n\n``` cpp\n/*\n* lauxlib.h中luaL_Reg和luaL_register的定义\n\ntypedef struct luaL_Reg {\n\tconst char *name;\n\tlua_CFunction func;\n} luaL_Reg;\n\n#define luaL_register(L,n,l)\t(luaL_openlib(L,(n),(l),0))\n*/\n\n// 模块中函数的定义\nstatic int l_f1(lua_State *L)\n{\n\t...\n}\n\nstatic int l_f2(lua_State *L)\n{\n\t...\n}\n\n...\n\n// 指定被lua脚本require时需要被导出的函数\nstatic const luaL_Reg mylib[] = {\n\t{\"f1\", l_f1},\n\t{\"f2\", l_f2},\n\t...\n\t{NULL, NULL}\t// 固定结尾\n}; \n\nint luaopen_mylib(lua_State *L)\t\t\t// lua中`require \"mylib\"`时该函数会被注册与调用\n{\n\tluaL_register(L, \"mylib\", mylib);\t// 根据\"mylib\"名称创建(或复用)一个table,并用数组mylib中的元素填充这个table,并将这个table压入到L栈中\n\treturn 1;\t\t\t\t\t\t\t// 使lua脚本知道栈中已压入table\n}\n\n// lua文件中require \"mylib\"后，就可以通过f1、f2调用到l_f1、l_f2了，可见这也是一种动态库函数不需要被声明导出就可以被外部调用的方法，而且参数个数与类型可变，非常灵活，应该可以实现类似javascript的\"函数重载\"。\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2016-05-21-Lua.md","raw":"---\ntitle:  \"Lua & C++\"\ncategories: Lua\ntags: [Lua, C++]\nkeywords: Lua\ndescription: \ndate: 2016-05-21\n---\n\n## 一、Lua加入工程\n\n- 1)官方下载源码，解压；\n- 2)使用VS或XCode或其他IDE新建一个“hello worde”的C++工程；\n- 3)将lua源码加入工程目录中，我的测试目录结构如下，\n\n```bash\n├── lua\n│   ├── Makefile\n│   ├── README\n│   ├── doc\n│   └── src\n├── main.cpp\n└── main.lua\n```\n\n./lua即为lua源码包解压出来的东西,lua的源码文件在lua/src目录下，将lua/src下的文件除Makefile、lua.c<font color=\"lightgray\">(有一个main函数，这是lua的解释器)</font>、luac.c<font color=\"lightgray\">(lua编译器，编译后的lua脚本可被更高效率的使用)</font>外的其他源码文件都加入到helloworld的工程中，当然，可以在工程中增加一个\"luasrc\"的文件筛选器，将要加入的lua源码文件都放在该文件筛选器下，便于工程结构的分类管理。\n此时在main.cpp中，还未加入lua的引用，先编译一次，应该可以编译通过main.cpp及lua的源码文件。\n\n- 4)将lua引入C++\n\n示例main.cpp，再编译一次，应该可以编译成功，示例程序MyLua可用来执行指定的lua脚本的文件。\n![mian.cpp code](http://pic.xrr.fun/blog/20160521/Snip20160521_2.png)\n\n## 二、变量\n\n### 全局(虚拟机对多文件全局)\n\n``` lua\nx = 12345\n```\n\n就理解为是lua_State的全局变量x，对所有文件都通用。\n\n### 本地(虚拟机对单文件局部)（local关键字修饰）\n\n``` lua\nlocal y = 54321\n```\n\n就理解为是lua_State在某个文件里的变量y，仅在那个文件中可用。\n\n## 三、变量与类型\n\nLua是动态类型语言，变量不要类型定义,只需要为变量赋值,给变量赋值了什么类型，变量就是什么类型。\n\n例如：\n\n``` lua\n--变量类型\nlocal boolean bv = 0.0\nbv = x > 250\nif bv then\n    print(\"bv is \", bv, \" true\")\nelse\n    print(\"bv is \", bv, \" false\")\nend\n\nmath.randomseed(os.time())  \nbv = math.random(500)\n \nif bv > 250 then\n    print(\"bv is \", bv, \" > 250\")\nelse\n    print(\"bv is \", bv, \" <= 250\")\nend\n\nbv = \"bv -> string\"\nprint(\"bv is \", bv)\n--bv = bv + 1\t\t\t\t--非法的操作，无法将不能转化为数值的字符串用于算术计算\n--print(\"bv is \", bv)\n\nbv = \"0xEF\"\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n\nbv = bv + 1\t\t\t\t\t--在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--number\n\nbv = \"0xEF\"\nprint(\"bv is \", bv)\nbv = string.format(\"%s%s\", bv, \"kkkl\")\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n\nbv = \"0xEF\"\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n\nbv = string.format(\"%d%s\", bv, \"kkkl\")\nprint(\"bv is \", bv)\nprint(type(bv))\t\t\t\t--string\n```\n\n结果：\n\n```txt\nbv is \tfalse\t false\nbv is \t231\t <= 250\nbv is \tbv -> string\nbv is \t0xEF\nstring\nbv is \t240.0\nnumber\nbv is \t0xEF\nbv is \t0xEFkkkl\nstring\nbv is \t0xEF\nstring\nbv is \t239kkkl\nstring\n```\n\n## 四、控制语句\n\n### if判断\n\n``` lua\nmath.randomseed(os.time())  \nx = math.random(500)\nprint(\"x is\", x)\n\nif x < 100 then\n    print(\"x ∈ [0, 100)\")\nelseif x < 200 then\n    print(\"x ∈ [100, 200)\")\nelseif x == 250 then\n    print(\"中彩票了，250\")\nelseif x < 300 then\n    print(\"x ∈ [200, 250)U(250, 300)\")\nelseif x < 400 then\n    print(\"x ∈ [300, 400)\")\nelseif x < 500 then\n    print(\"x ∈ [400, 500)\")\nelseif x == 500 then\n    print(\"x == 500\")\nelse\n    print(\"x is \", x)\nend\n```\n\n### for循环 \n\n``` lua\nfor i = 0, 1, 0.1 do\n    print(\"for: i is\", i)\nend\n```\n\n### while循环\n\n``` lua\ni = 1.1\nwhile i < 2 do\n    print(\"while: i is \", i)\n    i = i + 0.1\nend\n```\n\n### repeat循环\n\n``` lua\ni = 2.0\nrepeat \n    print(\"repeat: i is \", i)\n    i = i + 0.1\nuntil i > 3\n```\n\n## 五、表、元表、元方法\n\n万能的表，表之于LUA的地位应该就相当于类之于C++了吧，之前在理解元表与元方法上还有许多模糊的地方。看视频教材，也没有说的很清楚，遂决定抛弃视频教材，还是看看官方的手册比较靠谱点。\n\n表、元表、元方法的关系简单理解应该就是，元表中定义了元方法，或者说元方法就是元表的元素，表使用setmetatable关联元表，表就可以调用元表中的元方法了，而元表的本质也还是表，所以任意表都可以做元表，包括表做自己的元表，可见元表应该是一个相对的概念。\n\n剩下需要重点学习一下的就是元方法了。\n\n### 操作符\"重载\"的元方法\n\n``` lua\n__add\t-- function (a, b)\t\t--对应 + 操作符, a + b\n__sub\t-- function (a, b)\t\t--对应 - 操作符, a - b\n__mul\t-- function (a, b)\t\t--对应 * 操作符, a * b\n__div\t-- function (a, b)\t\t--对应 / 操作符, a / b\n__unm\t-- function (a)\t\t\t--对应 -(相反数)操作符, -a\n__mod\t-- function (a, b)\t\t--对应 % 取模操作符, a % b\n__pow\t-- function (a, b)\t\t--对应 ^ 乘幂操作符, a ^ b\n__call\t-- function (tbl, ...)\t--对应 () 操作符, tbl(...)\n\n__eq\t-- function (a, b)\t--对应 == 操作符, t1 == t2\n__lt\t-- function (a, b)\t--对应 < 操作符, t1 < t2\n__le\t-- function (a, b)\t--对应 <= 操作符 t1 <= t2\n```\n\n### 库定义的元方法\n\n``` lua\n__tostring\t\t-- function (tbl) --例如print(tbl) 时，若tbl的元表中定义了__tostring元方法，则自动调用该元方法取自定义的tostring结果(与java中tostring目的相同)\n__metatable\t\t-- 给__metatable赋值后，再对主表setmetatable其他元表时会报错，保护主表的元表不被改变，getmetatable会返回__metatable字段值，隐藏元表\n```\n\n### table访问/赋值的元方法\n\n``` lua\n__index\t\t-- table变量或function (tbl, key)\t\t-- tbl[key]不存在时，将调用__index获取tbl[key]的返回值(mt.__index = mt,结果即为tbl[key]不存在时就取mt[key]做tbl[key]的值)\n__newindex\t-- table变量或function (tbl, key, val)\t-- 赋值val给tbl[key]时，若tbl[key]不存在，则会调用__newindex(tbl, key, val)处理替代默认的创建tbl[key]并赋值val的处理\n```\n\n``` lua\nSet = {}\n\nlocal mt = {}\nmt.name = \"defaultName\"\n\nfunction Set.new(l)\n\tlocal set = {}\n\tsetmetatable(set, mt)\n\tfor k, v in ipairs(l) do\n\t\tset[v] = true\t\t\t--将集合的元素作为key保存，避免查重检验\n\tend\n\n\treturn set\nend\n\n--求并集\nfunction Set.union(a, b)\n\tlocal res = Set.new{}\n\n\tfor k in pairs(a) do\n\t\tres[k] = true\n\tend\n\n\tfor k in pairs(b) do\n\t\tres[k] = true\n\tend\n\n\treturn res\nend\n\n--求交集\nfunction Set.intersection(a, b)\n\tlocal res = Set.new{}\n\tfor k in pairs(a) do\n\t\tres[k] = b[k]\t\t--只有a[k]、b[k]都不是nil时，res[k]才不是nil\n\tend\n\n\treturn res\nend\n\nfunction Set.tostring(set)\n\tlocal l = {}\n\n\tfor k in pairs(set) do\n\t\tl[#l + 1] = k\n\tend\n\n\treturn \"{\" .. table.concat(l, \", \") .. \"}\"\nend\n\nfunction Set.print(s)\n\tprint(Set.tostring(s))\nend\n\ns1 = Set.new{10, 20, 30, 50}\ns2 = Set.new{30, 1}\nprint(mt)\nprint(\"s1的元表\", getmetatable(s1))\nprint(\"s2的元表\", getmetatable(s2))\nSet.print(s1)\nSet.print(s2)\n\n--算术类元方法\nmt.__add = Set.union\nSet.print(s1 + s2)\n\nmt.__mul = Set.intersection\nSet.print((s1+s2)*s1)\n\n--关系类元方法\n-- <=\nmt.__le = function (a, b)\n\tfor k in pairs(a) do\n\t\tif not b[k] then\n\t\t\treturn false\t--如果a中有，b中没有就返回false\n\t\tend\n\tend\n\n\treturn true\t--a中有的，b中都有，则认为a <= b\nend\n\n-- <\nmt.__lt = function (a, b)\n\treturn a <= b and not(b <= a)\nend\n\n-- ==\nmt.__eq = function (a, b)\n\treturn a <= b and b <= a\nend\n\nprint(s1 < s2, s2 > s1)\nprint(s1 <= s2, s2 >= s1)\nprint(s1 == s2)\nprint(s1*s2 <= s1+s2)\nprint(s1*s2 < s1+s2)\n\n--库定义的元方法\nmt.__tostring = Set.tostring\nprint(s1, s2, s1+s2, s1*s2)\n\nmt.__metatable = \"not your business\"\nprint(getmetatable(s1)) --设置了__metatable后，getmetatable会返回该字段值，隐藏元表\n--setmetatable(s1)\t\t--设置了__metatable后，setmetatable会报错，保护元表\n\n--table访问的元方法\nmt.__index = mt\n--mt.__index = function (table, key)\n--\treturn mt[key]\n--end\n\ns1.name = \"s1 table\"\ns2.name = \"s2 table\"\n\nprint(s1.name, s2.name)\nprint(s2.name, s1.name)\n```\n\n## 六、类\n\n实际lua中应该没有类的概念，而是使用原型的概念来组织对象间的共享行为。原型也是一种常规对象，当其他对象遇到未知操作时就在这个对象的原型对象中寻找这个未知操作的定义。这样元表的作用就和原型的作用很类似，所以就可以使用元表来实现lua的面向对象编程，原型也就成了元表在lua面向对象编程时的代名词。\n\n### 继承和多重继承\n\n使用`setmetatable(Super, Base)`和`Base.__index = Base`来模拟继承的特性。\n\n使用`setmetatable(Super, {__index = function (t, k) return search(k, {Base1, Base2}); end})`来模拟多重继承的特性。\n\n``` lua\n--lua面向對象編程的demo\n\n--原型定義\nAccount = {balance = 0};\n\nfunction Account:new(o)\n\to = o or {}; --如果用戶沒有提供table就創建一個\n\tsetmetatable(o, self);\n\tself.__index = self;\n\treturn o;\nend\n\nfunction Account:deposit(v)\t--存\n\tself.balance = self.balance + v;\n\tprint(\"deposit\", self.balance);\nend\n\nfunction Account:withdraw(v) --取\n\tif v > self.balance then\n\t\tprint(\"insufficient funds\");\n\tend\n\n\t--如果self中原先不存在balance，就会先用Account里的balance-v，然后将结果保存到新建的self.balance元素里\n\tself.balance = self.balance - v; \n\tprint(\"withdraw\", self.balance);\nend\n\n--继承\nSpecialAccount = Account:new();\n\nfunction SpecialAccount:getLimit()\n\treturn self.limit or 0;\nend\n\nfunction SpecialAccount:withdraw(v)\n\tif self.balance - v < -self:getLimit() then\n\t\tprint(\"insufficient funds\");\n\tend\n\n\tself.balance = self.balance - v;\n\tprint(\"withdraw\", self.balance);\nend\n\na3 = Account:new{balance = 0};\na4 = Account:new();\ns1 = SpecialAccount:new{limit = 1000.00};\ns2 = SpecialAccount:new();\n\nprint(Account, a1, a2, a3, a4, getmetatable(a4), getmetatable(s1));\nprint(Account, a1, a2, a3, a4, getmetatable(a4), getmetatable(s1));\n\na3:withdraw(100);\na4:withdraw(100);\ns1:withdraw(100);\ns2:withdraw(100);\n\n--多重继承\nNamed = {}\n\nfunction Named:getName()\n\treturn self.name;\nend\n\nfunction Named:setName(n)\n\tself.name = n;\nend\n\n\nlocal function search(k, plist)\n\tfor i, z in pairs(plist) do\n\t\tlocal v = plist[i][k]\n\t\tif v then return v end\n\tend\nend\n\nfunction createClass(a, b)\t--多重继承\n\tlocal c = {}\n\tlocal parents = {a, b}\n\n\tsetmetatable(c, {__index = function (t, k)\n\t\treturn search(k, parents);\n\tend})\n\n\tc.__index = c;\n\tfunction c:new(o)\n\t\to = o or {};\n\t\tsetmetatable(o, self);\n\t\treturn o;\n\tend\n\n\treturn c;\nend\n\nNamedAccount = createClass(Account, Named);\nSpecialNamedAccount = createClass(SpecialAccount, Named);\n\nacnt1 = NamedAccount:new{name = \"Paul\"};\nacnt2 = SpecialNamedAccount:new{name = \"Ann\"};\nprint(acnt1:getName(), acnt1.balance);\nacnt2:deposit(200);\nprint(acnt2:getName(), acnt2.balance, acnt2:getLimit());\n```\n\n### 私密性\n\n虽然可以模拟，但对lua的设计目的而言，私密性似乎不非常重要，暂时一瞥掠过。\n\n## 七、与C/C++交互\n\nC程序可以使用lua库来执行lua代码，lua代码也可以调用在lua环境中注册了的用C语言实现的函数。\nlua的C API包含读写lua全局变量、调用lua函数、运行一段lua代码、注册C函数供lua调用等。\nlua.h(lua.hpp)声明了Lua提供的基础函数，包括创建Lua环境、调用Lua函数、读写Lua环境中的全局变量以及注册供lua调用的函数等，函数都以lua_开头；\nluaxlib.h声明了辅助库(auxiliary library，auxlib)提供的函数，都以luaL_开头。辅助库并没有直接访问Lua的内部，而是都以官方基础API来完成所有工作。\nLua库中没有定义任何全局变量，而是将所有的状态信息都保存在动态结构lua_State中，所有lua C API的调用都要传入这个动态结构的指针。如果简单的将lua_State看作栈的话，这个栈有可以看作有两套引索序号，一套是从栈底到栈顶依次是1到N递增(绝对引索)，另一套是从栈顶到栈底的引索序号-1到-N的递减(相对引索)。所以可以直接使用引索值-1和1分别访问栈顶和栈底元素。\n\n### 环境创建\n\n`lua_State`是C程序与lua交互编程中最常用的数据结构，要C程序读取Lua中的变量，也是先调用lua的CAPI,将lua中的数据压入lua_State栈中,然后C程序再通过lua的CAPI读取lua_State栈中的元素,如此间接读取到lua的变量值。\n\n``` cpp\nLUALIB_API lua_State *(luaL_newstate) (void);\nLUALIB_API void (luaL_openlib) (lua_State *L, const char *libname, const luaL_Reg *l, int nup);\nLUALIB_API void (luaL_openlibs) (lua_State *L);\t// open all previous libraries \n```\n\n### 压元素入栈(增)\n\n``` cpp\n/* push functions (C -> stack) */\nLUA_API void        (lua_pushnil) (lua_State *L);\nLUA_API void        (lua_pushnumber) (lua_State *L, lua_Number n);\nLUA_API void        (lua_pushinteger) (lua_State *L, lua_Integer n);\nLUA_API const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);\t// s字符串中间可任意包含'\\0'或不以'\\0'结尾\nLUA_API const char *(lua_pushstring) (lua_State *L, const char *s);\t\t\t\t\t// s字符串中间不可包含'\\0'且必须以'\\'结尾\nLUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt, va_list argp);\nLUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);\nLUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);\nLUA_API void  (lua_pushboolean) (lua_State *L, int b);\nLUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);\nLUA_API int   (lua_pushthread) (lua_State *L);\n\n#define lua_pushcfunction(L,f)\tlua_pushcclosure(L, (f), 0)\n#define lua_pushliteral(L, s)\tlua_pushstring(L, \"\" s)\n#define lua_pushglobaltable(L)  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS)\t\t// ?\n\n// 检查栈大小，调用参数很多的函数时可以检查一下栈空间是否还足够\nLUA_API int (lua_checkstack)(lua_State *L, int n);\n\n```\n\n### 访问栈元素(查)\n\n``` cpp\n/* access functions (stack -> C) */\n// 判断L中序号为idx的元素能否转为函数所指的类型，及判断栈中的元素的类型\nLUA_API int             (lua_isnumber) (lua_State *L, int idx);\nLUA_API int             (lua_isstring) (lua_State *L, int idx);\nLUA_API int             (lua_iscfunction) (lua_State *L, int idx);\nLUA_API int             (lua_isinteger) (lua_State *L, int idx);\nLUA_API int             (lua_isuserdata) (lua_State *L, int idx);\nLUA_API int             (lua_type) (lua_State *L, int idx);\nLUA_API const char     *(lua_typename) (lua_State *L, int tp);\n\n#define lua_isfunction(L,n)\t(lua_type(L, (n)) == LUA_TFUNCTION)\n#define lua_istable(L,n)\t(lua_type(L, (n)) == LUA_TTABLE)\n#define lua_islightuserdata(L,n)\t(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)\n#define lua_isnil(L,n)\t\t(lua_type(L, (n)) == LUA_TNIL)\n#define lua_isboolean(L,n)\t(lua_type(L, (n)) == LUA_TBOOLEAN)\n#define lua_isthread(L,n)\t(lua_type(L, (n)) == LUA_TTHREAD)\n#define lua_isnone(L,n)\t\t(lua_type(L, (n)) == LUA_TNONE)\n#define lua_isnoneornil(L, n)\t(lua_type(L, (n)) <= 0)\n\n// 返回L中序号为idx的元素返回为函数指定类型的结果\nLUA_API lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);\nLUA_API lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);\nLUA_API int             (lua_toboolean) (lua_State *L, int idx);\nLUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);\nLUA_API size_t          (lua_rawlen) (lua_State *L, int idx);\nLUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);\nLUA_API void\t       *(lua_touserdata) (lua_State *L, int idx);\nLUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);\nLUA_API const void     *(lua_topointer) (lua_State *L, int idx);\n\n#define lua_tostring(L,i)\tlua_tolstring(L, (i), NULL)\n#define lua_tonumber(L,i)\tlua_tonumberx(L,(i),NULL)\n#define lua_tointeger(L,i)\tlua_tointegerx(L,(i),NULL)\n```\n\n### 其他栈元素操作\n\n``` cpp\nLUA_API int   (lua_gettop) (lua_State *L);\t\t\t// 获取栈顶元素的绝对引索值，即获取栈中元素的个数\nLUA_API void  (lua_settop) (lua_State *L, int idx);\t// 设置的位置比栈顶的位置大,则增长的元素值为nil,若比栈顶的位置小,则多余的元素被丢弃.lua_settop(L, 0)会清空栈L。\nLUA_API void  (lua_pushvalue) (lua_State *L, int idx);\t// 将idx上的栈元素的副本压入到栈顶\n#define lua_pop(L,n)\t\tlua_settop(L, -(n)-1)\t\t// 栈弹出(清除)n个元素\n#define lua_insert(L,idx)\tlua_rotate(L, (idx), 1)\t\t// idx上的元素到栈顶的元素的一个循环位移\n#define lua_remove(L,idx)\t(lua_rotate(L, (idx), -1), lua_pop(L, 1)) \t// 将栈顶到idx的元素一个循环位移，然后将栈顶元素弹出，相当于删除了原先idx的元素\n#define lua_replace(L,idx)\t(lua_copy(L, -1, (idx)), lua_pop(L, 1))\t\t// 拷贝栈顶的元素到指定idx的元素上，然后将栈顶元素弹出\n```\n\n### 执行lua程序\n\n``` cpp\n// 编译用户输入的每行内容，并将编译后的程序块压入栈中，返回0表示没有错误。\nLUALIB_API int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz, const char *name, const char *mode);\n#define luaL_loadbuffer(L,s,sz,n)\tluaL_loadbufferx(L,s,sz,n,NULL)\n\n/* 'load' and 'call' functions (load and run Lua code) */\n// 将程序块从栈中弹出，并在保护模式下运行弹出的程序块，返回0表示没有错误，若发生错误，则向栈中也入一条错误信息，用lua_tostring可以获取这条信息，获取之后使用lua_pop将这条错误信息从栈中删除。\nLUA_API void (lua_callk)(lua_State *L, int nargs, int nresults, lua_KContext ctx, lua_KFunction k);\nLUA_API int (lua_pcallk)(lua_State *L, int nargs, int nresults, int errfunc, lua_KContext ctx, lua_KFunction k);\n#define lua_call(L,n,r)\t\tlua_callk(L, (n), (r), 0, NULL)\n#define lua_pcall(L,n,r,f)\tlua_pcallk(L, (n), (r), (f), 0, NULL)\n\nLUA_API int (lua_load) (lua_State *L, lua_Reader reader, void *dt, const char *chunkname, const char *mode);\nLUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);\n\n#define luaL_dofile(L, fn)\t\t(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))\n#define luaL_dostring(L, s)\t\t(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))\n```\n\n### lua扩展应用程序\n\n#### 参数配置\n\nlua中定义一些全局变量，应用程序调用api将lua中的全局变量值压到L栈中，再通过api从L栈中将该值读取出来，即到读取配置参数的目的。\n\n``` cpp\nvoid luaStackDump(lua_State *L)\n{\n\tfor (int i = lua_gettop(L); i > 0; i--)\n\t{\n\t\tint iType = lua_type(L, i);\n\t\tswitch (iType)\n\t\t{\n\t\tcase LUA_TSTRING:\n\t\tcase LUA_TBOOLEAN:\n\t\tcase LUA_TNUMBER:\n\t\tcase LUA_TNIL:\n\t\t\t{\n\t\t\t\tcout << \"(\" << lua_typename(L, iType) << \")\" << lua_tostring(L, i) << endl;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t{\n\t\t\t\tcout << \"(\" << lua_typename(L, iType) << \")\" << endl;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nvoid error(lua_State *L, const char *fmt, ...)\n{\n\tva_list argp;\n\tva_start(argp, fmt);\n\tvfprintf(stderr, fmt, argp);\n\tva_end(argp);\n\n\tluaStackDump(L);\n\tlua_close(L);\n\t\n\tprintf(\"app exit.\");\n\texit(1);\n}\n\nvoid luaGetGlobalInt(lua_State *L, const string &strVarName, int &iRet)\n{\n\tlua_getglobal(L, strVarName.c_str());\t\t// 先读取全局变量值到栈\n\n\tif (!lua_isnumber(L, -1))\n\t{\n\t\terror(L, \"'%s' should be a number\\n\", strVarName.c_str());\n\t}\n\n\tiRet = (int)lua_tointeger(L, -1);\t\t\t// 然后再从栈中读取元素的值，间接读取lua全局变量的值\n\tlua_pop(L, 1);\n\tcout << strVarName << \" is \" << iRet << endl;\n}\n\nvoid luaGetTableFiledValue(lua_State *L, const string &strTblName, const string &strFldName, string &strValue)\n{\n\tlua_getglobal(L, strTblName.c_str());\n\t\n\tif (!lua_istable(L, -1))\n\t{\n\t\terror(L, \"%s is not a table\\n\", strTblName.c_str());\n\t}\n\n\tlua_pushstring(L, strFldName.c_str());\n\tlua_gettable(L, -2);\n\tstrValue = lua_tostring(L, -1);\n\tlua_pop(L, 2);\n\tcout << strTblName << \"[\" << strFldName << \"] is \" << strValue << endl;\n}\n\nvoid luaGetTableFiledValue(lua_State *L, const string &strTblName, const vector<string> &vctstrFldsName, vector<string> &vctstrValues)\n{\n\tlua_getglobal(L, strTblName.c_str());\n\n\tif (!lua_istable(L, -1))\n\t{\n\t\terror(L, \"%s is not a table\\n\", strTblName.c_str());\n\t}\n\n\tfor (unsigned int i = 0; i < vctstrFldsName.size(); i++)\n\t{\n\t\tlua_pushstring(L, vctstrFldsName[i].c_str());\n\t\tlua_gettable(L, -2);\n\t\tvctstrValues.push_back(lua_tostring(L, -1));\n\t\tlua_pop(L, 1);\n\t}\n\n\tlua_pop(L, 1);\n}\n```\n\n#### C/C++程序调用lua脚本\n\nlua中定义好函数后，C代码中使用api获取lua的函数对象压入到L栈中，然后再向L栈中按顺序压入函数参数，然后调用lua_pcall指定函数调用的参数个数和返回值个数,lua_pcall调用后，将会将之前压入的L栈的函数对象与参数弹出，然后将函数执行的返回值或函数执行失败的错误信息压入L栈中。C代码通过API从栈中将返回值或错误信息读取出来，然后需要C代码调用调用lua_pop里显示清理栈，恢复L栈至函数调用前状态。\n\n``` cpp\nvoid luaCallLuaFunc(lua_State *L, const string &strFuncName, const vector<string> &vctstrParams, vector<string> &vctstrRets)\n{\n\tlua_getglobal(L, strFuncName.c_str());\n\n\tfor (unsigned int i = 0; i < vctstrParams.size(); i++)\n\t{\n\t\tlua_pushstring(L, vctstrParams[i].c_str());\n\t}\n\n\tif (lua_pcall(L, vctstrParams.size(), vctstrRets.size(), NULL) != 0)\n\t{\n\t\terror(L, \"error running function getSize: %s\\n\", lua_tostring(L, -1));\n\t}\n\n\tfor (int i = vctstrRets.size() - 1; i >= 0; i--)\n\t{\n\t\tvctstrRets[i] = lua_tostring(L, -1);\n\t\tlua_pop(L, 1);\n\t}\n\n\tcout << \"call \" << strFuncName << \"(\";\n\t\n\tif (vctstrParams.size() > 0)\n\t{\n\t\tcout << \"\\\"\" << vctstrParams[0] << \"\\\"\";\n\n\t\tfor (unsigned int i = 1; i < vctstrParams.size(); i++)\n\t\t{\n\t\t\tcout << \", \\\"\" << vctstrParams[i] << \"\\\"\";\n\t\t}\n\t}\n\t\t\n\tcout << \") returns (\";\n\n\tif (vctstrRets.size() > 0)\n\t{\n\t\tcout << \"\\\"\" << vctstrRets[0] << \"\\\"\";\n\n\t\tfor (unsigned int i = 1; i < vctstrRets.size(); i++)\n\t\t{\n\t\t\tcout << \", \\\"\" << vctstrRets[i] << \"\\\"\";\n\t\t}\n\t}\n\t\n\tcout << \")\" << endl;\n}\n\nvoid luaCallLuaFunc2(lua_State *L, const char *cfunc, const char *cfrm, ...)\n{\n\tva_list vl;\n\tint narg = 0;\n\tint nres = 0;\n\tva_start(vl, cfrm);\n\n\t// 压入函数\n\tlua_getglobal(L, cfunc);\n\n\t// 压入参数\n\tfor (narg = 0; *cfrm != '\\0'; narg++)\n\t{\n\t\tluaL_checkstack(L, 1, \"too many arguments\");\n\t\tswitch (*cfrm++)\n\t\t{\n\t\tcase 'f':\n\t\t\t{\n\t\t\t\tlua_pushnumber(L, va_arg(vl, const double));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\t{\n\t\t\t\tlua_pushinteger(L, va_arg(vl, const int));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's':\n\t\t\t{\n\t\t\t\tlua_pushstring(L, va_arg(vl, const char *));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '>':\n\t\t\t{\n\t\t\t\tgoto endargs;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t{\n\t\t\t\terror(L, \"invalid option (%c)\", *(cfrm - 1));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\nendargs:\n\t// 调用函数\n\tint irescnt = nres = strlen(cfrm);\t// 期望的结果数量\n\t\n\tif (lua_pcall(L, narg, nres, 0) != 0)\n\t{\n\t\terror(L, \"error calling %s:%s\", cfunc, lua_tostring(L, -1));\n\t}\n\n\t// 获取返回值\n\tnres = -nres;\t// 第一个返回结果的栈位置\n\t\n\twhile (*cfrm)\n\t{\n\t\tswitch (*cfrm++)\n\t\t{\n\t\tcase 'f':\n\t\t\t{\n\t\t\t\tif (!lua_isnumber(L, nres))\n\t\t\t\t{\n\t\t\t\t\terror(L, \"wrong result type\");\n\t\t\t\t}\n\n\t\t\t\t*va_arg(vl, double *) = lua_tonumber(L, nres);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\t{\n\t\t\t\tif (!lua_isinteger(L, nres))\n\t\t\t\t{\n\t\t\t\t\terror(L, \"wrong result type\");\n\t\t\t\t}\n\n\t\t\t\t*va_arg(vl, int *) = (int)lua_tointeger(L, nres);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's':\n\t\t\t{\n\t\t\t\tif (!lua_isstring(L, nres))\n\t\t\t\t{\n\t\t\t\t\terror(L, \"wrong result type\");\n\t\t\t\t}\n\n\t\t\t\t*va_arg(vl, const char **) = lua_tostring(L, nres);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t{\n\t\t\t\terror(L, \"invalid option (%c)\", *(cfrm-1));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tnres++;\n\t}\n\n\tlua_pop(L, irescnt);\n\tva_end(vl);\n}\n```\n\n### lua脚本调用C/C++\n\n#### lua脚本调用C/C++函数\n\n所有注册到lua中的函数都具有相同的类型，或者可以说只有一种特定类型的函数才能注册到lua中，\n该函数类型lua.h中定义如下\n\n``` cpp\ntypedef int (*lua_CFunction) (lua_State *L);\t// Type for C functions registered with Lua\n```\n\n通过使用`lua_pushcfunction`和`lua_setglobal`两个方法就可以将一个函数注册到lua中，然后就可以在lua中通过使用lua_setglobal设置的globalname来调用到这个C函数了\n\n``` cpp\nvoid registCFuncToLua(lua_State *L, lua_CFunction pfunc, const string &strGlobalName)\n{\n\tlua_pushcfunction(L, pfunc);\n\tlua_setglobal(L, strGlobalName.c_str());\n}\n\n// 示例代码\nstatic int l_sin(lua_State *L)\n{\n\tdouble dbl = luaL_checknumber(L, 1);\n\tlua_pushnumber(L, sin(dbl));\n\treturn 1;\n}\n\nint main()\n{\n\t...\n\tregistCFuncToLua(L, l_sin, \"c_sin\");\n\t// lua代码中就可以使用c_sin来调用到l_sin函数了\n\t...\n}\n\n```\n\n#### 使用C/C++定义LUA模块\n\n以下LUA调用C/C++的方法应该可以理解成`require \"libname\"`语句的实现原理吧，简单理解就是在将C/C++代码封装成动态库时，若需要生成的动态库可以被lua require后使用，就需要在该动态库中定义一个接口(一个数组+一个函数)；\n\n``` cpp\n/*\n* lauxlib.h中luaL_Reg和luaL_register的定义\n\ntypedef struct luaL_Reg {\n\tconst char *name;\n\tlua_CFunction func;\n} luaL_Reg;\n\n#define luaL_register(L,n,l)\t(luaL_openlib(L,(n),(l),0))\n*/\n\n// 模块中函数的定义\nstatic int l_f1(lua_State *L)\n{\n\t...\n}\n\nstatic int l_f2(lua_State *L)\n{\n\t...\n}\n\n...\n\n// 指定被lua脚本require时需要被导出的函数\nstatic const luaL_Reg mylib[] = {\n\t{\"f1\", l_f1},\n\t{\"f2\", l_f2},\n\t...\n\t{NULL, NULL}\t// 固定结尾\n}; \n\nint luaopen_mylib(lua_State *L)\t\t\t// lua中`require \"mylib\"`时该函数会被注册与调用\n{\n\tluaL_register(L, \"mylib\", mylib);\t// 根据\"mylib\"名称创建(或复用)一个table,并用数组mylib中的元素填充这个table,并将这个table压入到L栈中\n\treturn 1;\t\t\t\t\t\t\t// 使lua脚本知道栈中已压入table\n}\n\n// lua文件中require \"mylib\"后，就可以通过f1、f2调用到l_f1、l_f2了，可见这也是一种动态库函数不需要被声明导出就可以被外部调用的方法，而且参数个数与类型可变，非常灵活，应该可以实现类似javascript的\"函数重载\"。\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"2016-05-21-Lua","published":1,"updated":"2019-12-01T04:16:43.132Z","_id":"ck3mgo4l6000tzmy28y7tel1c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、Lua加入工程\"><a href=\"#一、Lua加入工程\" class=\"headerlink\" title=\"一、Lua加入工程\"></a>一、Lua加入工程</h2><ul>\n<li>1)官方下载源码，解压；</li>\n<li>2)使用VS或XCode或其他IDE新建一个“hello worde”的C++工程；</li>\n<li>3)将lua源码加入工程目录中，我的测试目录结构如下，</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── lua</span><br><span class=\"line\">│   ├── Makefile</span><br><span class=\"line\">│   ├── README</span><br><span class=\"line\">│   ├── doc</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── main.cpp</span><br><span class=\"line\">└── main.lua</span><br></pre></td></tr></table></figure>\n<p>./lua即为lua源码包解压出来的东西,lua的源码文件在lua/src目录下，将lua/src下的文件除Makefile、lua.c<font color=\"lightgray\">(有一个main函数，这是lua的解释器)</font>、luac.c<font color=\"lightgray\">(lua编译器，编译后的lua脚本可被更高效率的使用)</font>外的其他源码文件都加入到helloworld的工程中，当然，可以在工程中增加一个”luasrc”的文件筛选器，将要加入的lua源码文件都放在该文件筛选器下，便于工程结构的分类管理。<br>此时在main.cpp中，还未加入lua的引用，先编译一次，应该可以编译通过main.cpp及lua的源码文件。</p>\n<ul>\n<li>4)将lua引入C++</li>\n</ul>\n<p>示例main.cpp，再编译一次，应该可以编译成功，示例程序MyLua可用来执行指定的lua脚本的文件。<br><img src=\"http://pic.xrr.fun/blog/20160521/Snip20160521_2.png\" alt=\"mian.cpp code\"></p>\n<h2 id=\"二、变量\"><a href=\"#二、变量\" class=\"headerlink\" title=\"二、变量\"></a>二、变量</h2><h3 id=\"全局-虚拟机对多文件全局\"><a href=\"#全局-虚拟机对多文件全局\" class=\"headerlink\" title=\"全局(虚拟机对多文件全局)\"></a>全局(虚拟机对多文件全局)</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>就理解为是lua_State的全局变量x，对所有文件都通用。</p>\n<h3 id=\"本地-虚拟机对单文件局部-（local关键字修饰）\"><a href=\"#本地-虚拟机对单文件局部-（local关键字修饰）\" class=\"headerlink\" title=\"本地(虚拟机对单文件局部)（local关键字修饰）\"></a>本地(虚拟机对单文件局部)（local关键字修饰）</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> y = <span class=\"number\">54321</span></span><br></pre></td></tr></table></figure>\n<p>就理解为是lua_State在某个文件里的变量y，仅在那个文件中可用。</p>\n<h2 id=\"三、变量与类型\"><a href=\"#三、变量与类型\" class=\"headerlink\" title=\"三、变量与类型\"></a>三、变量与类型</h2><p>Lua是动态类型语言，变量不要类型定义,只需要为变量赋值,给变量赋值了什么类型，变量就是什么类型。</p>\n<p>例如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--变量类型</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> boolean bv = <span class=\"number\">0.0</span></span><br><span class=\"line\">bv = x &gt; <span class=\"number\">250</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> bv <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" true\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" false\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">randomseed</span>(<span class=\"built_in\">os</span>.<span class=\"built_in\">time</span>())  </span><br><span class=\"line\">bv = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>(<span class=\"number\">500</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> bv &gt; <span class=\"number\">250</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" &gt; 250\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" &lt;= 250\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"bv -&gt; string\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"comment\">--bv = bv + 1\t\t\t\t--非法的操作，无法将不能转化为数值的字符串用于算术计算</span></span><br><span class=\"line\"><span class=\"comment\">--print(\"bv is \", bv)</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"0xEF\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = bv + <span class=\"number\">1</span>\t\t\t\t\t<span class=\"comment\">--在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--number</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"0xEF\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\">bv = <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"%s%s\"</span>, bv, <span class=\"string\">\"kkkl\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"0xEF\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"%d%s\"</span>, bv, <span class=\"string\">\"kkkl\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bv is \tfalse\t false</span><br><span class=\"line\">bv is \t231\t &lt;= 250</span><br><span class=\"line\">bv is \tbv -&gt; string</span><br><span class=\"line\">bv is \t0xEF</span><br><span class=\"line\">string</span><br><span class=\"line\">bv is \t240.0</span><br><span class=\"line\">number</span><br><span class=\"line\">bv is \t0xEF</span><br><span class=\"line\">bv is \t0xEFkkkl</span><br><span class=\"line\">string</span><br><span class=\"line\">bv is \t0xEF</span><br><span class=\"line\">string</span><br><span class=\"line\">bv is \t239kkkl</span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、控制语句\"><a href=\"#四、控制语句\" class=\"headerlink\" title=\"四、控制语句\"></a>四、控制语句</h2><h3 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">randomseed</span>(<span class=\"built_in\">os</span>.<span class=\"built_in\">time</span>())  </span><br><span class=\"line\">x = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>(<span class=\"number\">500</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"x is\"</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> x &lt; <span class=\"number\">100</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [0, 100)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">200</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [100, 200)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x == <span class=\"number\">250</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"中彩票了，250\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">300</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [200, 250)U(250, 300)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">400</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [300, 400)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">500</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [400, 500)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x == <span class=\"number\">500</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x == 500\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x is \"</span>, x)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0.1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"for: i is\"</span>, i)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">2</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"while: i is \"</span>, i)</span><br><span class=\"line\">    i = i + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"repeat循环\"><a href=\"#repeat循环\" class=\"headerlink\" title=\"repeat循环\"></a>repeat循环</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"keyword\">repeat</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"repeat: i is \"</span>, i)</span><br><span class=\"line\">    i = i + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"keyword\">until</span> i &gt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五、表、元表、元方法\"><a href=\"#五、表、元表、元方法\" class=\"headerlink\" title=\"五、表、元表、元方法\"></a>五、表、元表、元方法</h2><p>万能的表，表之于LUA的地位应该就相当于类之于C++了吧，之前在理解元表与元方法上还有许多模糊的地方。看视频教材，也没有说的很清楚，遂决定抛弃视频教材，还是看看官方的手册比较靠谱点。</p>\n<p>表、元表、元方法的关系简单理解应该就是，元表中定义了元方法，或者说元方法就是元表的元素，表使用setmetatable关联元表，表就可以调用元表中的元方法了，而元表的本质也还是表，所以任意表都可以做元表，包括表做自己的元表，可见元表应该是一个相对的概念。</p>\n<p>剩下需要重点学习一下的就是元方法了。</p>\n<h3 id=\"操作符”重载”的元方法\"><a href=\"#操作符”重载”的元方法\" class=\"headerlink\" title=\"操作符”重载”的元方法\"></a>操作符”重载”的元方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__add</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 + 操作符, a + b</span></span><br><span class=\"line\"><span class=\"built_in\">__sub</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 - 操作符, a - b</span></span><br><span class=\"line\"><span class=\"built_in\">__mul</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 * 操作符, a * b</span></span><br><span class=\"line\"><span class=\"built_in\">__div</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 / 操作符, a / b</span></span><br><span class=\"line\"><span class=\"built_in\">__unm</span>\t<span class=\"comment\">-- function (a)\t\t\t--对应 -(相反数)操作符, -a</span></span><br><span class=\"line\"><span class=\"built_in\">__mod</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 % 取模操作符, a % b</span></span><br><span class=\"line\"><span class=\"built_in\">__pow</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 ^ 乘幂操作符, a ^ b</span></span><br><span class=\"line\"><span class=\"built_in\">__call</span>\t<span class=\"comment\">-- function (tbl, ...)\t--对应 () 操作符, tbl(...)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">__eq</span>\t<span class=\"comment\">-- function (a, b)\t--对应 == 操作符, t1 == t2</span></span><br><span class=\"line\"><span class=\"built_in\">__lt</span>\t<span class=\"comment\">-- function (a, b)\t--对应 &lt; 操作符, t1 &lt; t2</span></span><br><span class=\"line\"><span class=\"built_in\">__le</span>\t<span class=\"comment\">-- function (a, b)\t--对应 &lt;= 操作符 t1 &lt;= t2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"库定义的元方法\"><a href=\"#库定义的元方法\" class=\"headerlink\" title=\"库定义的元方法\"></a>库定义的元方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__tostring</span>\t\t<span class=\"comment\">-- function (tbl) --例如print(tbl) 时，若tbl的元表中定义了__tostring元方法，则自动调用该元方法取自定义的tostring结果(与java中tostring目的相同)</span></span><br><span class=\"line\"><span class=\"built_in\">__metatable</span>\t\t<span class=\"comment\">-- 给__metatable赋值后，再对主表setmetatable其他元表时会报错，保护主表的元表不被改变，getmetatable会返回__metatable字段值，隐藏元表</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table访问-赋值的元方法\"><a href=\"#table访问-赋值的元方法\" class=\"headerlink\" title=\"table访问/赋值的元方法\"></a>table访问/赋值的元方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__index</span>\t\t<span class=\"comment\">-- table变量或function (tbl, key)\t\t-- tbl[key]不存在时，将调用__index获取tbl[key]的返回值(mt.__index = mt,结果即为tbl[key]不存在时就取mt[key]做tbl[key]的值)</span></span><br><span class=\"line\"><span class=\"built_in\">__newindex</span>\t<span class=\"comment\">-- table变量或function (tbl, key, val)\t-- 赋值val给tbl[key]时，若tbl[key]不存在，则会调用__newindex(tbl, key, val)处理替代默认的创建tbl[key]并赋值val的处理</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> mt = &#123;&#125;</span><br><span class=\"line\">mt.name = <span class=\"string\">\"defaultName\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.new</span><span class=\"params\">(l)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> set = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(set, mt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(l) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tset[v] = <span class=\"literal\">true</span>\t\t\t<span class=\"comment\">--将集合的元素作为key保存，避免查重检验</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> set</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--求并集</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.union</span><span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> res = Set.new&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tres[k] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(b) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tres[k] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--求交集</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.intersection</span><span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> res = Set.new&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tres[k] = b[k]\t\t<span class=\"comment\">--只有a[k]、b[k]都不是nil时，res[k]才不是nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.tostring</span><span class=\"params\">(set)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> l = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tl[#l + <span class=\"number\">1</span>] = k</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span> .. <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(l, <span class=\"string\">\", \"</span>) .. <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.print</span><span class=\"params\">(s)</span></span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(Set.<span class=\"built_in\">tostring</span>(s))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = Set.new&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">s2 = Set.new&#123;<span class=\"number\">30</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mt)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"s1的元表\"</span>, <span class=\"built_in\">getmetatable</span>(s1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"s2的元表\"</span>, <span class=\"built_in\">getmetatable</span>(s2))</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s1)</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--算术类元方法</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__add</span> = Set.union</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s1 + s2)</span><br><span class=\"line\"></span><br><span class=\"line\">mt.<span class=\"built_in\">__mul</span> = Set.intersection</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>((s1+s2)*s1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--关系类元方法</span></span><br><span class=\"line\"><span class=\"comment\">-- &lt;=</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__le</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b[k] <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>\t<span class=\"comment\">--如果a中有，b中没有就返回false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>\t<span class=\"comment\">--a中有的，b中都有，则认为a &lt;= b</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- &lt;</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__lt</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> <span class=\"keyword\">not</span>(b &lt;= a)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ==</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__eq</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> b &lt;= a</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt; s2, s2 &gt; s1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt;= s2, s2 &gt;= s1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 == s2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1*s2 &lt;= s1+s2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1*s2 &lt; s1+s2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--库定义的元方法</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__tostring</span> = Set.<span class=\"built_in\">tostring</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1, s2, s1+s2, s1*s2)</span><br><span class=\"line\"></span><br><span class=\"line\">mt.<span class=\"built_in\">__metatable</span> = <span class=\"string\">\"not your business\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(s1)) <span class=\"comment\">--设置了__metatable后，getmetatable会返回该字段值，隐藏元表</span></span><br><span class=\"line\"><span class=\"comment\">--setmetatable(s1)\t\t--设置了__metatable后，setmetatable会报错，保护元表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--table访问的元方法</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__index</span> = mt</span><br><span class=\"line\"><span class=\"comment\">--mt.__index = function (table, key)</span></span><br><span class=\"line\"><span class=\"comment\">--\treturn mt[key]</span></span><br><span class=\"line\"><span class=\"comment\">--end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.name = <span class=\"string\">\"s1 table\"</span></span><br><span class=\"line\">s2.name = <span class=\"string\">\"s2 table\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1.name, s2.name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s2.name, s1.name)</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、类\"><a href=\"#六、类\" class=\"headerlink\" title=\"六、类\"></a>六、类</h2><p>实际lua中应该没有类的概念，而是使用原型的概念来组织对象间的共享行为。原型也是一种常规对象，当其他对象遇到未知操作时就在这个对象的原型对象中寻找这个未知操作的定义。这样元表的作用就和原型的作用很类似，所以就可以使用元表来实现lua的面向对象编程，原型也就成了元表在lua面向对象编程时的代名词。</p>\n<h3 id=\"继承和多重继承\"><a href=\"#继承和多重继承\" class=\"headerlink\" title=\"继承和多重继承\"></a>继承和多重继承</h3><p>使用<code>setmetatable(Super, Base)</code>和<code>Base.__index = Base</code>来模拟继承的特性。</p>\n<p>使用<code>setmetatable(Super, {__index = function (t, k) return search(k, {Base1, Base2}); end})</code>来模拟多重继承的特性。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--lua面向對象編程的demo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--原型定義</span></span><br><span class=\"line\">Account = &#123;balance = <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:new</span><span class=\"params\">(o)</span></span></span><br><span class=\"line\">\to = o <span class=\"keyword\">or</span> &#123;&#125;; <span class=\"comment\">--如果用戶沒有提供table就創建一個</span></span><br><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, self);</span><br><span class=\"line\">\tself.<span class=\"built_in\">__index</span> = self;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:deposit</span><span class=\"params\">(v)</span></span>\t<span class=\"comment\">--存</span></span><br><span class=\"line\">\tself.balance = self.balance + v;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"deposit\"</span>, self.balance);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:withdraw</span><span class=\"params\">(v)</span></span> <span class=\"comment\">--取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v &gt; self.balance <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">\"insufficient funds\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">--如果self中原先不存在balance，就会先用Account里的balance-v，然后将结果保存到新建的self.balance元素里</span></span><br><span class=\"line\">\tself.balance = self.balance - v; </span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"withdraw\"</span>, self.balance);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--继承</span></span><br><span class=\"line\">SpecialAccount = Account:new();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialAccount:getLimit</span><span class=\"params\">()</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.limit <span class=\"keyword\">or</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialAccount:withdraw</span><span class=\"params\">(v)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> self.balance - v &lt; -self:getLimit() <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">\"insufficient funds\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tself.balance = self.balance - v;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"withdraw\"</span>, self.balance);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">a3 = Account:new&#123;balance = <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">a4 = Account:new();</span><br><span class=\"line\">s1 = SpecialAccount:new&#123;limit = <span class=\"number\">1000.00</span>&#125;;</span><br><span class=\"line\">s2 = SpecialAccount:new();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Account, a1, a2, a3, a4, <span class=\"built_in\">getmetatable</span>(a4), <span class=\"built_in\">getmetatable</span>(s1));</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Account, a1, a2, a3, a4, <span class=\"built_in\">getmetatable</span>(a4), <span class=\"built_in\">getmetatable</span>(s1));</span><br><span class=\"line\"></span><br><span class=\"line\">a3:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\">a4:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\">s1:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\">s2:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--多重继承</span></span><br><span class=\"line\">Named = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Named:getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.name;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Named:setName</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">\tself.name = n;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span><span class=\"params\">(k, plist)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, z <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(plist) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">local</span> v = plist[i][k]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> v <span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createClass</span><span class=\"params\">(a, b)</span></span>\t<span class=\"comment\">--多重继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> c = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">local</span> parents = &#123;a, b&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(c, &#123;<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k)</span></span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> search(k, parents);</span><br><span class=\"line\">\t<span class=\"keyword\">end</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tc.<span class=\"built_in\">__index</span> = c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c:new</span><span class=\"params\">(o)</span></span></span><br><span class=\"line\">\t\to = o <span class=\"keyword\">or</span> &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setmetatable</span>(o, self);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">NamedAccount = createClass(Account, Named);</span><br><span class=\"line\">SpecialNamedAccount = createClass(SpecialAccount, Named);</span><br><span class=\"line\"></span><br><span class=\"line\">acnt1 = NamedAccount:new&#123;name = <span class=\"string\">\"Paul\"</span>&#125;;</span><br><span class=\"line\">acnt2 = SpecialNamedAccount:new&#123;name = <span class=\"string\">\"Ann\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(acnt1:getName(), acnt1.balance);</span><br><span class=\"line\">acnt2:deposit(<span class=\"number\">200</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(acnt2:getName(), acnt2.balance, acnt2:getLimit());</span><br></pre></td></tr></table></figure>\n<h3 id=\"私密性\"><a href=\"#私密性\" class=\"headerlink\" title=\"私密性\"></a>私密性</h3><p>虽然可以模拟，但对lua的设计目的而言，私密性似乎不非常重要，暂时一瞥掠过。</p>\n<h2 id=\"七、与C-C-交互\"><a href=\"#七、与C-C-交互\" class=\"headerlink\" title=\"七、与C/C++交互\"></a>七、与C/C++交互</h2><p>C程序可以使用lua库来执行lua代码，lua代码也可以调用在lua环境中注册了的用C语言实现的函数。<br>lua的C API包含读写lua全局变量、调用lua函数、运行一段lua代码、注册C函数供lua调用等。<br>lua.h(lua.hpp)声明了Lua提供的基础函数，包括创建Lua环境、调用Lua函数、读写Lua环境中的全局变量以及注册供lua调用的函数等，函数都以lua_开头；<br>luaxlib.h声明了辅助库(auxiliary library，auxlib)提供的函数，都以luaL_开头。辅助库并没有直接访问Lua的内部，而是都以官方基础API来完成所有工作。<br>Lua库中没有定义任何全局变量，而是将所有的状态信息都保存在动态结构lua_State中，所有lua C API的调用都要传入这个动态结构的指针。如果简单的将lua_State看作栈的话，这个栈有可以看作有两套引索序号，一套是从栈底到栈顶依次是1到N递增(绝对引索)，另一套是从栈顶到栈底的引索序号-1到-N的递减(相对引索)。所以可以直接使用引索值-1和1分别访问栈顶和栈底元素。</p>\n<h3 id=\"环境创建\"><a href=\"#环境创建\" class=\"headerlink\" title=\"环境创建\"></a>环境创建</h3><p><code>lua_State</code>是C程序与lua交互编程中最常用的数据结构，要C程序读取Lua中的变量，也是先调用lua的CAPI,将lua中的数据压入lua_State栈中,然后C程序再通过lua的CAPI读取lua_State栈中的元素,如此间接读取到lua的变量值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LUALIB_API lua_State *(luaL_newstate) (<span class=\"keyword\">void</span>);</span><br><span class=\"line\"><span class=\"function\">LUALIB_API <span class=\"title\">void</span> <span class=\"params\">(luaL_openlib)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *libname, <span class=\"keyword\">const</span> luaL_Reg *l, <span class=\"keyword\">int</span> nup)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUALIB_API <span class=\"title\">void</span> <span class=\"params\">(luaL_openlibs)</span> <span class=\"params\">(lua_State *L)</span></span>;\t<span class=\"comment\">// open all previous libraries</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"压元素入栈-增\"><a href=\"#压元素入栈-增\" class=\"headerlink\" title=\"压元素入栈(增)\"></a>压元素入栈(增)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* push functions (C -&gt; stack) */</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>        <span class=\"params\">(lua_pushnil)</span> <span class=\"params\">(lua_State *L)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>        <span class=\"params\">(lua_pushnumber)</span> <span class=\"params\">(lua_State *L, lua_Number n)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>        <span class=\"params\">(lua_pushinteger)</span> <span class=\"params\">(lua_State *L, lua_Integer n)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushlstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">size_t</span> len);\t<span class=\"comment\">// s字符串中间可任意包含'\\0'或不以'\\0'结尾</span></span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s);\t\t\t\t\t<span class=\"comment\">// s字符串中间不可包含'\\0'且必须以'\\'结尾</span></span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushvfstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *fmt, va_list argp);</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushfstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *fmt, ...);</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushcclosure)</span> <span class=\"params\">(lua_State *L, lua_CFunction fn, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushboolean)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushlightuserdata)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">void</span> *p)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>   <span class=\"params\">(lua_pushthread)</span> <span class=\"params\">(lua_State *L)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pushcfunction(L,f)\tlua_pushcclosure(L, (f), 0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pushliteral(L, s)\tlua_pushstring(L, <span class=\"meta-string\">\"\"</span> s)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pushglobaltable(L)  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS)\t\t<span class=\"comment\">// ?</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查栈大小，调用参数很多的函数时可以检查一下栈空间是否还足够</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_checkstack)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问栈元素-查\"><a href=\"#访问栈元素-查\" class=\"headerlink\" title=\"访问栈元素(查)\"></a>访问栈元素(查)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* access functions (stack -&gt; C) */</span></span><br><span class=\"line\"><span class=\"comment\">// 判断L中序号为idx的元素能否转为函数所指的类型，及判断栈中的元素的类型</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isnumber)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isstring)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_iscfunction)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isinteger)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isuserdata)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_type)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>     *(lua_typename) (lua_State *L, <span class=\"keyword\">int</span> tp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isfunction(L,n)\t(lua_type(L, (n)) == LUA_TFUNCTION)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_istable(L,n)\t(lua_type(L, (n)) == LUA_TTABLE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_islightuserdata(L,n)\t(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isnil(L,n)\t\t(lua_type(L, (n)) == LUA_TNIL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isboolean(L,n)\t(lua_type(L, (n)) == LUA_TBOOLEAN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isthread(L,n)\t(lua_type(L, (n)) == LUA_TTHREAD)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isnone(L,n)\t\t(lua_type(L, (n)) == LUA_TNONE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isnoneornil(L, n)\t(lua_type(L, (n)) &lt;= 0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回L中序号为idx的元素返回为函数指定类型的结果</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">lua_Number</span>      <span class=\"params\">(lua_tonumberx)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">int</span> *isnum)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">lua_Integer</span>     <span class=\"params\">(lua_tointegerx)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">int</span> *isnum)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_toboolean)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>     *(lua_tolstring) (lua_State *L, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">size_t</span> *len);</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">size_t</span>          <span class=\"params\">(lua_rawlen)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">lua_CFunction</span>   <span class=\"params\">(lua_tocfunction)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">void</span>\t       *(lua_touserdata) (lua_State *L, <span class=\"keyword\">int</span> idx);</span><br><span class=\"line\">LUA_API lua_State      *(lua_tothread) (lua_State *L, <span class=\"keyword\">int</span> idx);</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>     *(lua_topointer) (lua_State *L, <span class=\"keyword\">int</span> idx);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_tostring(L,i)\tlua_tolstring(L, (i), NULL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_tonumber(L,i)\tlua_tonumberx(L,(i),NULL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_tointeger(L,i)\tlua_tointegerx(L,(i),NULL)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他栈元素操作\"><a href=\"#其他栈元素操作\" class=\"headerlink\" title=\"其他栈元素操作\"></a>其他栈元素操作</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>   <span class=\"params\">(lua_gettop)</span> <span class=\"params\">(lua_State *L)</span></span>;\t\t\t<span class=\"comment\">// 获取栈顶元素的绝对引索值，即获取栈中元素的个数</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_settop)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;\t<span class=\"comment\">// 设置的位置比栈顶的位置大,则增长的元素值为nil,若比栈顶的位置小,则多余的元素被丢弃.lua_settop(L, 0)会清空栈L。</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushvalue)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;\t<span class=\"comment\">// 将idx上的栈元素的副本压入到栈顶</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pop(L,n)\t\tlua_settop(L, -(n)-1)\t\t<span class=\"comment\">// 栈弹出(清除)n个元素</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_insert(L,idx)\tlua_rotate(L, (idx), 1)\t\t<span class=\"comment\">// idx上的元素到栈顶的元素的一个循环位移</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_remove(L,idx)\t(lua_rotate(L, (idx), -1), lua_pop(L, 1)) \t<span class=\"comment\">// 将栈顶到idx的元素一个循环位移，然后将栈顶元素弹出，相当于删除了原先idx的元素</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_replace(L,idx)\t(lua_copy(L, -1, (idx)), lua_pop(L, 1))\t\t<span class=\"comment\">// 拷贝栈顶的元素到指定idx的元素上，然后将栈顶元素弹出</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行lua程序\"><a href=\"#执行lua程序\" class=\"headerlink\" title=\"执行lua程序\"></a>执行lua程序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译用户输入的每行内容，并将编译后的程序块压入栈中，返回0表示没有错误。</span></span><br><span class=\"line\"><span class=\"function\">LUALIB_API <span class=\"title\">int</span> <span class=\"params\">(luaL_loadbufferx)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buff, <span class=\"keyword\">size_t</span> sz, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *mode)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> luaL_loadbuffer(L,s,sz,n)\tluaL_loadbufferx(L,s,sz,n,NULL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 'load' and 'call' functions (load and run Lua code) */</span></span><br><span class=\"line\"><span class=\"comment\">// 将程序块从栈中弹出，并在保护模式下运行弹出的程序块，返回0表示没有错误，若发生错误，则向栈中也入一条错误信息，用lua_tostring可以获取这条信息，获取之后使用lua_pop将这条错误信息从栈中删除。</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span> <span class=\"params\">(lua_callk)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> nargs, <span class=\"keyword\">int</span> nresults, lua_KContext ctx, lua_KFunction k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_pcallk)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> nargs, <span class=\"keyword\">int</span> nresults, <span class=\"keyword\">int</span> errfunc, lua_KContext ctx, lua_KFunction k)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_call(L,n,r)\t\tlua_callk(L, (n), (r), 0, NULL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pcall(L,n,r,f)\tlua_pcallk(L, (n), (r), (f), 0, NULL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_load)</span> <span class=\"params\">(lua_State *L, lua_Reader reader, <span class=\"keyword\">void</span> *dt, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *chunkname, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *mode)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_dump)</span> <span class=\"params\">(lua_State *L, lua_Writer writer, <span class=\"keyword\">void</span> *data, <span class=\"keyword\">int</span> strip)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> luaL_dofile(L, fn)\t\t(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> luaL_dostring(L, s)\t\t(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"lua扩展应用程序\"><a href=\"#lua扩展应用程序\" class=\"headerlink\" title=\"lua扩展应用程序\"></a>lua扩展应用程序</h3><h4 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h4><p>lua中定义一些全局变量，应用程序调用api将lua中的全局变量值压到L栈中，再通过api从L栈中将该值读取出来，即到读取配置参数的目的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaStackDump</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lua_gettop(L); i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> iType = lua_type(L, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (iType)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TSTRING:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TBOOLEAN:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TNUMBER:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TNIL:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; lua_typename(L, iType) &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; lua_tostring(L, i) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; lua_typename(L, iType) &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *fmt, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tva_list argp;</span><br><span class=\"line\">\tva_start(argp, fmt);</span><br><span class=\"line\">\t<span class=\"built_in\">vfprintf</span>(<span class=\"built_in\">stderr</span>, fmt, argp);</span><br><span class=\"line\">\tva_end(argp);</span><br><span class=\"line\"></span><br><span class=\"line\">\tluaStackDump(L);</span><br><span class=\"line\">\tlua_close(L);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"app exit.\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaGetGlobalInt</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strVarName, <span class=\"keyword\">int</span> &amp;iRet)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strVarName.c_str());\t\t<span class=\"comment\">// 先读取全局变量值到栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lua_isnumber(L, <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"'%s' should be a number\\n\"</span>, strVarName.c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tiRet = (<span class=\"keyword\">int</span>)lua_tointeger(L, <span class=\"number\">-1</span>);\t\t\t<span class=\"comment\">// 然后再从栈中读取元素的值，间接读取lua全局变量的值</span></span><br><span class=\"line\">\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; strVarName &lt;&lt; <span class=\"string\">\" is \"</span> &lt;&lt; iRet &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaGetTableFiledValue</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strTblName, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strFldName, <span class=\"built_in\">string</span> &amp;strValue)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strTblName.c_str());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lua_istable(L, <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"%s is not a table\\n\"</span>, strTblName.c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlua_pushstring(L, strFldName.c_str());</span><br><span class=\"line\">\tlua_gettable(L, <span class=\"number\">-2</span>);</span><br><span class=\"line\">\tstrValue = lua_tostring(L, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\tlua_pop(L, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; strTblName &lt;&lt; <span class=\"string\">\"[\"</span> &lt;&lt; strFldName &lt;&lt; <span class=\"string\">\"] is \"</span> &lt;&lt; strValue &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaGetTableFiledValue</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strTblName, <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrFldsName, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrValues)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strTblName.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lua_istable(L, <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"%s is not a table\\n\"</span>, strTblName.c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vctstrFldsName.size(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlua_pushstring(L, vctstrFldsName[i].c_str());</span><br><span class=\"line\">\t\tlua_gettable(L, <span class=\"number\">-2</span>);</span><br><span class=\"line\">\t\tvctstrValues.push_back(lua_tostring(L, <span class=\"number\">-1</span>));</span><br><span class=\"line\">\t\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-C-程序调用lua脚本\"><a href=\"#C-C-程序调用lua脚本\" class=\"headerlink\" title=\"C/C++程序调用lua脚本\"></a>C/C++程序调用lua脚本</h4><p>lua中定义好函数后，C代码中使用api获取lua的函数对象压入到L栈中，然后再向L栈中按顺序压入函数参数，然后调用lua_pcall指定函数调用的参数个数和返回值个数,lua_pcall调用后，将会将之前压入的L栈的函数对象与参数弹出，然后将函数执行的返回值或函数执行失败的错误信息压入L栈中。C代码通过API从栈中将返回值或错误信息读取出来，然后需要C代码调用调用lua_pop里显示清理栈，恢复L栈至函数调用前状态。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaCallLuaFunc</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strFuncName, <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrParams, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrRets)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strFuncName.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vctstrParams.size(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlua_pushstring(L, vctstrParams[i].c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (lua_pcall(L, vctstrParams.size(), vctstrRets.size(), <span class=\"literal\">NULL</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"error running function getSize: %s\\n\"</span>, lua_tostring(L, <span class=\"number\">-1</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = vctstrRets.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvctstrRets[i] = lua_tostring(L, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call \"</span> &lt;&lt; strFuncName &lt;&lt; <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vctstrParams.size() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\\"\"</span> &lt;&lt; vctstrParams[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; vctstrParams.size(); i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\", \\\"\"</span> &lt;&lt; vctstrParams[i] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\") returns (\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vctstrRets.size() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\\"\"</span> &lt;&lt; vctstrRets[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; vctstrRets.size(); i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\", \\\"\"</span> &lt;&lt; vctstrRets[i] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaCallLuaFunc2</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cfunc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cfrm, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tva_list vl;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> narg = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nres = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tva_start(vl, cfrm);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 压入函数</span></span><br><span class=\"line\">\tlua_getglobal(L, cfunc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 压入参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (narg = <span class=\"number\">0</span>; *cfrm != <span class=\"string\">'\\0'</span>; narg++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tluaL_checkstack(L, <span class=\"number\">1</span>, <span class=\"string\">\"too many arguments\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (*cfrm++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'f'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlua_pushnumber(L, va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">double</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlua_pushinteger(L, va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlua_pushstring(L, va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'&gt;'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> endargs;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\terror(L, <span class=\"string\">\"invalid option (%c)\"</span>, *(cfrm - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">endargs:</span><br><span class=\"line\">\t<span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> irescnt = nres = <span class=\"built_in\">strlen</span>(cfrm);\t<span class=\"comment\">// 期望的结果数量</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (lua_pcall(L, narg, nres, <span class=\"number\">0</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"error calling %s:%s\"</span>, cfunc, lua_tostring(L, <span class=\"number\">-1</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取返回值</span></span><br><span class=\"line\">\tnres = -nres;\t<span class=\"comment\">// 第一个返回结果的栈位置</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (*cfrm)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (*cfrm++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'f'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!lua_isnumber(L, nres))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\terror(L, <span class=\"string\">\"wrong result type\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t*va_arg(vl, <span class=\"keyword\">double</span> *) = lua_tonumber(L, nres);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!lua_isinteger(L, nres))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\terror(L, <span class=\"string\">\"wrong result type\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t*va_arg(vl, <span class=\"keyword\">int</span> *) = (<span class=\"keyword\">int</span>)lua_tointeger(L, nres);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!lua_isstring(L, nres))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\terror(L, <span class=\"string\">\"wrong result type\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t*va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **) = lua_tostring(L, nres);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\terror(L, <span class=\"string\">\"invalid option (%c)\"</span>, *(cfrm<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnres++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlua_pop(L, irescnt);</span><br><span class=\"line\">\tva_end(vl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lua脚本调用C-C\"><a href=\"#lua脚本调用C-C\" class=\"headerlink\" title=\"lua脚本调用C/C++\"></a>lua脚本调用C/C++</h3><h4 id=\"lua脚本调用C-C-函数\"><a href=\"#lua脚本调用C-C-函数\" class=\"headerlink\" title=\"lua脚本调用C/C++函数\"></a>lua脚本调用C/C++函数</h4><p>所有注册到lua中的函数都具有相同的类型，或者可以说只有一种特定类型的函数才能注册到lua中，<br>该函数类型lua.h中定义如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*lua_CFunction)</span> <span class=\"params\">(lua_State *L)</span></span>;\t<span class=\"comment\">// Type for C functions registered with Lua</span></span><br></pre></td></tr></table></figure>\n<p>通过使用<code>lua_pushcfunction</code>和<code>lua_setglobal</code>两个方法就可以将一个函数注册到lua中，然后就可以在lua中通过使用lua_setglobal设置的globalname来调用到这个C函数了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registCFuncToLua</span><span class=\"params\">(lua_State *L, lua_CFunction pfunc, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strGlobalName)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_pushcfunction(L, pfunc);</span><br><span class=\"line\">\tlua_setglobal(L, strGlobalName.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">l_sin</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> dbl = luaL_checknumber(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\tlua_pushnumber(L, <span class=\"built_in\">sin</span>(dbl));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tregistCFuncToLua(L, l_sin, <span class=\"string\">\"c_sin\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// lua代码中就可以使用c_sin来调用到l_sin函数了</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用C-C-定义LUA模块\"><a href=\"#使用C-C-定义LUA模块\" class=\"headerlink\" title=\"使用C/C++定义LUA模块\"></a>使用C/C++定义LUA模块</h4><p>以下LUA调用C/C++的方法应该可以理解成<code>require &quot;libname&quot;</code>语句的实现原理吧，简单理解就是在将C/C++代码封装成动态库时，若需要生成的动态库可以被lua require后使用，就需要在该动态库中定义一个接口(一个数组+一个函数)；</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* lauxlib.h中luaL_Reg和luaL_register的定义</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">typedef struct luaL_Reg &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tconst char *name;</span></span><br><span class=\"line\"><span class=\"comment\">\tlua_CFunction func;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; luaL_Reg;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#define luaL_register(L,n,l)\t(luaL_openlib(L,(n),(l),0))</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块中函数的定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">l_f1</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">l_f2</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定被lua脚本require时需要被导出的函数</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> luaL_Reg mylib[] = &#123;</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"f1\"</span>, l_f1&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"f2\"</span>, l_f2&#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#123;<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>&#125;\t<span class=\"comment\">// 固定结尾</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">luaopen_mylib</span><span class=\"params\">(lua_State *L)</span>\t\t\t<span class=\"comment\">// lua中`require \"mylib\"`时该函数会被注册与调用</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tluaL_register(L, <span class=\"string\">\"mylib\"</span>, mylib);\t<span class=\"comment\">// 根据\"mylib\"名称创建(或复用)一个table,并用数组mylib中的元素填充这个table,并将这个table压入到L栈中</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t\t\t\t\t\t\t<span class=\"comment\">// 使lua脚本知道栈中已压入table</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lua文件中require \"mylib\"后，就可以通过f1、f2调用到l_f1、l_f2了，可见这也是一种动态库函数不需要被声明导出就可以被外部调用的方法，而且参数个数与类型可变，非常灵活，应该可以实现类似javascript的\"函数重载\"。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Lua加入工程\"><a href=\"#一、Lua加入工程\" class=\"headerlink\" title=\"一、Lua加入工程\"></a>一、Lua加入工程</h2><ul>\n<li>1)官方下载源码，解压；</li>\n<li>2)使用VS或XCode或其他IDE新建一个“hello worde”的C++工程；</li>\n<li>3)将lua源码加入工程目录中，我的测试目录结构如下，</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── lua</span><br><span class=\"line\">│   ├── Makefile</span><br><span class=\"line\">│   ├── README</span><br><span class=\"line\">│   ├── doc</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── main.cpp</span><br><span class=\"line\">└── main.lua</span><br></pre></td></tr></table></figure>\n<p>./lua即为lua源码包解压出来的东西,lua的源码文件在lua/src目录下，将lua/src下的文件除Makefile、lua.c<font color=\"lightgray\">(有一个main函数，这是lua的解释器)</font>、luac.c<font color=\"lightgray\">(lua编译器，编译后的lua脚本可被更高效率的使用)</font>外的其他源码文件都加入到helloworld的工程中，当然，可以在工程中增加一个”luasrc”的文件筛选器，将要加入的lua源码文件都放在该文件筛选器下，便于工程结构的分类管理。<br>此时在main.cpp中，还未加入lua的引用，先编译一次，应该可以编译通过main.cpp及lua的源码文件。</p>\n<ul>\n<li>4)将lua引入C++</li>\n</ul>\n<p>示例main.cpp，再编译一次，应该可以编译成功，示例程序MyLua可用来执行指定的lua脚本的文件。<br><img src=\"http://pic.xrr.fun/blog/20160521/Snip20160521_2.png\" alt=\"mian.cpp code\"></p>\n<h2 id=\"二、变量\"><a href=\"#二、变量\" class=\"headerlink\" title=\"二、变量\"></a>二、变量</h2><h3 id=\"全局-虚拟机对多文件全局\"><a href=\"#全局-虚拟机对多文件全局\" class=\"headerlink\" title=\"全局(虚拟机对多文件全局)\"></a>全局(虚拟机对多文件全局)</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>就理解为是lua_State的全局变量x，对所有文件都通用。</p>\n<h3 id=\"本地-虚拟机对单文件局部-（local关键字修饰）\"><a href=\"#本地-虚拟机对单文件局部-（local关键字修饰）\" class=\"headerlink\" title=\"本地(虚拟机对单文件局部)（local关键字修饰）\"></a>本地(虚拟机对单文件局部)（local关键字修饰）</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> y = <span class=\"number\">54321</span></span><br></pre></td></tr></table></figure>\n<p>就理解为是lua_State在某个文件里的变量y，仅在那个文件中可用。</p>\n<h2 id=\"三、变量与类型\"><a href=\"#三、变量与类型\" class=\"headerlink\" title=\"三、变量与类型\"></a>三、变量与类型</h2><p>Lua是动态类型语言，变量不要类型定义,只需要为变量赋值,给变量赋值了什么类型，变量就是什么类型。</p>\n<p>例如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--变量类型</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> boolean bv = <span class=\"number\">0.0</span></span><br><span class=\"line\">bv = x &gt; <span class=\"number\">250</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> bv <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" true\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" false\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">randomseed</span>(<span class=\"built_in\">os</span>.<span class=\"built_in\">time</span>())  </span><br><span class=\"line\">bv = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>(<span class=\"number\">500</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> bv &gt; <span class=\"number\">250</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" &gt; 250\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv, <span class=\"string\">\" &lt;= 250\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"bv -&gt; string\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"comment\">--bv = bv + 1\t\t\t\t--非法的操作，无法将不能转化为数值的字符串用于算术计算</span></span><br><span class=\"line\"><span class=\"comment\">--print(\"bv is \", bv)</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"0xEF\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = bv + <span class=\"number\">1</span>\t\t\t\t\t<span class=\"comment\">--在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--number</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"0xEF\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\">bv = <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"%s%s\"</span>, bv, <span class=\"string\">\"kkkl\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"string\">\"0xEF\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br><span class=\"line\"></span><br><span class=\"line\">bv = <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"%d%s\"</span>, bv, <span class=\"string\">\"kkkl\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"bv is \"</span>, bv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(bv))\t\t\t\t<span class=\"comment\">--string</span></span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bv is \tfalse\t false</span><br><span class=\"line\">bv is \t231\t &lt;= 250</span><br><span class=\"line\">bv is \tbv -&gt; string</span><br><span class=\"line\">bv is \t0xEF</span><br><span class=\"line\">string</span><br><span class=\"line\">bv is \t240.0</span><br><span class=\"line\">number</span><br><span class=\"line\">bv is \t0xEF</span><br><span class=\"line\">bv is \t0xEFkkkl</span><br><span class=\"line\">string</span><br><span class=\"line\">bv is \t0xEF</span><br><span class=\"line\">string</span><br><span class=\"line\">bv is \t239kkkl</span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、控制语句\"><a href=\"#四、控制语句\" class=\"headerlink\" title=\"四、控制语句\"></a>四、控制语句</h2><h3 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">randomseed</span>(<span class=\"built_in\">os</span>.<span class=\"built_in\">time</span>())  </span><br><span class=\"line\">x = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>(<span class=\"number\">500</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"x is\"</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> x &lt; <span class=\"number\">100</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [0, 100)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">200</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [100, 200)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x == <span class=\"number\">250</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"中彩票了，250\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">300</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [200, 250)U(250, 300)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">400</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [300, 400)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x &lt; <span class=\"number\">500</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x ∈ [400, 500)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> x == <span class=\"number\">500</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x == 500\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"x is \"</span>, x)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0.1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"for: i is\"</span>, i)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">2</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"while: i is \"</span>, i)</span><br><span class=\"line\">    i = i + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"repeat循环\"><a href=\"#repeat循环\" class=\"headerlink\" title=\"repeat循环\"></a>repeat循环</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"keyword\">repeat</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"repeat: i is \"</span>, i)</span><br><span class=\"line\">    i = i + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"keyword\">until</span> i &gt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五、表、元表、元方法\"><a href=\"#五、表、元表、元方法\" class=\"headerlink\" title=\"五、表、元表、元方法\"></a>五、表、元表、元方法</h2><p>万能的表，表之于LUA的地位应该就相当于类之于C++了吧，之前在理解元表与元方法上还有许多模糊的地方。看视频教材，也没有说的很清楚，遂决定抛弃视频教材，还是看看官方的手册比较靠谱点。</p>\n<p>表、元表、元方法的关系简单理解应该就是，元表中定义了元方法，或者说元方法就是元表的元素，表使用setmetatable关联元表，表就可以调用元表中的元方法了，而元表的本质也还是表，所以任意表都可以做元表，包括表做自己的元表，可见元表应该是一个相对的概念。</p>\n<p>剩下需要重点学习一下的就是元方法了。</p>\n<h3 id=\"操作符”重载”的元方法\"><a href=\"#操作符”重载”的元方法\" class=\"headerlink\" title=\"操作符”重载”的元方法\"></a>操作符”重载”的元方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__add</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 + 操作符, a + b</span></span><br><span class=\"line\"><span class=\"built_in\">__sub</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 - 操作符, a - b</span></span><br><span class=\"line\"><span class=\"built_in\">__mul</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 * 操作符, a * b</span></span><br><span class=\"line\"><span class=\"built_in\">__div</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 / 操作符, a / b</span></span><br><span class=\"line\"><span class=\"built_in\">__unm</span>\t<span class=\"comment\">-- function (a)\t\t\t--对应 -(相反数)操作符, -a</span></span><br><span class=\"line\"><span class=\"built_in\">__mod</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 % 取模操作符, a % b</span></span><br><span class=\"line\"><span class=\"built_in\">__pow</span>\t<span class=\"comment\">-- function (a, b)\t\t--对应 ^ 乘幂操作符, a ^ b</span></span><br><span class=\"line\"><span class=\"built_in\">__call</span>\t<span class=\"comment\">-- function (tbl, ...)\t--对应 () 操作符, tbl(...)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">__eq</span>\t<span class=\"comment\">-- function (a, b)\t--对应 == 操作符, t1 == t2</span></span><br><span class=\"line\"><span class=\"built_in\">__lt</span>\t<span class=\"comment\">-- function (a, b)\t--对应 &lt; 操作符, t1 &lt; t2</span></span><br><span class=\"line\"><span class=\"built_in\">__le</span>\t<span class=\"comment\">-- function (a, b)\t--对应 &lt;= 操作符 t1 &lt;= t2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"库定义的元方法\"><a href=\"#库定义的元方法\" class=\"headerlink\" title=\"库定义的元方法\"></a>库定义的元方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__tostring</span>\t\t<span class=\"comment\">-- function (tbl) --例如print(tbl) 时，若tbl的元表中定义了__tostring元方法，则自动调用该元方法取自定义的tostring结果(与java中tostring目的相同)</span></span><br><span class=\"line\"><span class=\"built_in\">__metatable</span>\t\t<span class=\"comment\">-- 给__metatable赋值后，再对主表setmetatable其他元表时会报错，保护主表的元表不被改变，getmetatable会返回__metatable字段值，隐藏元表</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"table访问-赋值的元方法\"><a href=\"#table访问-赋值的元方法\" class=\"headerlink\" title=\"table访问/赋值的元方法\"></a>table访问/赋值的元方法</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__index</span>\t\t<span class=\"comment\">-- table变量或function (tbl, key)\t\t-- tbl[key]不存在时，将调用__index获取tbl[key]的返回值(mt.__index = mt,结果即为tbl[key]不存在时就取mt[key]做tbl[key]的值)</span></span><br><span class=\"line\"><span class=\"built_in\">__newindex</span>\t<span class=\"comment\">-- table变量或function (tbl, key, val)\t-- 赋值val给tbl[key]时，若tbl[key]不存在，则会调用__newindex(tbl, key, val)处理替代默认的创建tbl[key]并赋值val的处理</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> mt = &#123;&#125;</span><br><span class=\"line\">mt.name = <span class=\"string\">\"defaultName\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.new</span><span class=\"params\">(l)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> set = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(set, mt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(l) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tset[v] = <span class=\"literal\">true</span>\t\t\t<span class=\"comment\">--将集合的元素作为key保存，避免查重检验</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> set</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--求并集</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.union</span><span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> res = Set.new&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tres[k] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(b) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tres[k] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--求交集</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.intersection</span><span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> res = Set.new&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tres[k] = b[k]\t\t<span class=\"comment\">--只有a[k]、b[k]都不是nil时，res[k]才不是nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.tostring</span><span class=\"params\">(set)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> l = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tl[#l + <span class=\"number\">1</span>] = k</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span> .. <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(l, <span class=\"string\">\", \"</span>) .. <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.print</span><span class=\"params\">(s)</span></span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(Set.<span class=\"built_in\">tostring</span>(s))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = Set.new&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">s2 = Set.new&#123;<span class=\"number\">30</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mt)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"s1的元表\"</span>, <span class=\"built_in\">getmetatable</span>(s1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"s2的元表\"</span>, <span class=\"built_in\">getmetatable</span>(s2))</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s1)</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--算术类元方法</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__add</span> = Set.union</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s1 + s2)</span><br><span class=\"line\"></span><br><span class=\"line\">mt.<span class=\"built_in\">__mul</span> = Set.intersection</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>((s1+s2)*s1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--关系类元方法</span></span><br><span class=\"line\"><span class=\"comment\">-- &lt;=</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__le</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b[k] <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>\t<span class=\"comment\">--如果a中有，b中没有就返回false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>\t<span class=\"comment\">--a中有的，b中都有，则认为a &lt;= b</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- &lt;</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__lt</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> <span class=\"keyword\">not</span>(b &lt;= a)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ==</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__eq</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> b &lt;= a</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt; s2, s2 &gt; s1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt;= s2, s2 &gt;= s1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 == s2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1*s2 &lt;= s1+s2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1*s2 &lt; s1+s2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--库定义的元方法</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__tostring</span> = Set.<span class=\"built_in\">tostring</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1, s2, s1+s2, s1*s2)</span><br><span class=\"line\"></span><br><span class=\"line\">mt.<span class=\"built_in\">__metatable</span> = <span class=\"string\">\"not your business\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(s1)) <span class=\"comment\">--设置了__metatable后，getmetatable会返回该字段值，隐藏元表</span></span><br><span class=\"line\"><span class=\"comment\">--setmetatable(s1)\t\t--设置了__metatable后，setmetatable会报错，保护元表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--table访问的元方法</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__index</span> = mt</span><br><span class=\"line\"><span class=\"comment\">--mt.__index = function (table, key)</span></span><br><span class=\"line\"><span class=\"comment\">--\treturn mt[key]</span></span><br><span class=\"line\"><span class=\"comment\">--end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.name = <span class=\"string\">\"s1 table\"</span></span><br><span class=\"line\">s2.name = <span class=\"string\">\"s2 table\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1.name, s2.name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s2.name, s1.name)</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、类\"><a href=\"#六、类\" class=\"headerlink\" title=\"六、类\"></a>六、类</h2><p>实际lua中应该没有类的概念，而是使用原型的概念来组织对象间的共享行为。原型也是一种常规对象，当其他对象遇到未知操作时就在这个对象的原型对象中寻找这个未知操作的定义。这样元表的作用就和原型的作用很类似，所以就可以使用元表来实现lua的面向对象编程，原型也就成了元表在lua面向对象编程时的代名词。</p>\n<h3 id=\"继承和多重继承\"><a href=\"#继承和多重继承\" class=\"headerlink\" title=\"继承和多重继承\"></a>继承和多重继承</h3><p>使用<code>setmetatable(Super, Base)</code>和<code>Base.__index = Base</code>来模拟继承的特性。</p>\n<p>使用<code>setmetatable(Super, {__index = function (t, k) return search(k, {Base1, Base2}); end})</code>来模拟多重继承的特性。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--lua面向對象編程的demo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--原型定義</span></span><br><span class=\"line\">Account = &#123;balance = <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:new</span><span class=\"params\">(o)</span></span></span><br><span class=\"line\">\to = o <span class=\"keyword\">or</span> &#123;&#125;; <span class=\"comment\">--如果用戶沒有提供table就創建一個</span></span><br><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, self);</span><br><span class=\"line\">\tself.<span class=\"built_in\">__index</span> = self;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:deposit</span><span class=\"params\">(v)</span></span>\t<span class=\"comment\">--存</span></span><br><span class=\"line\">\tself.balance = self.balance + v;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"deposit\"</span>, self.balance);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:withdraw</span><span class=\"params\">(v)</span></span> <span class=\"comment\">--取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v &gt; self.balance <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">\"insufficient funds\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">--如果self中原先不存在balance，就会先用Account里的balance-v，然后将结果保存到新建的self.balance元素里</span></span><br><span class=\"line\">\tself.balance = self.balance - v; </span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"withdraw\"</span>, self.balance);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--继承</span></span><br><span class=\"line\">SpecialAccount = Account:new();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialAccount:getLimit</span><span class=\"params\">()</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.limit <span class=\"keyword\">or</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialAccount:withdraw</span><span class=\"params\">(v)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> self.balance - v &lt; -self:getLimit() <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">\"insufficient funds\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tself.balance = self.balance - v;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"withdraw\"</span>, self.balance);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">a3 = Account:new&#123;balance = <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">a4 = Account:new();</span><br><span class=\"line\">s1 = SpecialAccount:new&#123;limit = <span class=\"number\">1000.00</span>&#125;;</span><br><span class=\"line\">s2 = SpecialAccount:new();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Account, a1, a2, a3, a4, <span class=\"built_in\">getmetatable</span>(a4), <span class=\"built_in\">getmetatable</span>(s1));</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Account, a1, a2, a3, a4, <span class=\"built_in\">getmetatable</span>(a4), <span class=\"built_in\">getmetatable</span>(s1));</span><br><span class=\"line\"></span><br><span class=\"line\">a3:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\">a4:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\">s1:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\">s2:withdraw(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--多重继承</span></span><br><span class=\"line\">Named = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Named:getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.name;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Named:setName</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">\tself.name = n;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span><span class=\"params\">(k, plist)</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, z <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(plist) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">local</span> v = plist[i][k]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> v <span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createClass</span><span class=\"params\">(a, b)</span></span>\t<span class=\"comment\">--多重继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> c = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">local</span> parents = &#123;a, b&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(c, &#123;<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k)</span></span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> search(k, parents);</span><br><span class=\"line\">\t<span class=\"keyword\">end</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tc.<span class=\"built_in\">__index</span> = c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c:new</span><span class=\"params\">(o)</span></span></span><br><span class=\"line\">\t\to = o <span class=\"keyword\">or</span> &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setmetatable</span>(o, self);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">NamedAccount = createClass(Account, Named);</span><br><span class=\"line\">SpecialNamedAccount = createClass(SpecialAccount, Named);</span><br><span class=\"line\"></span><br><span class=\"line\">acnt1 = NamedAccount:new&#123;name = <span class=\"string\">\"Paul\"</span>&#125;;</span><br><span class=\"line\">acnt2 = SpecialNamedAccount:new&#123;name = <span class=\"string\">\"Ann\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(acnt1:getName(), acnt1.balance);</span><br><span class=\"line\">acnt2:deposit(<span class=\"number\">200</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(acnt2:getName(), acnt2.balance, acnt2:getLimit());</span><br></pre></td></tr></table></figure>\n<h3 id=\"私密性\"><a href=\"#私密性\" class=\"headerlink\" title=\"私密性\"></a>私密性</h3><p>虽然可以模拟，但对lua的设计目的而言，私密性似乎不非常重要，暂时一瞥掠过。</p>\n<h2 id=\"七、与C-C-交互\"><a href=\"#七、与C-C-交互\" class=\"headerlink\" title=\"七、与C/C++交互\"></a>七、与C/C++交互</h2><p>C程序可以使用lua库来执行lua代码，lua代码也可以调用在lua环境中注册了的用C语言实现的函数。<br>lua的C API包含读写lua全局变量、调用lua函数、运行一段lua代码、注册C函数供lua调用等。<br>lua.h(lua.hpp)声明了Lua提供的基础函数，包括创建Lua环境、调用Lua函数、读写Lua环境中的全局变量以及注册供lua调用的函数等，函数都以lua_开头；<br>luaxlib.h声明了辅助库(auxiliary library，auxlib)提供的函数，都以luaL_开头。辅助库并没有直接访问Lua的内部，而是都以官方基础API来完成所有工作。<br>Lua库中没有定义任何全局变量，而是将所有的状态信息都保存在动态结构lua_State中，所有lua C API的调用都要传入这个动态结构的指针。如果简单的将lua_State看作栈的话，这个栈有可以看作有两套引索序号，一套是从栈底到栈顶依次是1到N递增(绝对引索)，另一套是从栈顶到栈底的引索序号-1到-N的递减(相对引索)。所以可以直接使用引索值-1和1分别访问栈顶和栈底元素。</p>\n<h3 id=\"环境创建\"><a href=\"#环境创建\" class=\"headerlink\" title=\"环境创建\"></a>环境创建</h3><p><code>lua_State</code>是C程序与lua交互编程中最常用的数据结构，要C程序读取Lua中的变量，也是先调用lua的CAPI,将lua中的数据压入lua_State栈中,然后C程序再通过lua的CAPI读取lua_State栈中的元素,如此间接读取到lua的变量值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LUALIB_API lua_State *(luaL_newstate) (<span class=\"keyword\">void</span>);</span><br><span class=\"line\"><span class=\"function\">LUALIB_API <span class=\"title\">void</span> <span class=\"params\">(luaL_openlib)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *libname, <span class=\"keyword\">const</span> luaL_Reg *l, <span class=\"keyword\">int</span> nup)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUALIB_API <span class=\"title\">void</span> <span class=\"params\">(luaL_openlibs)</span> <span class=\"params\">(lua_State *L)</span></span>;\t<span class=\"comment\">// open all previous libraries</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"压元素入栈-增\"><a href=\"#压元素入栈-增\" class=\"headerlink\" title=\"压元素入栈(增)\"></a>压元素入栈(增)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* push functions (C -&gt; stack) */</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>        <span class=\"params\">(lua_pushnil)</span> <span class=\"params\">(lua_State *L)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>        <span class=\"params\">(lua_pushnumber)</span> <span class=\"params\">(lua_State *L, lua_Number n)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>        <span class=\"params\">(lua_pushinteger)</span> <span class=\"params\">(lua_State *L, lua_Integer n)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushlstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">size_t</span> len);\t<span class=\"comment\">// s字符串中间可任意包含'\\0'或不以'\\0'结尾</span></span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s);\t\t\t\t\t<span class=\"comment\">// s字符串中间不可包含'\\0'且必须以'\\'结尾</span></span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushvfstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *fmt, va_list argp);</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(lua_pushfstring) (lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *fmt, ...);</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushcclosure)</span> <span class=\"params\">(lua_State *L, lua_CFunction fn, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushboolean)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushlightuserdata)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">void</span> *p)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>   <span class=\"params\">(lua_pushthread)</span> <span class=\"params\">(lua_State *L)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pushcfunction(L,f)\tlua_pushcclosure(L, (f), 0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pushliteral(L, s)\tlua_pushstring(L, <span class=\"meta-string\">\"\"</span> s)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pushglobaltable(L)  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS)\t\t<span class=\"comment\">// ?</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查栈大小，调用参数很多的函数时可以检查一下栈空间是否还足够</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_checkstack)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问栈元素-查\"><a href=\"#访问栈元素-查\" class=\"headerlink\" title=\"访问栈元素(查)\"></a>访问栈元素(查)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* access functions (stack -&gt; C) */</span></span><br><span class=\"line\"><span class=\"comment\">// 判断L中序号为idx的元素能否转为函数所指的类型，及判断栈中的元素的类型</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isnumber)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isstring)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_iscfunction)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isinteger)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_isuserdata)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_type)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>     *(lua_typename) (lua_State *L, <span class=\"keyword\">int</span> tp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isfunction(L,n)\t(lua_type(L, (n)) == LUA_TFUNCTION)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_istable(L,n)\t(lua_type(L, (n)) == LUA_TTABLE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_islightuserdata(L,n)\t(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isnil(L,n)\t\t(lua_type(L, (n)) == LUA_TNIL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isboolean(L,n)\t(lua_type(L, (n)) == LUA_TBOOLEAN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isthread(L,n)\t(lua_type(L, (n)) == LUA_TTHREAD)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isnone(L,n)\t\t(lua_type(L, (n)) == LUA_TNONE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_isnoneornil(L, n)\t(lua_type(L, (n)) &lt;= 0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回L中序号为idx的元素返回为函数指定类型的结果</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">lua_Number</span>      <span class=\"params\">(lua_tonumberx)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">int</span> *isnum)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">lua_Integer</span>     <span class=\"params\">(lua_tointegerx)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">int</span> *isnum)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>             <span class=\"params\">(lua_toboolean)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>     *(lua_tolstring) (lua_State *L, <span class=\"keyword\">int</span> idx, <span class=\"keyword\">size_t</span> *len);</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">size_t</span>          <span class=\"params\">(lua_rawlen)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">lua_CFunction</span>   <span class=\"params\">(lua_tocfunction)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\">LUA_API <span class=\"keyword\">void</span>\t       *(lua_touserdata) (lua_State *L, <span class=\"keyword\">int</span> idx);</span><br><span class=\"line\">LUA_API lua_State      *(lua_tothread) (lua_State *L, <span class=\"keyword\">int</span> idx);</span><br><span class=\"line\">LUA_API <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>     *(lua_topointer) (lua_State *L, <span class=\"keyword\">int</span> idx);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_tostring(L,i)\tlua_tolstring(L, (i), NULL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_tonumber(L,i)\tlua_tonumberx(L,(i),NULL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_tointeger(L,i)\tlua_tointegerx(L,(i),NULL)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他栈元素操作\"><a href=\"#其他栈元素操作\" class=\"headerlink\" title=\"其他栈元素操作\"></a>其他栈元素操作</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span>   <span class=\"params\">(lua_gettop)</span> <span class=\"params\">(lua_State *L)</span></span>;\t\t\t<span class=\"comment\">// 获取栈顶元素的绝对引索值，即获取栈中元素的个数</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_settop)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;\t<span class=\"comment\">// 设置的位置比栈顶的位置大,则增长的元素值为nil,若比栈顶的位置小,则多余的元素被丢弃.lua_settop(L, 0)会清空栈L。</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span>  <span class=\"params\">(lua_pushvalue)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> idx)</span></span>;\t<span class=\"comment\">// 将idx上的栈元素的副本压入到栈顶</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pop(L,n)\t\tlua_settop(L, -(n)-1)\t\t<span class=\"comment\">// 栈弹出(清除)n个元素</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_insert(L,idx)\tlua_rotate(L, (idx), 1)\t\t<span class=\"comment\">// idx上的元素到栈顶的元素的一个循环位移</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_remove(L,idx)\t(lua_rotate(L, (idx), -1), lua_pop(L, 1)) \t<span class=\"comment\">// 将栈顶到idx的元素一个循环位移，然后将栈顶元素弹出，相当于删除了原先idx的元素</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_replace(L,idx)\t(lua_copy(L, -1, (idx)), lua_pop(L, 1))\t\t<span class=\"comment\">// 拷贝栈顶的元素到指定idx的元素上，然后将栈顶元素弹出</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行lua程序\"><a href=\"#执行lua程序\" class=\"headerlink\" title=\"执行lua程序\"></a>执行lua程序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译用户输入的每行内容，并将编译后的程序块压入栈中，返回0表示没有错误。</span></span><br><span class=\"line\"><span class=\"function\">LUALIB_API <span class=\"title\">int</span> <span class=\"params\">(luaL_loadbufferx)</span> <span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buff, <span class=\"keyword\">size_t</span> sz, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *mode)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> luaL_loadbuffer(L,s,sz,n)\tluaL_loadbufferx(L,s,sz,n,NULL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 'load' and 'call' functions (load and run Lua code) */</span></span><br><span class=\"line\"><span class=\"comment\">// 将程序块从栈中弹出，并在保护模式下运行弹出的程序块，返回0表示没有错误，若发生错误，则向栈中也入一条错误信息，用lua_tostring可以获取这条信息，获取之后使用lua_pop将这条错误信息从栈中删除。</span></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">void</span> <span class=\"params\">(lua_callk)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> nargs, <span class=\"keyword\">int</span> nresults, lua_KContext ctx, lua_KFunction k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_pcallk)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> nargs, <span class=\"keyword\">int</span> nresults, <span class=\"keyword\">int</span> errfunc, lua_KContext ctx, lua_KFunction k)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_call(L,n,r)\t\tlua_callk(L, (n), (r), 0, NULL)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lua_pcall(L,n,r,f)\tlua_pcallk(L, (n), (r), (f), 0, NULL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_load)</span> <span class=\"params\">(lua_State *L, lua_Reader reader, <span class=\"keyword\">void</span> *dt, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *chunkname, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *mode)</span></span>;</span><br><span class=\"line\"><span class=\"function\">LUA_API <span class=\"title\">int</span> <span class=\"params\">(lua_dump)</span> <span class=\"params\">(lua_State *L, lua_Writer writer, <span class=\"keyword\">void</span> *data, <span class=\"keyword\">int</span> strip)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> luaL_dofile(L, fn)\t\t(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> luaL_dostring(L, s)\t\t(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"lua扩展应用程序\"><a href=\"#lua扩展应用程序\" class=\"headerlink\" title=\"lua扩展应用程序\"></a>lua扩展应用程序</h3><h4 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h4><p>lua中定义一些全局变量，应用程序调用api将lua中的全局变量值压到L栈中，再通过api从L栈中将该值读取出来，即到读取配置参数的目的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaStackDump</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lua_gettop(L); i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> iType = lua_type(L, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (iType)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TSTRING:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TBOOLEAN:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TNUMBER:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> LUA_TNIL:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; lua_typename(L, iType) &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; lua_tostring(L, i) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; lua_typename(L, iType) &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *fmt, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tva_list argp;</span><br><span class=\"line\">\tva_start(argp, fmt);</span><br><span class=\"line\">\t<span class=\"built_in\">vfprintf</span>(<span class=\"built_in\">stderr</span>, fmt, argp);</span><br><span class=\"line\">\tva_end(argp);</span><br><span class=\"line\"></span><br><span class=\"line\">\tluaStackDump(L);</span><br><span class=\"line\">\tlua_close(L);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"app exit.\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaGetGlobalInt</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strVarName, <span class=\"keyword\">int</span> &amp;iRet)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strVarName.c_str());\t\t<span class=\"comment\">// 先读取全局变量值到栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lua_isnumber(L, <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"'%s' should be a number\\n\"</span>, strVarName.c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tiRet = (<span class=\"keyword\">int</span>)lua_tointeger(L, <span class=\"number\">-1</span>);\t\t\t<span class=\"comment\">// 然后再从栈中读取元素的值，间接读取lua全局变量的值</span></span><br><span class=\"line\">\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; strVarName &lt;&lt; <span class=\"string\">\" is \"</span> &lt;&lt; iRet &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaGetTableFiledValue</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strTblName, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strFldName, <span class=\"built_in\">string</span> &amp;strValue)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strTblName.c_str());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lua_istable(L, <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"%s is not a table\\n\"</span>, strTblName.c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlua_pushstring(L, strFldName.c_str());</span><br><span class=\"line\">\tlua_gettable(L, <span class=\"number\">-2</span>);</span><br><span class=\"line\">\tstrValue = lua_tostring(L, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\tlua_pop(L, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; strTblName &lt;&lt; <span class=\"string\">\"[\"</span> &lt;&lt; strFldName &lt;&lt; <span class=\"string\">\"] is \"</span> &lt;&lt; strValue &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaGetTableFiledValue</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strTblName, <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrFldsName, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrValues)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strTblName.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lua_istable(L, <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"%s is not a table\\n\"</span>, strTblName.c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vctstrFldsName.size(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlua_pushstring(L, vctstrFldsName[i].c_str());</span><br><span class=\"line\">\t\tlua_gettable(L, <span class=\"number\">-2</span>);</span><br><span class=\"line\">\t\tvctstrValues.push_back(lua_tostring(L, <span class=\"number\">-1</span>));</span><br><span class=\"line\">\t\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-C-程序调用lua脚本\"><a href=\"#C-C-程序调用lua脚本\" class=\"headerlink\" title=\"C/C++程序调用lua脚本\"></a>C/C++程序调用lua脚本</h4><p>lua中定义好函数后，C代码中使用api获取lua的函数对象压入到L栈中，然后再向L栈中按顺序压入函数参数，然后调用lua_pcall指定函数调用的参数个数和返回值个数,lua_pcall调用后，将会将之前压入的L栈的函数对象与参数弹出，然后将函数执行的返回值或函数执行失败的错误信息压入L栈中。C代码通过API从栈中将返回值或错误信息读取出来，然后需要C代码调用调用lua_pop里显示清理栈，恢复L栈至函数调用前状态。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaCallLuaFunc</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strFuncName, <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrParams, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;vctstrRets)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_getglobal(L, strFuncName.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vctstrParams.size(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlua_pushstring(L, vctstrParams[i].c_str());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (lua_pcall(L, vctstrParams.size(), vctstrRets.size(), <span class=\"literal\">NULL</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"error running function getSize: %s\\n\"</span>, lua_tostring(L, <span class=\"number\">-1</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = vctstrRets.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvctstrRets[i] = lua_tostring(L, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tlua_pop(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call \"</span> &lt;&lt; strFuncName &lt;&lt; <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vctstrParams.size() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\\"\"</span> &lt;&lt; vctstrParams[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; vctstrParams.size(); i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\", \\\"\"</span> &lt;&lt; vctstrParams[i] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\") returns (\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vctstrRets.size() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\\"\"</span> &lt;&lt; vctstrRets[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; vctstrRets.size(); i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\", \\\"\"</span> &lt;&lt; vctstrRets[i] &lt;&lt; <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">luaCallLuaFunc2</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cfunc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cfrm, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tva_list vl;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> narg = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nres = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tva_start(vl, cfrm);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 压入函数</span></span><br><span class=\"line\">\tlua_getglobal(L, cfunc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 压入参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (narg = <span class=\"number\">0</span>; *cfrm != <span class=\"string\">'\\0'</span>; narg++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tluaL_checkstack(L, <span class=\"number\">1</span>, <span class=\"string\">\"too many arguments\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (*cfrm++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'f'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlua_pushnumber(L, va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">double</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlua_pushinteger(L, va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlua_pushstring(L, va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'&gt;'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> endargs;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\terror(L, <span class=\"string\">\"invalid option (%c)\"</span>, *(cfrm - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">endargs:</span><br><span class=\"line\">\t<span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> irescnt = nres = <span class=\"built_in\">strlen</span>(cfrm);\t<span class=\"comment\">// 期望的结果数量</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (lua_pcall(L, narg, nres, <span class=\"number\">0</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\terror(L, <span class=\"string\">\"error calling %s:%s\"</span>, cfunc, lua_tostring(L, <span class=\"number\">-1</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取返回值</span></span><br><span class=\"line\">\tnres = -nres;\t<span class=\"comment\">// 第一个返回结果的栈位置</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (*cfrm)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (*cfrm++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'f'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!lua_isnumber(L, nres))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\terror(L, <span class=\"string\">\"wrong result type\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t*va_arg(vl, <span class=\"keyword\">double</span> *) = lua_tonumber(L, nres);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!lua_isinteger(L, nres))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\terror(L, <span class=\"string\">\"wrong result type\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t*va_arg(vl, <span class=\"keyword\">int</span> *) = (<span class=\"keyword\">int</span>)lua_tointeger(L, nres);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!lua_isstring(L, nres))</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\terror(L, <span class=\"string\">\"wrong result type\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t*va_arg(vl, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **) = lua_tostring(L, nres);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\terror(L, <span class=\"string\">\"invalid option (%c)\"</span>, *(cfrm<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnres++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlua_pop(L, irescnt);</span><br><span class=\"line\">\tva_end(vl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lua脚本调用C-C\"><a href=\"#lua脚本调用C-C\" class=\"headerlink\" title=\"lua脚本调用C/C++\"></a>lua脚本调用C/C++</h3><h4 id=\"lua脚本调用C-C-函数\"><a href=\"#lua脚本调用C-C-函数\" class=\"headerlink\" title=\"lua脚本调用C/C++函数\"></a>lua脚本调用C/C++函数</h4><p>所有注册到lua中的函数都具有相同的类型，或者可以说只有一种特定类型的函数才能注册到lua中，<br>该函数类型lua.h中定义如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*lua_CFunction)</span> <span class=\"params\">(lua_State *L)</span></span>;\t<span class=\"comment\">// Type for C functions registered with Lua</span></span><br></pre></td></tr></table></figure>\n<p>通过使用<code>lua_pushcfunction</code>和<code>lua_setglobal</code>两个方法就可以将一个函数注册到lua中，然后就可以在lua中通过使用lua_setglobal设置的globalname来调用到这个C函数了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registCFuncToLua</span><span class=\"params\">(lua_State *L, lua_CFunction pfunc, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;strGlobalName)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlua_pushcfunction(L, pfunc);</span><br><span class=\"line\">\tlua_setglobal(L, strGlobalName.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">l_sin</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> dbl = luaL_checknumber(L, <span class=\"number\">1</span>);</span><br><span class=\"line\">\tlua_pushnumber(L, <span class=\"built_in\">sin</span>(dbl));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tregistCFuncToLua(L, l_sin, <span class=\"string\">\"c_sin\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// lua代码中就可以使用c_sin来调用到l_sin函数了</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用C-C-定义LUA模块\"><a href=\"#使用C-C-定义LUA模块\" class=\"headerlink\" title=\"使用C/C++定义LUA模块\"></a>使用C/C++定义LUA模块</h4><p>以下LUA调用C/C++的方法应该可以理解成<code>require &quot;libname&quot;</code>语句的实现原理吧，简单理解就是在将C/C++代码封装成动态库时，若需要生成的动态库可以被lua require后使用，就需要在该动态库中定义一个接口(一个数组+一个函数)；</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* lauxlib.h中luaL_Reg和luaL_register的定义</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">typedef struct luaL_Reg &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tconst char *name;</span></span><br><span class=\"line\"><span class=\"comment\">\tlua_CFunction func;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; luaL_Reg;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#define luaL_register(L,n,l)\t(luaL_openlib(L,(n),(l),0))</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块中函数的定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">l_f1</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">l_f2</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定被lua脚本require时需要被导出的函数</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> luaL_Reg mylib[] = &#123;</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"f1\"</span>, l_f1&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"f2\"</span>, l_f2&#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#123;<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>&#125;\t<span class=\"comment\">// 固定结尾</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">luaopen_mylib</span><span class=\"params\">(lua_State *L)</span>\t\t\t<span class=\"comment\">// lua中`require \"mylib\"`时该函数会被注册与调用</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tluaL_register(L, <span class=\"string\">\"mylib\"</span>, mylib);\t<span class=\"comment\">// 根据\"mylib\"名称创建(或复用)一个table,并用数组mylib中的元素填充这个table,并将这个table压入到L栈中</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t\t\t\t\t\t\t<span class=\"comment\">// 使lua脚本知道栈中已压入table</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lua文件中require \"mylib\"后，就可以通过f1、f2调用到l_f1、l_f2了，可见这也是一种动态库函数不需要被声明导出就可以被外部调用的方法，而且参数个数与类型可变，非常灵活，应该可以实现类似javascript的\"函数重载\"。</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3mgo4ih000azmy2iwwaiow8","category_id":"ck3mgo4ia0002zmy2p1vlbog9","_id":"ck3mgo4il000hzmy2eeamukhs"},{"post_id":"ck3mgo4l6000tzmy28y7tel1c","category_id":"ck3mhcx3s00008qy2yhqe7vom","_id":"ck3mhcx3t00018qy2vmbmtppu"},{"post_id":"ck3mgo4i20000zmy2stsryv8c","category_id":"ck3mhft4900068qy243bk7bq4","_id":"ck3mhft4a00078qy2xyyauo52"},{"post_id":"ck3mgo4ie0005zmy27maccliq","category_id":"ck3mhgiyc00088qy23xcdm6ew","_id":"ck3mhgiyd000b8qy29rp7tfnp"},{"post_id":"ck3mgo4ic0004zmy242p70xwb","category_id":"ck3mhgiyc00088qy23xcdm6ew","_id":"ck3mhgt9c000c8qy2wnllok5f"},{"post_id":"ck3mgo4i70001zmy2am8j7bqk","category_id":"ck3mhhis3000d8qy2tb8gmyw5","_id":"ck3mhhis4000g8qy201a9krbh"},{"post_id":"ck3mgo4if0006zmy2kzog0oqn","category_id":"ck3mipc8l000s8qy2tphqy062","_id":"ck3mipc8m000t8qy28q7101np"}],"PostTag":[{"post_id":"ck3mgo4i20000zmy2stsryv8c","tag_id":"ck3mgo4ic0003zmy20hn9mabg","_id":"ck3mgo4ih0009zmy24lj0y2t1"},{"post_id":"ck3mgo4if0006zmy2kzog0oqn","tag_id":"ck3mgo4im000ozmy2tu0hlcwi","_id":"ck3mgo4in000rzmy2apogt800"},{"post_id":"ck3mgo4ih000azmy2iwwaiow8","tag_id":"ck3mgo4il000gzmy2x8zjpafs","_id":"ck3mgo4in000szmy2olbwtbtz"},{"post_id":"ck3mgo4l6000tzmy28y7tel1c","tag_id":"ck3mhd1bt00028qy2qv7ndh46","_id":"ck3mhd1bu00038qy27hm7zoke"},{"post_id":"ck3mgo4l6000tzmy28y7tel1c","tag_id":"ck3mhd5ws00048qy2477gii50","_id":"ck3mhd5ws00058qy2sbxxdbit"},{"post_id":"ck3mgo4ie0005zmy27maccliq","tag_id":"ck3mhgiyc00098qy2x86hgtvk","_id":"ck3mhgiyd000a8qy2h0drfyh3"},{"post_id":"ck3mgo4i70001zmy2am8j7bqk","tag_id":"ck3mhhis3000e8qy2z4uhdgzg","_id":"ck3mhhis5000h8qy20pmzpaow"},{"post_id":"ck3mgo4i70001zmy2am8j7bqk","tag_id":"ck3mhhis4000f8qy2ybfxxpsa","_id":"ck3mhhis5000i8qy2xsjbvq6e"},{"post_id":"ck3mgo4ie0005zmy27maccliq","tag_id":"ck3mhknky000j8qy2y5pz3a4b","_id":"ck3mhknkz000k8qy2144glzkn"},{"post_id":"ck3mgo4i20000zmy2stsryv8c","tag_id":"ck3mhl5vv000l8qy28c5njnv8","_id":"ck3mhl5vw000m8qy2vfr1s64x"},{"post_id":"ck3mgo4ic0004zmy242p70xwb","tag_id":"ck3mhgiyc00098qy2x86hgtvk","_id":"ck3mhlmlw000o8qy2vmv8b3im"},{"post_id":"ck3mgo4ic0004zmy242p70xwb","tag_id":"ck3mhlmlv000n8qy28iaayjge","_id":"ck3mhlmlw000p8qy251lrxzrd"},{"post_id":"ck3mgo4if0006zmy2kzog0oqn","tag_id":"ck3mhmpbv000q8qy2sz56ebev","_id":"ck3mhmpbv000r8qy2vwmav45d"}],"Tag":[{"name":"hexo","_id":"ck3mgo4ic0003zmy20hn9mabg"},{"name":"electron","_id":"ck3mgo4ig0008zmy2qqaostfq"},{"name":"vscode","_id":"ck3mgo4ik000dzmy21ms0kdb2"},{"name":"vpn","_id":"ck3mgo4il000gzmy2x8zjpafs"},{"name":"内网穿透","_id":"ck3mgo4im000ozmy2tu0hlcwi"},{"name":"lua","_id":"ck3mgo4l7000uzmy2n55s778h"},{"name":"c++","_id":"ck3mgo4l7000wzmy2ihc451ds"},{"name":"Lua","_id":"ck3mhd1bt00028qy2qv7ndh46"},{"name":"C++","_id":"ck3mhd5ws00048qy2477gii50"},{"name":"VPN","_id":"ck3mhgiyc00098qy2x86hgtvk"},{"name":"Electron","_id":"ck3mhhis3000e8qy2z4uhdgzg"},{"name":"VSCode","_id":"ck3mhhis4000f8qy2ybfxxpsa"},{"name":"PPTP","_id":"ck3mhknky000j8qy2y5pz3a4b"},{"name":"blog","_id":"ck3mhl5vv000l8qy28c5njnv8"},{"name":"IPSec","_id":"ck3mhlmlv000n8qy28iaayjge"},{"name":"frp","_id":"ck3mhmpbv000q8qy2sz56ebev"}]}}